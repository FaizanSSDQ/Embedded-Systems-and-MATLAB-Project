
Task_RTOS_ClassWork.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004488  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08004598  08004598  00014598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046d8  080046d8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080046d8  080046d8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046d8  080046d8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d8  080046d8  000146d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046dc  080046dc  000146dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080046e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a10  20000010  080046f0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a20  080046f0  00021a20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f05  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002eef  00000000  00000000  00034f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e0  00000000  00000000  00037e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ebd  00000000  00000000  00039150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000027e5  00000000  00000000  0003a00d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014d40  00000000  00000000  0003c7f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009374b  00000000  00000000  00051532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f38  00000000  00000000  000e4c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000e9bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004580 	.word	0x08004580

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004580 	.word	0x08004580

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fab4 	bl	80006c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f858 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f8c2 	bl	80002e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f896 	bl	8000290 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
tim_val = HAL_GetTick();
 8000164:	f000 fad4 	bl	8000710 <HAL_GetTick>
 8000168:	4603      	mov	r3, r0
 800016a:	b29a      	uxth	r2, r3
 800016c:	4b17      	ldr	r3, [pc, #92]	; (80001cc <main+0x7c>)
 800016e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000170:	f001 fcf8 	bl	8001b64 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000174:	4a16      	ldr	r2, [pc, #88]	; (80001d0 <main+0x80>)
 8000176:	2100      	movs	r1, #0
 8000178:	4816      	ldr	r0, [pc, #88]	; (80001d4 <main+0x84>)
 800017a:	f001 fd59 	bl	8001c30 <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a15      	ldr	r2, [pc, #84]	; (80001d8 <main+0x88>)
 8000182:	6013      	str	r3, [r2, #0]

  /* creation of My_FirstTask */
  My_FirstTaskHandle = osThreadNew(My_FirstFunction, NULL, &My_FirstTask_attributes);
 8000184:	4a15      	ldr	r2, [pc, #84]	; (80001dc <main+0x8c>)
 8000186:	2100      	movs	r1, #0
 8000188:	4815      	ldr	r0, [pc, #84]	; (80001e0 <main+0x90>)
 800018a:	f001 fd51 	bl	8001c30 <osThreadNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a14      	ldr	r2, [pc, #80]	; (80001e4 <main+0x94>)
 8000192:	6013      	str	r3, [r2, #0]

  /* creation of My_SecondTask */
  My_SecondTaskHandle = osThreadNew(My_SecondFunc, NULL, &My_SecondTask_attributes);
 8000194:	4a14      	ldr	r2, [pc, #80]	; (80001e8 <main+0x98>)
 8000196:	2100      	movs	r1, #0
 8000198:	4814      	ldr	r0, [pc, #80]	; (80001ec <main+0x9c>)
 800019a:	f001 fd49 	bl	8001c30 <osThreadNew>
 800019e:	4603      	mov	r3, r0
 80001a0:	4a13      	ldr	r2, [pc, #76]	; (80001f0 <main+0xa0>)
 80001a2:	6013      	str	r3, [r2, #0]

  /* creation of TransmitterTask */
  TransmitterTaskHandle = osThreadNew(Transmit_Func, NULL, &TransmitterTask_attributes);
 80001a4:	4a13      	ldr	r2, [pc, #76]	; (80001f4 <main+0xa4>)
 80001a6:	2100      	movs	r1, #0
 80001a8:	4813      	ldr	r0, [pc, #76]	; (80001f8 <main+0xa8>)
 80001aa:	f001 fd41 	bl	8001c30 <osThreadNew>
 80001ae:	4603      	mov	r3, r0
 80001b0:	4a12      	ldr	r2, [pc, #72]	; (80001fc <main+0xac>)
 80001b2:	6013      	str	r3, [r2, #0]

  /* creation of ReceiveTask */
  ReceiveTaskHandle = osThreadNew(Receive_Func, NULL, &ReceiveTask_attributes);
 80001b4:	4a12      	ldr	r2, [pc, #72]	; (8000200 <main+0xb0>)
 80001b6:	2100      	movs	r1, #0
 80001b8:	4812      	ldr	r0, [pc, #72]	; (8000204 <main+0xb4>)
 80001ba:	f001 fd39 	bl	8001c30 <osThreadNew>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a11      	ldr	r2, [pc, #68]	; (8000208 <main+0xb8>)
 80001c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001c4:	f001 fd00 	bl	8001bc8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c8:	e7fe      	b.n	80001c8 <main+0x78>
 80001ca:	bf00      	nop
 80001cc:	20000088 	.word	0x20000088
 80001d0:	080045f8 	.word	0x080045f8
 80001d4:	080003c1 	.word	0x080003c1
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800461c 	.word	0x0800461c
 80001e0:	080003d1 	.word	0x080003d1
 80001e4:	20000078 	.word	0x20000078
 80001e8:	08004640 	.word	0x08004640
 80001ec:	080003db 	.word	0x080003db
 80001f0:	2000007c 	.word	0x2000007c
 80001f4:	08004664 	.word	0x08004664
 80001f8:	080003e5 	.word	0x080003e5
 80001fc:	20000080 	.word	0x20000080
 8000200:	08004688 	.word	0x08004688
 8000204:	08000405 	.word	0x08000405
 8000208:	20000084 	.word	0x20000084

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b090      	sub	sp, #64	; 0x40
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0318 	add.w	r3, r7, #24
 8000216:	2228      	movs	r2, #40	; 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f004 f976 	bl	800450c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
 800022c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022e:	2302      	movs	r3, #2
 8000230:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000232:	2301      	movs	r3, #1
 8000234:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000236:	2310      	movs	r3, #16
 8000238:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023a:	2302      	movs	r3, #2
 800023c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800023e:	2300      	movs	r3, #0
 8000240:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000242:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000246:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000248:	f107 0318 	add.w	r3, r7, #24
 800024c:	4618      	mov	r0, r3
 800024e:	f000 fd21 	bl	8000c94 <HAL_RCC_OscConfig>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000258:	f000 f8f4 	bl	8000444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025c:	230f      	movs	r3, #15
 800025e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000260:	2302      	movs	r3, #2
 8000262:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2102      	movs	r1, #2
 8000276:	4618      	mov	r0, r3
 8000278:	f000 ff8e 	bl	8001198 <HAL_RCC_ClockConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000282:	f000 f8df 	bl	8000444 <Error_Handler>
  }
}
 8000286:	bf00      	nop
 8000288:	3740      	adds	r7, #64	; 0x40
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 8000296:	4a12      	ldr	r2, [pc, #72]	; (80002e0 <MX_USART2_UART_Init+0x50>)
 8000298:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800029a:	4b10      	ldr	r3, [pc, #64]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 800029c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002b4:	4b09      	ldr	r3, [pc, #36]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 80002b6:	220c      	movs	r2, #12
 80002b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ba:	4b08      	ldr	r3, [pc, #32]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002c6:	4805      	ldr	r0, [pc, #20]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 80002c8:	f001 fb6e 	bl	80019a8 <HAL_UART_Init>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002d2:	f000 f8b7 	bl	8000444 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	2000002c 	.word	0x2000002c
 80002e0:	40004400 	.word	0x40004400

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 0310 	add.w	r3, r7, #16
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f8:	4b2d      	ldr	r3, [pc, #180]	; (80003b0 <MX_GPIO_Init+0xcc>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a2c      	ldr	r2, [pc, #176]	; (80003b0 <MX_GPIO_Init+0xcc>)
 80002fe:	f043 0310 	orr.w	r3, r3, #16
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b2a      	ldr	r3, [pc, #168]	; (80003b0 <MX_GPIO_Init+0xcc>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0310 	and.w	r3, r3, #16
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000310:	4b27      	ldr	r3, [pc, #156]	; (80003b0 <MX_GPIO_Init+0xcc>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a26      	ldr	r2, [pc, #152]	; (80003b0 <MX_GPIO_Init+0xcc>)
 8000316:	f043 0320 	orr.w	r3, r3, #32
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b24      	ldr	r3, [pc, #144]	; (80003b0 <MX_GPIO_Init+0xcc>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0320 	and.w	r3, r3, #32
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000328:	4b21      	ldr	r3, [pc, #132]	; (80003b0 <MX_GPIO_Init+0xcc>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a20      	ldr	r2, [pc, #128]	; (80003b0 <MX_GPIO_Init+0xcc>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b1e      	ldr	r3, [pc, #120]	; (80003b0 <MX_GPIO_Init+0xcc>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0304 	and.w	r3, r3, #4
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000340:	4b1b      	ldr	r3, [pc, #108]	; (80003b0 <MX_GPIO_Init+0xcc>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a1a      	ldr	r2, [pc, #104]	; (80003b0 <MX_GPIO_Init+0xcc>)
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <MX_GPIO_Init+0xcc>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0308 	and.w	r3, r3, #8
 8000354:	603b      	str	r3, [r7, #0]
 8000356:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, My_LED_2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2130      	movs	r1, #48	; 0x30
 800035c:	4815      	ldr	r0, [pc, #84]	; (80003b4 <MX_GPIO_Init+0xd0>)
 800035e:	f000 fc45 	bl	8000bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000368:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <MX_GPIO_Init+0xd4>)
 800036a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036c:	2300      	movs	r3, #0
 800036e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000370:	f107 0310 	add.w	r3, r7, #16
 8000374:	4619      	mov	r1, r3
 8000376:	4811      	ldr	r0, [pc, #68]	; (80003bc <MX_GPIO_Init+0xd8>)
 8000378:	f000 fab4 	bl	80008e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : My_LED_2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = My_LED_2_Pin|LD2_Pin;
 800037c:	2330      	movs	r3, #48	; 0x30
 800037e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000380:	2301      	movs	r3, #1
 8000382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000384:	2300      	movs	r3, #0
 8000386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000388:	2302      	movs	r3, #2
 800038a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800038c:	f107 0310 	add.w	r3, r7, #16
 8000390:	4619      	mov	r1, r3
 8000392:	4808      	ldr	r0, [pc, #32]	; (80003b4 <MX_GPIO_Init+0xd0>)
 8000394:	f000 faa6 	bl	80008e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000398:	2200      	movs	r2, #0
 800039a:	2105      	movs	r1, #5
 800039c:	2028      	movs	r0, #40	; 0x28
 800039e:	f000 fa76 	bl	800088e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003a2:	2028      	movs	r0, #40	; 0x28
 80003a4:	f000 fa8f 	bl	80008c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003a8:	bf00      	nop
 80003aa:	3720      	adds	r7, #32
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40021000 	.word	0x40021000
 80003b4:	40010800 	.word	0x40010800
 80003b8:	10110000 	.word	0x10110000
 80003bc:	40011000 	.word	0x40011000

080003c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80003c8:	2001      	movs	r0, #1
 80003ca:	f001 fcdb 	bl	8001d84 <osDelay>
 80003ce:	e7fb      	b.n	80003c8 <StartDefaultTask+0x8>

080003d0 <My_FirstFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_My_FirstFunction */
void My_FirstFunction(void *argument)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN My_FirstFunction */
  /* Infinite loop */
  for(;;)
 80003d8:	e7fe      	b.n	80003d8 <My_FirstFunction+0x8>

080003da <My_SecondFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_My_SecondFunc */
void My_SecondFunc(void *argument)
{
 80003da:	b480      	push	{r7}
 80003dc:	b083      	sub	sp, #12
 80003de:	af00      	add	r7, sp, #0
 80003e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN My_SecondFunc */
  /* Infinite loop */
	//vTaskDelay();
  for(;;)
 80003e2:	e7fe      	b.n	80003e2 <My_SecondFunc+0x8>

080003e4 <Transmit_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Transmit_Func */
void Transmit_Func(void *argument)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Transmit_Func */
  /* Infinite loop */
  for(;;)
  {
    //osDelay(1);
	    HAL_GPIO_TogglePin(GPIOA , GPIO_PIN_5);
 80003ec:	2120      	movs	r1, #32
 80003ee:	4804      	ldr	r0, [pc, #16]	; (8000400 <Transmit_Func+0x1c>)
 80003f0:	f000 fc14 	bl	8000c1c <HAL_GPIO_TogglePin>
	    osDelay(4000);
 80003f4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80003f8:	f001 fcc4 	bl	8001d84 <osDelay>
	    HAL_GPIO_TogglePin(GPIOA , GPIO_PIN_5);
 80003fc:	e7f6      	b.n	80003ec <Transmit_Func+0x8>
 80003fe:	bf00      	nop
 8000400:	40010800 	.word	0x40010800

08000404 <Receive_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Receive_Func */
void Receive_Func(void *argument)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Receive_Func */
  /* Infinite loop */
  for(;;)
  {
    osDelay(200);
 800040c:	20c8      	movs	r0, #200	; 0xc8
 800040e:	f001 fcb9 	bl	8001d84 <osDelay>
     HAL_GPIO_TogglePin(GPIOA , GPIO_PIN_4);
 8000412:	2110      	movs	r1, #16
 8000414:	4801      	ldr	r0, [pc, #4]	; (800041c <Receive_Func+0x18>)
 8000416:	f000 fc01 	bl	8000c1c <HAL_GPIO_TogglePin>
    osDelay(200);
 800041a:	e7f7      	b.n	800040c <Receive_Func+0x8>
 800041c:	40010800 	.word	0x40010800

08000420 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a04      	ldr	r2, [pc, #16]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d101      	bne.n	8000436 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000432:	f000 f95b 	bl	80006ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40000800 	.word	0x40000800

08000444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000448:	b672      	cpsid	i
}
 800044a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800044c:	e7fe      	b.n	800044c <Error_Handler+0x8>
	...

08000450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <HAL_MspInit+0x4c>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	4a10      	ldr	r2, [pc, #64]	; (800049c <HAL_MspInit+0x4c>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6193      	str	r3, [r2, #24]
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <HAL_MspInit+0x4c>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046e:	4b0b      	ldr	r3, [pc, #44]	; (800049c <HAL_MspInit+0x4c>)
 8000470:	69db      	ldr	r3, [r3, #28]
 8000472:	4a0a      	ldr	r2, [pc, #40]	; (800049c <HAL_MspInit+0x4c>)
 8000474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000478:	61d3      	str	r3, [r2, #28]
 800047a:	4b08      	ldr	r3, [pc, #32]	; (800049c <HAL_MspInit+0x4c>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000482:	603b      	str	r3, [r7, #0]
 8000484:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000486:	2200      	movs	r2, #0
 8000488:	210f      	movs	r1, #15
 800048a:	f06f 0001 	mvn.w	r0, #1
 800048e:	f000 f9fe 	bl	800088e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000

080004a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b088      	sub	sp, #32
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a15      	ldr	r2, [pc, #84]	; (8000510 <HAL_UART_MspInit+0x70>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d123      	bne.n	8000508 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004c0:	4b14      	ldr	r3, [pc, #80]	; (8000514 <HAL_UART_MspInit+0x74>)
 80004c2:	69db      	ldr	r3, [r3, #28]
 80004c4:	4a13      	ldr	r2, [pc, #76]	; (8000514 <HAL_UART_MspInit+0x74>)
 80004c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ca:	61d3      	str	r3, [r2, #28]
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <HAL_UART_MspInit+0x74>)
 80004ce:	69db      	ldr	r3, [r3, #28]
 80004d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <HAL_UART_MspInit+0x74>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a0d      	ldr	r2, [pc, #52]	; (8000514 <HAL_UART_MspInit+0x74>)
 80004de:	f043 0304 	orr.w	r3, r3, #4
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <HAL_UART_MspInit+0x74>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0304 	and.w	r3, r3, #4
 80004ec:	60bb      	str	r3, [r7, #8]
 80004ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004f0:	230c      	movs	r3, #12
 80004f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f4:	2302      	movs	r3, #2
 80004f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f8:	2302      	movs	r3, #2
 80004fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fc:	f107 0310 	add.w	r3, r7, #16
 8000500:	4619      	mov	r1, r3
 8000502:	4805      	ldr	r0, [pc, #20]	; (8000518 <HAL_UART_MspInit+0x78>)
 8000504:	f000 f9ee 	bl	80008e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000508:	bf00      	nop
 800050a:	3720      	adds	r7, #32
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40004400 	.word	0x40004400
 8000514:	40021000 	.word	0x40021000
 8000518:	40010800 	.word	0x40010800

0800051c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08e      	sub	sp, #56	; 0x38
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000524:	2300      	movs	r3, #0
 8000526:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000528:	2300      	movs	r3, #0
 800052a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800052c:	2300      	movs	r3, #0
 800052e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000532:	4b34      	ldr	r3, [pc, #208]	; (8000604 <HAL_InitTick+0xe8>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	4a33      	ldr	r2, [pc, #204]	; (8000604 <HAL_InitTick+0xe8>)
 8000538:	f043 0304 	orr.w	r3, r3, #4
 800053c:	61d3      	str	r3, [r2, #28]
 800053e:	4b31      	ldr	r3, [pc, #196]	; (8000604 <HAL_InitTick+0xe8>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	f003 0304 	and.w	r3, r3, #4
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800054a:	f107 0210 	add.w	r2, r7, #16
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	4611      	mov	r1, r2
 8000554:	4618      	mov	r0, r3
 8000556:	f000 ff8f 	bl	8001478 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800055a:	6a3b      	ldr	r3, [r7, #32]
 800055c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800055e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000560:	2b00      	cmp	r3, #0
 8000562:	d103      	bne.n	800056c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000564:	f000 ff60 	bl	8001428 <HAL_RCC_GetPCLK1Freq>
 8000568:	6378      	str	r0, [r7, #52]	; 0x34
 800056a:	e004      	b.n	8000576 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800056c:	f000 ff5c 	bl	8001428 <HAL_RCC_GetPCLK1Freq>
 8000570:	4603      	mov	r3, r0
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000578:	4a23      	ldr	r2, [pc, #140]	; (8000608 <HAL_InitTick+0xec>)
 800057a:	fba2 2303 	umull	r2, r3, r2, r3
 800057e:	0c9b      	lsrs	r3, r3, #18
 8000580:	3b01      	subs	r3, #1
 8000582:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000584:	4b21      	ldr	r3, [pc, #132]	; (800060c <HAL_InitTick+0xf0>)
 8000586:	4a22      	ldr	r2, [pc, #136]	; (8000610 <HAL_InitTick+0xf4>)
 8000588:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800058a:	4b20      	ldr	r3, [pc, #128]	; (800060c <HAL_InitTick+0xf0>)
 800058c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000590:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000592:	4a1e      	ldr	r2, [pc, #120]	; (800060c <HAL_InitTick+0xf0>)
 8000594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000596:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000598:	4b1c      	ldr	r3, [pc, #112]	; (800060c <HAL_InitTick+0xf0>)
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800059e:	4b1b      	ldr	r3, [pc, #108]	; (800060c <HAL_InitTick+0xf0>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005a4:	4b19      	ldr	r3, [pc, #100]	; (800060c <HAL_InitTick+0xf0>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80005aa:	4818      	ldr	r0, [pc, #96]	; (800060c <HAL_InitTick+0xf0>)
 80005ac:	f000 ffb2 	bl	8001514 <HAL_TIM_Base_Init>
 80005b0:	4603      	mov	r3, r0
 80005b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80005b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d11b      	bne.n	80005f6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80005be:	4813      	ldr	r0, [pc, #76]	; (800060c <HAL_InitTick+0xf0>)
 80005c0:	f001 f800 	bl	80015c4 <HAL_TIM_Base_Start_IT>
 80005c4:	4603      	mov	r3, r0
 80005c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80005ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d111      	bne.n	80005f6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80005d2:	201e      	movs	r0, #30
 80005d4:	f000 f977 	bl	80008c6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b0f      	cmp	r3, #15
 80005dc:	d808      	bhi.n	80005f0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80005de:	2200      	movs	r2, #0
 80005e0:	6879      	ldr	r1, [r7, #4]
 80005e2:	201e      	movs	r0, #30
 80005e4:	f000 f953 	bl	800088e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <HAL_InitTick+0xf8>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6013      	str	r3, [r2, #0]
 80005ee:	e002      	b.n	80005f6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80005f0:	2301      	movs	r3, #1
 80005f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80005f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3738      	adds	r7, #56	; 0x38
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40021000 	.word	0x40021000
 8000608:	431bde83 	.word	0x431bde83
 800060c:	2000008c 	.word	0x2000008c
 8000610:	40000800 	.word	0x40000800
 8000614:	20000004 	.word	0x20000004

08000618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800061c:	e7fe      	b.n	800061c <NMI_Handler+0x4>

0800061e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000622:	e7fe      	b.n	8000622 <HardFault_Handler+0x4>

08000624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <MemManage_Handler+0x4>

0800062a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <BusFault_Handler+0x4>

08000630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <UsageFault_Handler+0x4>

08000636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
	...

08000644 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000648:	4802      	ldr	r0, [pc, #8]	; (8000654 <TIM4_IRQHandler+0x10>)
 800064a:	f001 f80d 	bl	8001668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2000008c 	.word	0x2000008c

08000658 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800065c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000660:	f000 faf6 	bl	8000c50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}

08000668 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000674:	f7ff fff8 	bl	8000668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000678:	480b      	ldr	r0, [pc, #44]	; (80006a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800067a:	490c      	ldr	r1, [pc, #48]	; (80006ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800067c:	4a0c      	ldr	r2, [pc, #48]	; (80006b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000680:	e002      	b.n	8000688 <LoopCopyDataInit>

08000682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000686:	3304      	adds	r3, #4

08000688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800068c:	d3f9      	bcc.n	8000682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068e:	4a09      	ldr	r2, [pc, #36]	; (80006b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000690:	4c09      	ldr	r4, [pc, #36]	; (80006b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000694:	e001      	b.n	800069a <LoopFillZerobss>

08000696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000698:	3204      	adds	r2, #4

0800069a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800069c:	d3fb      	bcc.n	8000696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800069e:	f003 ff3d 	bl	800451c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006a2:	f7ff fd55 	bl	8000150 <main>
  bx lr
 80006a6:	4770      	bx	lr
  ldr r0, =_sdata
 80006a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80006b0:	080046e0 	.word	0x080046e0
  ldr r2, =_sbss
 80006b4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80006b8:	20001a20 	.word	0x20001a20

080006bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC1_2_IRQHandler>
	...

080006c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <HAL_Init+0x28>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <HAL_Init+0x28>)
 80006ca:	f043 0310 	orr.w	r3, r3, #16
 80006ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d0:	2003      	movs	r0, #3
 80006d2:	f000 f8d1 	bl	8000878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006d6:	200f      	movs	r0, #15
 80006d8:	f7ff ff20 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006dc:	f7ff feb8 	bl	8000450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40022000 	.word	0x40022000

080006ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <HAL_IncTick+0x1c>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <HAL_IncTick+0x20>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4413      	add	r3, r2
 80006fc:	4a03      	ldr	r2, [pc, #12]	; (800070c <HAL_IncTick+0x20>)
 80006fe:	6013      	str	r3, [r2, #0]
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	20000008 	.word	0x20000008
 800070c:	200000d4 	.word	0x200000d4

08000710 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return uwTick;
 8000714:	4b02      	ldr	r3, [pc, #8]	; (8000720 <HAL_GetTick+0x10>)
 8000716:	681b      	ldr	r3, [r3, #0]
}
 8000718:	4618      	mov	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	200000d4 	.word	0x200000d4

08000724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <__NVIC_SetPriorityGrouping+0x44>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800073a:	68ba      	ldr	r2, [r7, #8]
 800073c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000740:	4013      	ands	r3, r2
 8000742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800074c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000756:	4a04      	ldr	r2, [pc, #16]	; (8000768 <__NVIC_SetPriorityGrouping+0x44>)
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	60d3      	str	r3, [r2, #12]
}
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000770:	4b04      	ldr	r3, [pc, #16]	; (8000784 <__NVIC_GetPriorityGrouping+0x18>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	0a1b      	lsrs	r3, r3, #8
 8000776:	f003 0307 	and.w	r3, r3, #7
}
 800077a:	4618      	mov	r0, r3
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	2b00      	cmp	r3, #0
 8000798:	db0b      	blt.n	80007b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	f003 021f 	and.w	r2, r3, #31
 80007a0:	4906      	ldr	r1, [pc, #24]	; (80007bc <__NVIC_EnableIRQ+0x34>)
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	095b      	lsrs	r3, r3, #5
 80007a8:	2001      	movs	r0, #1
 80007aa:	fa00 f202 	lsl.w	r2, r0, r2
 80007ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	e000e100 	.word	0xe000e100

080007c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	6039      	str	r1, [r7, #0]
 80007ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	db0a      	blt.n	80007ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	490c      	ldr	r1, [pc, #48]	; (800080c <__NVIC_SetPriority+0x4c>)
 80007da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007de:	0112      	lsls	r2, r2, #4
 80007e0:	b2d2      	uxtb	r2, r2
 80007e2:	440b      	add	r3, r1
 80007e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e8:	e00a      	b.n	8000800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4908      	ldr	r1, [pc, #32]	; (8000810 <__NVIC_SetPriority+0x50>)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	f003 030f 	and.w	r3, r3, #15
 80007f6:	3b04      	subs	r3, #4
 80007f8:	0112      	lsls	r2, r2, #4
 80007fa:	b2d2      	uxtb	r2, r2
 80007fc:	440b      	add	r3, r1
 80007fe:	761a      	strb	r2, [r3, #24]
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000e100 	.word	0xe000e100
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000814:	b480      	push	{r7}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	f1c3 0307 	rsb	r3, r3, #7
 800082e:	2b04      	cmp	r3, #4
 8000830:	bf28      	it	cs
 8000832:	2304      	movcs	r3, #4
 8000834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	3304      	adds	r3, #4
 800083a:	2b06      	cmp	r3, #6
 800083c:	d902      	bls.n	8000844 <NVIC_EncodePriority+0x30>
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3b03      	subs	r3, #3
 8000842:	e000      	b.n	8000846 <NVIC_EncodePriority+0x32>
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000848:	f04f 32ff 	mov.w	r2, #4294967295
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	43da      	mvns	r2, r3
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	401a      	ands	r2, r3
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800085c:	f04f 31ff 	mov.w	r1, #4294967295
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	fa01 f303 	lsl.w	r3, r1, r3
 8000866:	43d9      	mvns	r1, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800086c:	4313      	orrs	r3, r2
         );
}
 800086e:	4618      	mov	r0, r3
 8000870:	3724      	adds	r7, #36	; 0x24
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff ff4f 	bl	8000724 <__NVIC_SetPriorityGrouping>
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800088e:	b580      	push	{r7, lr}
 8000890:	b086      	sub	sp, #24
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a0:	f7ff ff64 	bl	800076c <__NVIC_GetPriorityGrouping>
 80008a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	68b9      	ldr	r1, [r7, #8]
 80008aa:	6978      	ldr	r0, [r7, #20]
 80008ac:	f7ff ffb2 	bl	8000814 <NVIC_EncodePriority>
 80008b0:	4602      	mov	r2, r0
 80008b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff81 	bl	80007c0 <__NVIC_SetPriority>
}
 80008be:	bf00      	nop
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	4603      	mov	r3, r0
 80008ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff57 	bl	8000788 <__NVIC_EnableIRQ>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b08b      	sub	sp, #44	; 0x2c
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008f6:	e169      	b.n	8000bcc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008f8:	2201      	movs	r2, #1
 80008fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	69fa      	ldr	r2, [r7, #28]
 8000908:	4013      	ands	r3, r2
 800090a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	429a      	cmp	r2, r3
 8000912:	f040 8158 	bne.w	8000bc6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	4a9a      	ldr	r2, [pc, #616]	; (8000b84 <HAL_GPIO_Init+0x2a0>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d05e      	beq.n	80009de <HAL_GPIO_Init+0xfa>
 8000920:	4a98      	ldr	r2, [pc, #608]	; (8000b84 <HAL_GPIO_Init+0x2a0>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d875      	bhi.n	8000a12 <HAL_GPIO_Init+0x12e>
 8000926:	4a98      	ldr	r2, [pc, #608]	; (8000b88 <HAL_GPIO_Init+0x2a4>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d058      	beq.n	80009de <HAL_GPIO_Init+0xfa>
 800092c:	4a96      	ldr	r2, [pc, #600]	; (8000b88 <HAL_GPIO_Init+0x2a4>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d86f      	bhi.n	8000a12 <HAL_GPIO_Init+0x12e>
 8000932:	4a96      	ldr	r2, [pc, #600]	; (8000b8c <HAL_GPIO_Init+0x2a8>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d052      	beq.n	80009de <HAL_GPIO_Init+0xfa>
 8000938:	4a94      	ldr	r2, [pc, #592]	; (8000b8c <HAL_GPIO_Init+0x2a8>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d869      	bhi.n	8000a12 <HAL_GPIO_Init+0x12e>
 800093e:	4a94      	ldr	r2, [pc, #592]	; (8000b90 <HAL_GPIO_Init+0x2ac>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d04c      	beq.n	80009de <HAL_GPIO_Init+0xfa>
 8000944:	4a92      	ldr	r2, [pc, #584]	; (8000b90 <HAL_GPIO_Init+0x2ac>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d863      	bhi.n	8000a12 <HAL_GPIO_Init+0x12e>
 800094a:	4a92      	ldr	r2, [pc, #584]	; (8000b94 <HAL_GPIO_Init+0x2b0>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d046      	beq.n	80009de <HAL_GPIO_Init+0xfa>
 8000950:	4a90      	ldr	r2, [pc, #576]	; (8000b94 <HAL_GPIO_Init+0x2b0>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d85d      	bhi.n	8000a12 <HAL_GPIO_Init+0x12e>
 8000956:	2b12      	cmp	r3, #18
 8000958:	d82a      	bhi.n	80009b0 <HAL_GPIO_Init+0xcc>
 800095a:	2b12      	cmp	r3, #18
 800095c:	d859      	bhi.n	8000a12 <HAL_GPIO_Init+0x12e>
 800095e:	a201      	add	r2, pc, #4	; (adr r2, 8000964 <HAL_GPIO_Init+0x80>)
 8000960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000964:	080009df 	.word	0x080009df
 8000968:	080009b9 	.word	0x080009b9
 800096c:	080009cb 	.word	0x080009cb
 8000970:	08000a0d 	.word	0x08000a0d
 8000974:	08000a13 	.word	0x08000a13
 8000978:	08000a13 	.word	0x08000a13
 800097c:	08000a13 	.word	0x08000a13
 8000980:	08000a13 	.word	0x08000a13
 8000984:	08000a13 	.word	0x08000a13
 8000988:	08000a13 	.word	0x08000a13
 800098c:	08000a13 	.word	0x08000a13
 8000990:	08000a13 	.word	0x08000a13
 8000994:	08000a13 	.word	0x08000a13
 8000998:	08000a13 	.word	0x08000a13
 800099c:	08000a13 	.word	0x08000a13
 80009a0:	08000a13 	.word	0x08000a13
 80009a4:	08000a13 	.word	0x08000a13
 80009a8:	080009c1 	.word	0x080009c1
 80009ac:	080009d5 	.word	0x080009d5
 80009b0:	4a79      	ldr	r2, [pc, #484]	; (8000b98 <HAL_GPIO_Init+0x2b4>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d013      	beq.n	80009de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009b6:	e02c      	b.n	8000a12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	623b      	str	r3, [r7, #32]
          break;
 80009be:	e029      	b.n	8000a14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	3304      	adds	r3, #4
 80009c6:	623b      	str	r3, [r7, #32]
          break;
 80009c8:	e024      	b.n	8000a14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	3308      	adds	r3, #8
 80009d0:	623b      	str	r3, [r7, #32]
          break;
 80009d2:	e01f      	b.n	8000a14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	330c      	adds	r3, #12
 80009da:	623b      	str	r3, [r7, #32]
          break;
 80009dc:	e01a      	b.n	8000a14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d102      	bne.n	80009ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009e6:	2304      	movs	r3, #4
 80009e8:	623b      	str	r3, [r7, #32]
          break;
 80009ea:	e013      	b.n	8000a14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d105      	bne.n	8000a00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009f4:	2308      	movs	r3, #8
 80009f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	69fa      	ldr	r2, [r7, #28]
 80009fc:	611a      	str	r2, [r3, #16]
          break;
 80009fe:	e009      	b.n	8000a14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a00:	2308      	movs	r3, #8
 8000a02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	69fa      	ldr	r2, [r7, #28]
 8000a08:	615a      	str	r2, [r3, #20]
          break;
 8000a0a:	e003      	b.n	8000a14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
          break;
 8000a10:	e000      	b.n	8000a14 <HAL_GPIO_Init+0x130>
          break;
 8000a12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	2bff      	cmp	r3, #255	; 0xff
 8000a18:	d801      	bhi.n	8000a1e <HAL_GPIO_Init+0x13a>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	e001      	b.n	8000a22 <HAL_GPIO_Init+0x13e>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	3304      	adds	r3, #4
 8000a22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	2bff      	cmp	r3, #255	; 0xff
 8000a28:	d802      	bhi.n	8000a30 <HAL_GPIO_Init+0x14c>
 8000a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	e002      	b.n	8000a36 <HAL_GPIO_Init+0x152>
 8000a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a32:	3b08      	subs	r3, #8
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	210f      	movs	r1, #15
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	fa01 f303 	lsl.w	r3, r1, r3
 8000a44:	43db      	mvns	r3, r3
 8000a46:	401a      	ands	r2, r3
 8000a48:	6a39      	ldr	r1, [r7, #32]
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a50:	431a      	orrs	r2, r3
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	f000 80b1 	beq.w	8000bc6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a64:	4b4d      	ldr	r3, [pc, #308]	; (8000b9c <HAL_GPIO_Init+0x2b8>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a4c      	ldr	r2, [pc, #304]	; (8000b9c <HAL_GPIO_Init+0x2b8>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b4a      	ldr	r3, [pc, #296]	; (8000b9c <HAL_GPIO_Init+0x2b8>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a7c:	4a48      	ldr	r2, [pc, #288]	; (8000ba0 <HAL_GPIO_Init+0x2bc>)
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a80:	089b      	lsrs	r3, r3, #2
 8000a82:	3302      	adds	r3, #2
 8000a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8c:	f003 0303 	and.w	r3, r3, #3
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	220f      	movs	r2, #15
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a40      	ldr	r2, [pc, #256]	; (8000ba4 <HAL_GPIO_Init+0x2c0>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d013      	beq.n	8000ad0 <HAL_GPIO_Init+0x1ec>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a3f      	ldr	r2, [pc, #252]	; (8000ba8 <HAL_GPIO_Init+0x2c4>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d00d      	beq.n	8000acc <HAL_GPIO_Init+0x1e8>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a3e      	ldr	r2, [pc, #248]	; (8000bac <HAL_GPIO_Init+0x2c8>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d007      	beq.n	8000ac8 <HAL_GPIO_Init+0x1e4>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a3d      	ldr	r2, [pc, #244]	; (8000bb0 <HAL_GPIO_Init+0x2cc>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d101      	bne.n	8000ac4 <HAL_GPIO_Init+0x1e0>
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	e006      	b.n	8000ad2 <HAL_GPIO_Init+0x1ee>
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	e004      	b.n	8000ad2 <HAL_GPIO_Init+0x1ee>
 8000ac8:	2302      	movs	r3, #2
 8000aca:	e002      	b.n	8000ad2 <HAL_GPIO_Init+0x1ee>
 8000acc:	2301      	movs	r3, #1
 8000ace:	e000      	b.n	8000ad2 <HAL_GPIO_Init+0x1ee>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ad4:	f002 0203 	and.w	r2, r2, #3
 8000ad8:	0092      	lsls	r2, r2, #2
 8000ada:	4093      	lsls	r3, r2
 8000adc:	68fa      	ldr	r2, [r7, #12]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ae2:	492f      	ldr	r1, [pc, #188]	; (8000ba0 <HAL_GPIO_Init+0x2bc>)
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae6:	089b      	lsrs	r3, r3, #2
 8000ae8:	3302      	adds	r3, #2
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d006      	beq.n	8000b0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000afc:	4b2d      	ldr	r3, [pc, #180]	; (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000afe:	689a      	ldr	r2, [r3, #8]
 8000b00:	492c      	ldr	r1, [pc, #176]	; (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	608b      	str	r3, [r1, #8]
 8000b08:	e006      	b.n	8000b18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b0a:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b0c:	689a      	ldr	r2, [r3, #8]
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	43db      	mvns	r3, r3
 8000b12:	4928      	ldr	r1, [pc, #160]	; (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b14:	4013      	ands	r3, r2
 8000b16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d006      	beq.n	8000b32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b24:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b26:	68da      	ldr	r2, [r3, #12]
 8000b28:	4922      	ldr	r1, [pc, #136]	; (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	60cb      	str	r3, [r1, #12]
 8000b30:	e006      	b.n	8000b40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b32:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b34:	68da      	ldr	r2, [r3, #12]
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	491e      	ldr	r1, [pc, #120]	; (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d006      	beq.n	8000b5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b4c:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b4e:	685a      	ldr	r2, [r3, #4]
 8000b50:	4918      	ldr	r1, [pc, #96]	; (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	604b      	str	r3, [r1, #4]
 8000b58:	e006      	b.n	8000b68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b5a:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b5c:	685a      	ldr	r2, [r3, #4]
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	43db      	mvns	r3, r3
 8000b62:	4914      	ldr	r1, [pc, #80]	; (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b64:	4013      	ands	r3, r2
 8000b66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d021      	beq.n	8000bb8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	490e      	ldr	r1, [pc, #56]	; (8000bb4 <HAL_GPIO_Init+0x2d0>)
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	600b      	str	r3, [r1, #0]
 8000b80:	e021      	b.n	8000bc6 <HAL_GPIO_Init+0x2e2>
 8000b82:	bf00      	nop
 8000b84:	10320000 	.word	0x10320000
 8000b88:	10310000 	.word	0x10310000
 8000b8c:	10220000 	.word	0x10220000
 8000b90:	10210000 	.word	0x10210000
 8000b94:	10120000 	.word	0x10120000
 8000b98:	10110000 	.word	0x10110000
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40010000 	.word	0x40010000
 8000ba4:	40010800 	.word	0x40010800
 8000ba8:	40010c00 	.word	0x40010c00
 8000bac:	40011000 	.word	0x40011000
 8000bb0:	40011400 	.word	0x40011400
 8000bb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <HAL_GPIO_Init+0x304>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	4909      	ldr	r1, [pc, #36]	; (8000be8 <HAL_GPIO_Init+0x304>)
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc8:	3301      	adds	r3, #1
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f47f ae8e 	bne.w	80008f8 <HAL_GPIO_Init+0x14>
  }
}
 8000bdc:	bf00      	nop
 8000bde:	bf00      	nop
 8000be0:	372c      	adds	r7, #44	; 0x2c
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	40010400 	.word	0x40010400

08000bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	807b      	strh	r3, [r7, #2]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bfc:	787b      	ldrb	r3, [r7, #1]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c02:	887a      	ldrh	r2, [r7, #2]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c08:	e003      	b.n	8000c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c0a:	887b      	ldrh	r3, [r7, #2]
 8000c0c:	041a      	lsls	r2, r3, #16
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	611a      	str	r2, [r3, #16]
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr

08000c1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	460b      	mov	r3, r1
 8000c26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c2e:	887a      	ldrh	r2, [r7, #2]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4013      	ands	r3, r2
 8000c34:	041a      	lsls	r2, r3, #16
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	43d9      	mvns	r1, r3
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	400b      	ands	r3, r1
 8000c3e:	431a      	orrs	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	611a      	str	r2, [r3, #16]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
	...

08000c50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c5a:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c5c:	695a      	ldr	r2, [r3, #20]
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	4013      	ands	r3, r2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d006      	beq.n	8000c74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f806 	bl	8000c80 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40010400 	.word	0x40010400

08000c80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e272      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 8087 	beq.w	8000dc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cb4:	4b92      	ldr	r3, [pc, #584]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 030c 	and.w	r3, r3, #12
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	d00c      	beq.n	8000cda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cc0:	4b8f      	ldr	r3, [pc, #572]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 030c 	and.w	r3, r3, #12
 8000cc8:	2b08      	cmp	r3, #8
 8000cca:	d112      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x5e>
 8000ccc:	4b8c      	ldr	r3, [pc, #560]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd8:	d10b      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cda:	4b89      	ldr	r3, [pc, #548]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d06c      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x12c>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d168      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e24c      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cfa:	d106      	bne.n	8000d0a <HAL_RCC_OscConfig+0x76>
 8000cfc:	4b80      	ldr	r3, [pc, #512]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a7f      	ldr	r2, [pc, #508]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	e02e      	b.n	8000d68 <HAL_RCC_OscConfig+0xd4>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10c      	bne.n	8000d2c <HAL_RCC_OscConfig+0x98>
 8000d12:	4b7b      	ldr	r3, [pc, #492]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a7a      	ldr	r2, [pc, #488]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	4b78      	ldr	r3, [pc, #480]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a77      	ldr	r2, [pc, #476]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	e01d      	b.n	8000d68 <HAL_RCC_OscConfig+0xd4>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d34:	d10c      	bne.n	8000d50 <HAL_RCC_OscConfig+0xbc>
 8000d36:	4b72      	ldr	r3, [pc, #456]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a71      	ldr	r2, [pc, #452]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	4b6f      	ldr	r3, [pc, #444]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a6e      	ldr	r2, [pc, #440]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	e00b      	b.n	8000d68 <HAL_RCC_OscConfig+0xd4>
 8000d50:	4b6b      	ldr	r3, [pc, #428]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a6a      	ldr	r2, [pc, #424]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	4b68      	ldr	r3, [pc, #416]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a67      	ldr	r2, [pc, #412]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d013      	beq.n	8000d98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d70:	f7ff fcce 	bl	8000710 <HAL_GetTick>
 8000d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d76:	e008      	b.n	8000d8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d78:	f7ff fcca 	bl	8000710 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b64      	cmp	r3, #100	; 0x64
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e200      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d8a:	4b5d      	ldr	r3, [pc, #372]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0f0      	beq.n	8000d78 <HAL_RCC_OscConfig+0xe4>
 8000d96:	e014      	b.n	8000dc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d98:	f7ff fcba 	bl	8000710 <HAL_GetTick>
 8000d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d9e:	e008      	b.n	8000db2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000da0:	f7ff fcb6 	bl	8000710 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b64      	cmp	r3, #100	; 0x64
 8000dac:	d901      	bls.n	8000db2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e1ec      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000db2:	4b53      	ldr	r3, [pc, #332]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f0      	bne.n	8000da0 <HAL_RCC_OscConfig+0x10c>
 8000dbe:	e000      	b.n	8000dc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d063      	beq.n	8000e96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dce:	4b4c      	ldr	r3, [pc, #304]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 030c 	and.w	r3, r3, #12
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00b      	beq.n	8000df2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dda:	4b49      	ldr	r3, [pc, #292]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 030c 	and.w	r3, r3, #12
 8000de2:	2b08      	cmp	r3, #8
 8000de4:	d11c      	bne.n	8000e20 <HAL_RCC_OscConfig+0x18c>
 8000de6:	4b46      	ldr	r3, [pc, #280]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d116      	bne.n	8000e20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000df2:	4b43      	ldr	r3, [pc, #268]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d005      	beq.n	8000e0a <HAL_RCC_OscConfig+0x176>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	691b      	ldr	r3, [r3, #16]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d001      	beq.n	8000e0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e1c0      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e0a:	4b3d      	ldr	r3, [pc, #244]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	4939      	ldr	r1, [pc, #228]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e1e:	e03a      	b.n	8000e96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d020      	beq.n	8000e6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e28:	4b36      	ldr	r3, [pc, #216]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2e:	f7ff fc6f 	bl	8000710 <HAL_GetTick>
 8000e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e34:	e008      	b.n	8000e48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e36:	f7ff fc6b 	bl	8000710 <HAL_GetTick>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d901      	bls.n	8000e48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e44:	2303      	movs	r3, #3
 8000e46:	e1a1      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e48:	4b2d      	ldr	r3, [pc, #180]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d0f0      	beq.n	8000e36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e54:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	4927      	ldr	r1, [pc, #156]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	4313      	orrs	r3, r2
 8000e66:	600b      	str	r3, [r1, #0]
 8000e68:	e015      	b.n	8000e96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e70:	f7ff fc4e 	bl	8000710 <HAL_GetTick>
 8000e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e76:	e008      	b.n	8000e8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e78:	f7ff fc4a 	bl	8000710 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e180      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1f0      	bne.n	8000e78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d03a      	beq.n	8000f18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d019      	beq.n	8000ede <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <HAL_RCC_OscConfig+0x274>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb0:	f7ff fc2e 	bl	8000710 <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eb6:	e008      	b.n	8000eca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eb8:	f7ff fc2a 	bl	8000710 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e160      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eca:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0f0      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f000 fafe 	bl	80014d8 <RCC_Delay>
 8000edc:	e01c      	b.n	8000f18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_RCC_OscConfig+0x274>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee4:	f7ff fc14 	bl	8000710 <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eea:	e00f      	b.n	8000f0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eec:	f7ff fc10 	bl	8000710 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d908      	bls.n	8000f0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e146      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000
 8000f04:	42420000 	.word	0x42420000
 8000f08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f0c:	4b92      	ldr	r3, [pc, #584]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1e9      	bne.n	8000eec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 80a6 	beq.w	8001072 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f2a:	4b8b      	ldr	r3, [pc, #556]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d10d      	bne.n	8000f52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	4b88      	ldr	r3, [pc, #544]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	4a87      	ldr	r2, [pc, #540]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f40:	61d3      	str	r3, [r2, #28]
 8000f42:	4b85      	ldr	r3, [pc, #532]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f52:	4b82      	ldr	r3, [pc, #520]	; (800115c <HAL_RCC_OscConfig+0x4c8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d118      	bne.n	8000f90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f5e:	4b7f      	ldr	r3, [pc, #508]	; (800115c <HAL_RCC_OscConfig+0x4c8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a7e      	ldr	r2, [pc, #504]	; (800115c <HAL_RCC_OscConfig+0x4c8>)
 8000f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f6a:	f7ff fbd1 	bl	8000710 <HAL_GetTick>
 8000f6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f72:	f7ff fbcd 	bl	8000710 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b64      	cmp	r3, #100	; 0x64
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e103      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f84:	4b75      	ldr	r3, [pc, #468]	; (800115c <HAL_RCC_OscConfig+0x4c8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0f0      	beq.n	8000f72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d106      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x312>
 8000f98:	4b6f      	ldr	r3, [pc, #444]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	4a6e      	ldr	r2, [pc, #440]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6213      	str	r3, [r2, #32]
 8000fa4:	e02d      	b.n	8001002 <HAL_RCC_OscConfig+0x36e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x334>
 8000fae:	4b6a      	ldr	r3, [pc, #424]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	4a69      	ldr	r2, [pc, #420]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fb4:	f023 0301 	bic.w	r3, r3, #1
 8000fb8:	6213      	str	r3, [r2, #32]
 8000fba:	4b67      	ldr	r3, [pc, #412]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fbc:	6a1b      	ldr	r3, [r3, #32]
 8000fbe:	4a66      	ldr	r2, [pc, #408]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fc0:	f023 0304 	bic.w	r3, r3, #4
 8000fc4:	6213      	str	r3, [r2, #32]
 8000fc6:	e01c      	b.n	8001002 <HAL_RCC_OscConfig+0x36e>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	2b05      	cmp	r3, #5
 8000fce:	d10c      	bne.n	8000fea <HAL_RCC_OscConfig+0x356>
 8000fd0:	4b61      	ldr	r3, [pc, #388]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	4a60      	ldr	r2, [pc, #384]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	6213      	str	r3, [r2, #32]
 8000fdc:	4b5e      	ldr	r3, [pc, #376]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fde:	6a1b      	ldr	r3, [r3, #32]
 8000fe0:	4a5d      	ldr	r2, [pc, #372]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	6213      	str	r3, [r2, #32]
 8000fe8:	e00b      	b.n	8001002 <HAL_RCC_OscConfig+0x36e>
 8000fea:	4b5b      	ldr	r3, [pc, #364]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	6a1b      	ldr	r3, [r3, #32]
 8000fee:	4a5a      	ldr	r2, [pc, #360]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	f023 0301 	bic.w	r3, r3, #1
 8000ff4:	6213      	str	r3, [r2, #32]
 8000ff6:	4b58      	ldr	r3, [pc, #352]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	4a57      	ldr	r2, [pc, #348]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	f023 0304 	bic.w	r3, r3, #4
 8001000:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d015      	beq.n	8001036 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100a:	f7ff fb81 	bl	8000710 <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001010:	e00a      	b.n	8001028 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001012:	f7ff fb7d 	bl	8000710 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001020:	4293      	cmp	r3, r2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e0b1      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001028:	4b4b      	ldr	r3, [pc, #300]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0ee      	beq.n	8001012 <HAL_RCC_OscConfig+0x37e>
 8001034:	e014      	b.n	8001060 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001036:	f7ff fb6b 	bl	8000710 <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800103c:	e00a      	b.n	8001054 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800103e:	f7ff fb67 	bl	8000710 <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	f241 3288 	movw	r2, #5000	; 0x1388
 800104c:	4293      	cmp	r3, r2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e09b      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001054:	4b40      	ldr	r3, [pc, #256]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1ee      	bne.n	800103e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001060:	7dfb      	ldrb	r3, [r7, #23]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d105      	bne.n	8001072 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001066:	4b3c      	ldr	r3, [pc, #240]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	4a3b      	ldr	r2, [pc, #236]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001070:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 8087 	beq.w	800118a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800107c:	4b36      	ldr	r3, [pc, #216]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 030c 	and.w	r3, r3, #12
 8001084:	2b08      	cmp	r3, #8
 8001086:	d061      	beq.n	800114c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d146      	bne.n	800111e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001090:	4b33      	ldr	r3, [pc, #204]	; (8001160 <HAL_RCC_OscConfig+0x4cc>)
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001096:	f7ff fb3b 	bl	8000710 <HAL_GetTick>
 800109a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800109e:	f7ff fb37 	bl	8000710 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e06d      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010b0:	4b29      	ldr	r3, [pc, #164]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1f0      	bne.n	800109e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c4:	d108      	bne.n	80010d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010c6:	4b24      	ldr	r3, [pc, #144]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	4921      	ldr	r1, [pc, #132]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a19      	ldr	r1, [r3, #32]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e8:	430b      	orrs	r3, r1
 80010ea:	491b      	ldr	r1, [pc, #108]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <HAL_RCC_OscConfig+0x4cc>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f6:	f7ff fb0b 	bl	8000710 <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010fe:	f7ff fb07 	bl	8000710 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e03d      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f0      	beq.n	80010fe <HAL_RCC_OscConfig+0x46a>
 800111c:	e035      	b.n	800118a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <HAL_RCC_OscConfig+0x4cc>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff faf4 	bl	8000710 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800112c:	f7ff faf0 	bl	8000710 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e026      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0x498>
 800114a:	e01e      	b.n	800118a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d107      	bne.n	8001164 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e019      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
 8001158:	40021000 	.word	0x40021000
 800115c:	40007000 	.word	0x40007000
 8001160:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_RCC_OscConfig+0x500>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	429a      	cmp	r2, r3
 8001176:	d106      	bne.n	8001186 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001182:	429a      	cmp	r2, r3
 8001184:	d001      	beq.n	800118a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40021000 	.word	0x40021000

08001198 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e0d0      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011ac:	4b6a      	ldr	r3, [pc, #424]	; (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d910      	bls.n	80011dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ba:	4b67      	ldr	r3, [pc, #412]	; (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 0207 	bic.w	r2, r3, #7
 80011c2:	4965      	ldr	r1, [pc, #404]	; (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ca:	4b63      	ldr	r3, [pc, #396]	; (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d001      	beq.n	80011dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e0b8      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d020      	beq.n	800122a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011f4:	4b59      	ldr	r3, [pc, #356]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	4a58      	ldr	r2, [pc, #352]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 80011fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0308 	and.w	r3, r3, #8
 8001208:	2b00      	cmp	r3, #0
 800120a:	d005      	beq.n	8001218 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800120c:	4b53      	ldr	r3, [pc, #332]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4a52      	ldr	r2, [pc, #328]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001212:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001216:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001218:	4b50      	ldr	r3, [pc, #320]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	494d      	ldr	r1, [pc, #308]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	4313      	orrs	r3, r2
 8001228:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d040      	beq.n	80012b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d107      	bne.n	800124e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123e:	4b47      	ldr	r3, [pc, #284]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d115      	bne.n	8001276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e07f      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b02      	cmp	r3, #2
 8001254:	d107      	bne.n	8001266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001256:	4b41      	ldr	r3, [pc, #260]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d109      	bne.n	8001276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e073      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001266:	4b3d      	ldr	r3, [pc, #244]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e06b      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001276:	4b39      	ldr	r3, [pc, #228]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f023 0203 	bic.w	r2, r3, #3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	4936      	ldr	r1, [pc, #216]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001284:	4313      	orrs	r3, r2
 8001286:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001288:	f7ff fa42 	bl	8000710 <HAL_GetTick>
 800128c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800128e:	e00a      	b.n	80012a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001290:	f7ff fa3e 	bl	8000710 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	f241 3288 	movw	r2, #5000	; 0x1388
 800129e:	4293      	cmp	r3, r2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e053      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a6:	4b2d      	ldr	r3, [pc, #180]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 020c 	and.w	r2, r3, #12
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d1eb      	bne.n	8001290 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012b8:	4b27      	ldr	r3, [pc, #156]	; (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d210      	bcs.n	80012e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c6:	4b24      	ldr	r3, [pc, #144]	; (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 0207 	bic.w	r2, r3, #7
 80012ce:	4922      	ldr	r1, [pc, #136]	; (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012d6:	4b20      	ldr	r3, [pc, #128]	; (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d001      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e032      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d008      	beq.n	8001306 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	4916      	ldr	r1, [pc, #88]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001302:	4313      	orrs	r3, r2
 8001304:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	2b00      	cmp	r3, #0
 8001310:	d009      	beq.n	8001326 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	490e      	ldr	r1, [pc, #56]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	4313      	orrs	r3, r2
 8001324:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001326:	f000 f821 	bl	800136c <HAL_RCC_GetSysClockFreq>
 800132a:	4602      	mov	r2, r0
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	091b      	lsrs	r3, r3, #4
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	490a      	ldr	r1, [pc, #40]	; (8001360 <HAL_RCC_ClockConfig+0x1c8>)
 8001338:	5ccb      	ldrb	r3, [r1, r3]
 800133a:	fa22 f303 	lsr.w	r3, r2, r3
 800133e:	4a09      	ldr	r2, [pc, #36]	; (8001364 <HAL_RCC_ClockConfig+0x1cc>)
 8001340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_RCC_ClockConfig+0x1d0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f8e8 	bl	800051c <HAL_InitTick>

  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40022000 	.word	0x40022000
 800135c:	40021000 	.word	0x40021000
 8001360:	080046ac 	.word	0x080046ac
 8001364:	20000000 	.word	0x20000000
 8001368:	20000004 	.word	0x20000004

0800136c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800136c:	b480      	push	{r7}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001386:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <HAL_RCC_GetSysClockFreq+0x94>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b04      	cmp	r3, #4
 8001394:	d002      	beq.n	800139c <HAL_RCC_GetSysClockFreq+0x30>
 8001396:	2b08      	cmp	r3, #8
 8001398:	d003      	beq.n	80013a2 <HAL_RCC_GetSysClockFreq+0x36>
 800139a:	e027      	b.n	80013ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800139c:	4b19      	ldr	r3, [pc, #100]	; (8001404 <HAL_RCC_GetSysClockFreq+0x98>)
 800139e:	613b      	str	r3, [r7, #16]
      break;
 80013a0:	e027      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	0c9b      	lsrs	r3, r3, #18
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	4a17      	ldr	r2, [pc, #92]	; (8001408 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013ac:	5cd3      	ldrb	r3, [r2, r3]
 80013ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d010      	beq.n	80013dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <HAL_RCC_GetSysClockFreq+0x94>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	0c5b      	lsrs	r3, r3, #17
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	4a11      	ldr	r2, [pc, #68]	; (800140c <HAL_RCC_GetSysClockFreq+0xa0>)
 80013c6:	5cd3      	ldrb	r3, [r2, r3]
 80013c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a0d      	ldr	r2, [pc, #52]	; (8001404 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ce:	fb03 f202 	mul.w	r2, r3, r2
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	e004      	b.n	80013e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <HAL_RCC_GetSysClockFreq+0xa4>)
 80013e0:	fb02 f303 	mul.w	r3, r2, r3
 80013e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	613b      	str	r3, [r7, #16]
      break;
 80013ea:	e002      	b.n	80013f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ee:	613b      	str	r3, [r7, #16]
      break;
 80013f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013f2:	693b      	ldr	r3, [r7, #16]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	371c      	adds	r7, #28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000
 8001404:	007a1200 	.word	0x007a1200
 8001408:	080046c4 	.word	0x080046c4
 800140c:	080046d4 	.word	0x080046d4
 8001410:	003d0900 	.word	0x003d0900

08001414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001418:	4b02      	ldr	r3, [pc, #8]	; (8001424 <HAL_RCC_GetHCLKFreq+0x10>)
 800141a:	681b      	ldr	r3, [r3, #0]
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	20000000 	.word	0x20000000

08001428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800142c:	f7ff fff2 	bl	8001414 <HAL_RCC_GetHCLKFreq>
 8001430:	4602      	mov	r2, r0
 8001432:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	0a1b      	lsrs	r3, r3, #8
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	4903      	ldr	r1, [pc, #12]	; (800144c <HAL_RCC_GetPCLK1Freq+0x24>)
 800143e:	5ccb      	ldrb	r3, [r1, r3]
 8001440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001444:	4618      	mov	r0, r3
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40021000 	.word	0x40021000
 800144c:	080046bc 	.word	0x080046bc

08001450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001454:	f7ff ffde 	bl	8001414 <HAL_RCC_GetHCLKFreq>
 8001458:	4602      	mov	r2, r0
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	0adb      	lsrs	r3, r3, #11
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	4903      	ldr	r1, [pc, #12]	; (8001474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001466:	5ccb      	ldrb	r3, [r1, r3]
 8001468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800146c:	4618      	mov	r0, r3
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40021000 	.word	0x40021000
 8001474:	080046bc 	.word	0x080046bc

08001478 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	220f      	movs	r2, #15
 8001486:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_RCC_GetClockConfig+0x58>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0203 	and.w	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <HAL_RCC_GetClockConfig+0x58>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014a0:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <HAL_RCC_GetClockConfig+0x58>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_RCC_GetClockConfig+0x58>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	08db      	lsrs	r3, r3, #3
 80014b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_RCC_GetClockConfig+0x5c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0207 	and.w	r2, r3, #7
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40022000 	.word	0x40022000

080014d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014e0:	4b0a      	ldr	r3, [pc, #40]	; (800150c <RCC_Delay+0x34>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <RCC_Delay+0x38>)
 80014e6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ea:	0a5b      	lsrs	r3, r3, #9
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014f4:	bf00      	nop
  }
  while (Delay --);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1e5a      	subs	r2, r3, #1
 80014fa:	60fa      	str	r2, [r7, #12]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f9      	bne.n	80014f4 <RCC_Delay+0x1c>
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	20000000 	.word	0x20000000
 8001510:	10624dd3 	.word	0x10624dd3

08001514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e041      	b.n	80015aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d106      	bne.n	8001540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 f839 	bl	80015b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2202      	movs	r2, #2
 8001544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3304      	adds	r3, #4
 8001550:	4619      	mov	r1, r3
 8001552:	4610      	mov	r0, r2
 8001554:	f000 f9b4 	bl	80018c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d001      	beq.n	80015dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e03a      	b.n	8001652 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2202      	movs	r2, #2
 80015e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0201 	orr.w	r2, r2, #1
 80015f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a18      	ldr	r2, [pc, #96]	; (800165c <HAL_TIM_Base_Start_IT+0x98>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d00e      	beq.n	800161c <HAL_TIM_Base_Start_IT+0x58>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001606:	d009      	beq.n	800161c <HAL_TIM_Base_Start_IT+0x58>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <HAL_TIM_Base_Start_IT+0x9c>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d004      	beq.n	800161c <HAL_TIM_Base_Start_IT+0x58>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a13      	ldr	r2, [pc, #76]	; (8001664 <HAL_TIM_Base_Start_IT+0xa0>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d111      	bne.n	8001640 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b06      	cmp	r3, #6
 800162c:	d010      	beq.n	8001650 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f042 0201 	orr.w	r2, r2, #1
 800163c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800163e:	e007      	b.n	8001650 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f042 0201 	orr.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	40012c00 	.word	0x40012c00
 8001660:	40000400 	.word	0x40000400
 8001664:	40000800 	.word	0x40000800

08001668 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b02      	cmp	r3, #2
 800167c:	d122      	bne.n	80016c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b02      	cmp	r3, #2
 800168a:	d11b      	bne.n	80016c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f06f 0202 	mvn.w	r2, #2
 8001694:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f8ed 	bl	800188a <HAL_TIM_IC_CaptureCallback>
 80016b0:	e005      	b.n	80016be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f8e0 	bl	8001878 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 f8ef 	bl	800189c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	d122      	bne.n	8001718 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d11b      	bne.n	8001718 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f06f 0204 	mvn.w	r2, #4
 80016e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2202      	movs	r2, #2
 80016ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f8c3 	bl	800188a <HAL_TIM_IC_CaptureCallback>
 8001704:	e005      	b.n	8001712 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f8b6 	bl	8001878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f8c5 	bl	800189c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b08      	cmp	r3, #8
 8001724:	d122      	bne.n	800176c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	2b08      	cmp	r3, #8
 8001732:	d11b      	bne.n	800176c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f06f 0208 	mvn.w	r2, #8
 800173c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2204      	movs	r2, #4
 8001742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 f899 	bl	800188a <HAL_TIM_IC_CaptureCallback>
 8001758:	e005      	b.n	8001766 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f88c 	bl	8001878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 f89b 	bl	800189c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	2b10      	cmp	r3, #16
 8001778:	d122      	bne.n	80017c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	f003 0310 	and.w	r3, r3, #16
 8001784:	2b10      	cmp	r3, #16
 8001786:	d11b      	bne.n	80017c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f06f 0210 	mvn.w	r2, #16
 8001790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2208      	movs	r2, #8
 8001796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 f86f 	bl	800188a <HAL_TIM_IC_CaptureCallback>
 80017ac:	e005      	b.n	80017ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f862 	bl	8001878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f871 	bl	800189c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d10e      	bne.n	80017ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d107      	bne.n	80017ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f06f 0201 	mvn.w	r2, #1
 80017e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7fe fe1a 	bl	8000420 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f6:	2b80      	cmp	r3, #128	; 0x80
 80017f8:	d10e      	bne.n	8001818 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001804:	2b80      	cmp	r3, #128	; 0x80
 8001806:	d107      	bne.n	8001818 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f8bf 	bl	8001996 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001822:	2b40      	cmp	r3, #64	; 0x40
 8001824:	d10e      	bne.n	8001844 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001830:	2b40      	cmp	r3, #64	; 0x40
 8001832:	d107      	bne.n	8001844 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800183c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f835 	bl	80018ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	f003 0320 	and.w	r3, r3, #32
 800184e:	2b20      	cmp	r3, #32
 8001850:	d10e      	bne.n	8001870 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f003 0320 	and.w	r3, r3, #32
 800185c:	2b20      	cmp	r3, #32
 800185e:	d107      	bne.n	8001870 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f06f 0220 	mvn.w	r2, #32
 8001868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f88a 	bl	8001984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a29      	ldr	r2, [pc, #164]	; (8001978 <TIM_Base_SetConfig+0xb8>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d00b      	beq.n	80018f0 <TIM_Base_SetConfig+0x30>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018de:	d007      	beq.n	80018f0 <TIM_Base_SetConfig+0x30>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a26      	ldr	r2, [pc, #152]	; (800197c <TIM_Base_SetConfig+0xbc>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d003      	beq.n	80018f0 <TIM_Base_SetConfig+0x30>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a25      	ldr	r2, [pc, #148]	; (8001980 <TIM_Base_SetConfig+0xc0>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d108      	bne.n	8001902 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	4313      	orrs	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a1c      	ldr	r2, [pc, #112]	; (8001978 <TIM_Base_SetConfig+0xb8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d00b      	beq.n	8001922 <TIM_Base_SetConfig+0x62>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001910:	d007      	beq.n	8001922 <TIM_Base_SetConfig+0x62>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a19      	ldr	r2, [pc, #100]	; (800197c <TIM_Base_SetConfig+0xbc>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d003      	beq.n	8001922 <TIM_Base_SetConfig+0x62>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a18      	ldr	r2, [pc, #96]	; (8001980 <TIM_Base_SetConfig+0xc0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d108      	bne.n	8001934 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	4313      	orrs	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	4313      	orrs	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a07      	ldr	r2, [pc, #28]	; (8001978 <TIM_Base_SetConfig+0xb8>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d103      	bne.n	8001968 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	615a      	str	r2, [r3, #20]
}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	40012c00 	.word	0x40012c00
 800197c:	40000400 	.word	0x40000400
 8001980:	40000800 	.word	0x40000800

08001984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr

08001996 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e042      	b.n	8001a40 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d106      	bne.n	80019d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7fe fd66 	bl	80004a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2224      	movs	r2, #36	; 0x24
 80019d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f82b 	bl	8001a48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695a      	ldr	r2, [r3, #20]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2220      	movs	r2, #32
 8001a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001a82:	f023 030c 	bic.w	r3, r3, #12
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	68b9      	ldr	r1, [r7, #8]
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	699a      	ldr	r2, [r3, #24]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a2c      	ldr	r2, [pc, #176]	; (8001b5c <UART_SetConfig+0x114>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d103      	bne.n	8001ab8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ab0:	f7ff fcce 	bl	8001450 <HAL_RCC_GetPCLK2Freq>
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	e002      	b.n	8001abe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ab8:	f7ff fcb6 	bl	8001428 <HAL_RCC_GetPCLK1Freq>
 8001abc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	009a      	lsls	r2, r3, #2
 8001ac8:	441a      	add	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad4:	4a22      	ldr	r2, [pc, #136]	; (8001b60 <UART_SetConfig+0x118>)
 8001ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	0119      	lsls	r1, r3, #4
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009a      	lsls	r2, r3, #2
 8001ae8:	441a      	add	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001af4:	4b1a      	ldr	r3, [pc, #104]	; (8001b60 <UART_SetConfig+0x118>)
 8001af6:	fba3 0302 	umull	r0, r3, r3, r2
 8001afa:	095b      	lsrs	r3, r3, #5
 8001afc:	2064      	movs	r0, #100	; 0x64
 8001afe:	fb00 f303 	mul.w	r3, r0, r3
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	3332      	adds	r3, #50	; 0x32
 8001b08:	4a15      	ldr	r2, [pc, #84]	; (8001b60 <UART_SetConfig+0x118>)
 8001b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0e:	095b      	lsrs	r3, r3, #5
 8001b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b14:	4419      	add	r1, r3
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	009a      	lsls	r2, r3, #2
 8001b20:	441a      	add	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <UART_SetConfig+0x118>)
 8001b2e:	fba3 0302 	umull	r0, r3, r3, r2
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	2064      	movs	r0, #100	; 0x64
 8001b36:	fb00 f303 	mul.w	r3, r0, r3
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	3332      	adds	r3, #50	; 0x32
 8001b40:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <UART_SetConfig+0x118>)
 8001b42:	fba2 2303 	umull	r2, r3, r2, r3
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	f003 020f 	and.w	r2, r3, #15
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	440a      	add	r2, r1
 8001b52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001b54:	bf00      	nop
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40013800 	.word	0x40013800
 8001b60:	51eb851f 	.word	0x51eb851f

08001b64 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b6a:	f3ef 8305 	mrs	r3, IPSR
 8001b6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b70:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10f      	bne.n	8001b96 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b76:	f3ef 8310 	mrs	r3, PRIMASK
 8001b7a:	607b      	str	r3, [r7, #4]
  return(result);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d109      	bne.n	8001b96 <osKernelInitialize+0x32>
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <osKernelInitialize+0x60>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d109      	bne.n	8001b9e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001b8a:	f3ef 8311 	mrs	r3, BASEPRI
 8001b8e:	603b      	str	r3, [r7, #0]
  return(result);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001b96:	f06f 0305 	mvn.w	r3, #5
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	e00c      	b.n	8001bb8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <osKernelInitialize+0x60>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d105      	bne.n	8001bb2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <osKernelInitialize+0x60>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	e002      	b.n	8001bb8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	200000d8 	.word	0x200000d8

08001bc8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bce:	f3ef 8305 	mrs	r3, IPSR
 8001bd2:	60bb      	str	r3, [r7, #8]
  return(result);
 8001bd4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10f      	bne.n	8001bfa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bda:	f3ef 8310 	mrs	r3, PRIMASK
 8001bde:	607b      	str	r3, [r7, #4]
  return(result);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <osKernelStart+0x32>
 8001be6:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <osKernelStart+0x64>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d109      	bne.n	8001c02 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001bee:	f3ef 8311 	mrs	r3, BASEPRI
 8001bf2:	603b      	str	r3, [r7, #0]
  return(result);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001bfa:	f06f 0305 	mvn.w	r3, #5
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	e00e      	b.n	8001c20 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <osKernelStart+0x64>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d107      	bne.n	8001c1a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <osKernelStart+0x64>)
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001c10:	f001 f878 	bl	8002d04 <vTaskStartScheduler>
      stat = osOK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	e002      	b.n	8001c20 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001c20:	68fb      	ldr	r3, [r7, #12]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	200000d8 	.word	0x200000d8

08001c30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b092      	sub	sp, #72	; 0x48
 8001c34:	af04      	add	r7, sp, #16
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c40:	f3ef 8305 	mrs	r3, IPSR
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f040 8094 	bne.w	8001d76 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8001c52:	623b      	str	r3, [r7, #32]
  return(result);
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f040 808d 	bne.w	8001d76 <osThreadNew+0x146>
 8001c5c:	4b48      	ldr	r3, [pc, #288]	; (8001d80 <osThreadNew+0x150>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d106      	bne.n	8001c72 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c64:	f3ef 8311 	mrs	r3, BASEPRI
 8001c68:	61fb      	str	r3, [r7, #28]
  return(result);
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f040 8082 	bne.w	8001d76 <osThreadNew+0x146>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d07e      	beq.n	8001d76 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001c7c:	2318      	movs	r3, #24
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001c80:	2300      	movs	r3, #0
 8001c82:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001c84:	f107 031b 	add.w	r3, r7, #27
 8001c88:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d045      	beq.n	8001d22 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <osThreadNew+0x74>
        name = attr->name;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <osThreadNew+0x9a>
 8001cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cba:	2b38      	cmp	r3, #56	; 0x38
 8001cbc:	d805      	bhi.n	8001cca <osThreadNew+0x9a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <osThreadNew+0x9e>
        return (NULL);
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e054      	b.n	8001d78 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00e      	beq.n	8001d04 <osThreadNew+0xd4>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2b5b      	cmp	r3, #91	; 0x5b
 8001cec:	d90a      	bls.n	8001d04 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <osThreadNew+0xd4>
        mem = 1;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d02:	e010      	b.n	8001d26 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10c      	bne.n	8001d26 <osThreadNew+0xf6>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d108      	bne.n	8001d26 <osThreadNew+0xf6>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d104      	bne.n	8001d26 <osThreadNew+0xf6>
          mem = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d20:	e001      	b.n	8001d26 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d110      	bne.n	8001d4e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001d34:	9202      	str	r2, [sp, #8]
 8001d36:	9301      	str	r3, [sp, #4]
 8001d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 fe12 	bl	800296c <xTaskCreateStatic>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	e013      	b.n	8001d76 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d110      	bne.n	8001d76 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	9301      	str	r3, [sp, #4]
 8001d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 fe5c 	bl	8002a24 <xTaskCreate>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d001      	beq.n	8001d76 <osThreadNew+0x146>
          hTask = NULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001d76:	697b      	ldr	r3, [r7, #20]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3738      	adds	r7, #56	; 0x38
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	200000d8 	.word	0x200000d8

08001d84 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d8c:	f3ef 8305 	mrs	r3, IPSR
 8001d90:	613b      	str	r3, [r7, #16]
  return(result);
 8001d92:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10f      	bne.n	8001db8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d98:	f3ef 8310 	mrs	r3, PRIMASK
 8001d9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d109      	bne.n	8001db8 <osDelay+0x34>
 8001da4:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <osDelay+0x58>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d109      	bne.n	8001dc0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001dac:	f3ef 8311 	mrs	r3, BASEPRI
 8001db0:	60bb      	str	r3, [r7, #8]
  return(result);
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <osDelay+0x3c>
    stat = osErrorISR;
 8001db8:	f06f 0305 	mvn.w	r3, #5
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	e007      	b.n	8001dd0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d002      	beq.n	8001dd0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 ff66 	bl	8002c9c <vTaskDelay>
    }
  }

  return (stat);
 8001dd0:	697b      	ldr	r3, [r7, #20]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200000d8 	.word	0x200000d8

08001de0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4a06      	ldr	r2, [pc, #24]	; (8001e08 <vApplicationGetIdleTaskMemory+0x28>)
 8001df0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <vApplicationGetIdleTaskMemory+0x2c>)
 8001df6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2280      	movs	r2, #128	; 0x80
 8001dfc:	601a      	str	r2, [r3, #0]
}
 8001dfe:	bf00      	nop
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr
 8001e08:	200000dc 	.word	0x200000dc
 8001e0c:	20000138 	.word	0x20000138

08001e10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <vApplicationGetTimerTaskMemory+0x2c>)
 8001e20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <vApplicationGetTimerTaskMemory+0x30>)
 8001e26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e2e:	601a      	str	r2, [r3, #0]
}
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	20000338 	.word	0x20000338
 8001e40:	20000394 	.word	0x20000394

08001e44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f103 0208 	add.w	r2, r3, #8
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f103 0208 	add.w	r2, r3, #8
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f103 0208 	add.w	r2, r3, #8
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr

08001e82 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b085      	sub	sp, #20
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	1c5a      	adds	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	601a      	str	r2, [r3, #0]
}
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef6:	d103      	bne.n	8001f00 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	e00c      	b.n	8001f1a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3308      	adds	r3, #8
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	e002      	b.n	8001f0e <vListInsert+0x2e>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d2f6      	bcs.n	8001f08 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	601a      	str	r2, [r3, #0]
}
 8001f46:	bf00      	nop
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6892      	ldr	r2, [r2, #8]
 8001f66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6852      	ldr	r2, [r2, #4]
 8001f70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d103      	bne.n	8001f84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	1e5a      	subs	r2, r3, #1
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
	...

08001fa4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10a      	bne.n	8001fce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fbc:	f383 8811 	msr	BASEPRI, r3
 8001fc0:	f3bf 8f6f 	isb	sy
 8001fc4:	f3bf 8f4f 	dsb	sy
 8001fc8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001fca:	bf00      	nop
 8001fcc:	e7fe      	b.n	8001fcc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001fce:	f001 ffc5 	bl	8003f5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fda:	68f9      	ldr	r1, [r7, #12]
 8001fdc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001fde:	fb01 f303 	mul.w	r3, r1, r3
 8001fe2:	441a      	add	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffe:	3b01      	subs	r3, #1
 8002000:	68f9      	ldr	r1, [r7, #12]
 8002002:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002004:	fb01 f303 	mul.w	r3, r1, r3
 8002008:	441a      	add	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	22ff      	movs	r2, #255	; 0xff
 8002012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	22ff      	movs	r2, #255	; 0xff
 800201a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d114      	bne.n	800204e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d01a      	beq.n	8002062 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	3310      	adds	r3, #16
 8002030:	4618      	mov	r0, r3
 8002032:	f001 f8f1 	bl	8003218 <xTaskRemoveFromEventList>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d012      	beq.n	8002062 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <xQueueGenericReset+0xcc>)
 800203e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	f3bf 8f4f 	dsb	sy
 8002048:	f3bf 8f6f 	isb	sy
 800204c:	e009      	b.n	8002062 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	3310      	adds	r3, #16
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fef6 	bl	8001e44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	3324      	adds	r3, #36	; 0x24
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fef1 	bl	8001e44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002062:	f001 ffab 	bl	8003fbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002066:	2301      	movs	r3, #1
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	e000ed04 	.word	0xe000ed04

08002074 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08e      	sub	sp, #56	; 0x38
 8002078:	af02      	add	r7, sp, #8
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
 8002080:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10a      	bne.n	800209e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800208c:	f383 8811 	msr	BASEPRI, r3
 8002090:	f3bf 8f6f 	isb	sy
 8002094:	f3bf 8f4f 	dsb	sy
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800209a:	bf00      	nop
 800209c:	e7fe      	b.n	800209c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10a      	bne.n	80020ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80020a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a8:	f383 8811 	msr	BASEPRI, r3
 80020ac:	f3bf 8f6f 	isb	sy
 80020b0:	f3bf 8f4f 	dsb	sy
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80020b6:	bf00      	nop
 80020b8:	e7fe      	b.n	80020b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <xQueueGenericCreateStatic+0x52>
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <xQueueGenericCreateStatic+0x56>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <xQueueGenericCreateStatic+0x58>
 80020ca:	2300      	movs	r3, #0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10a      	bne.n	80020e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80020d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d4:	f383 8811 	msr	BASEPRI, r3
 80020d8:	f3bf 8f6f 	isb	sy
 80020dc:	f3bf 8f4f 	dsb	sy
 80020e0:	623b      	str	r3, [r7, #32]
}
 80020e2:	bf00      	nop
 80020e4:	e7fe      	b.n	80020e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <xQueueGenericCreateStatic+0x7e>
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <xQueueGenericCreateStatic+0x82>
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <xQueueGenericCreateStatic+0x84>
 80020f6:	2300      	movs	r3, #0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10a      	bne.n	8002112 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80020fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002100:	f383 8811 	msr	BASEPRI, r3
 8002104:	f3bf 8f6f 	isb	sy
 8002108:	f3bf 8f4f 	dsb	sy
 800210c:	61fb      	str	r3, [r7, #28]
}
 800210e:	bf00      	nop
 8002110:	e7fe      	b.n	8002110 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002112:	2350      	movs	r3, #80	; 0x50
 8002114:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2b50      	cmp	r3, #80	; 0x50
 800211a:	d00a      	beq.n	8002132 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800211c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002120:	f383 8811 	msr	BASEPRI, r3
 8002124:	f3bf 8f6f 	isb	sy
 8002128:	f3bf 8f4f 	dsb	sy
 800212c:	61bb      	str	r3, [r7, #24]
}
 800212e:	bf00      	nop
 8002130:	e7fe      	b.n	8002130 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00d      	beq.n	8002158 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800213c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002144:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	4613      	mov	r3, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 f805 	bl	8002162 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800215a:	4618      	mov	r0, r3
 800215c:	3730      	adds	r7, #48	; 0x30
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	60f8      	str	r0, [r7, #12]
 800216a:	60b9      	str	r1, [r7, #8]
 800216c:	607a      	str	r2, [r7, #4]
 800216e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d103      	bne.n	800217e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	e002      	b.n	8002184 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002190:	2101      	movs	r1, #1
 8002192:	69b8      	ldr	r0, [r7, #24]
 8002194:	f7ff ff06 	bl	8001fa4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	78fa      	ldrb	r2, [r7, #3]
 800219c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80021a0:	bf00      	nop
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08e      	sub	sp, #56	; 0x38
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80021b6:	2300      	movs	r3, #0
 80021b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80021be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10a      	bne.n	80021da <xQueueGenericSend+0x32>
	__asm volatile
 80021c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c8:	f383 8811 	msr	BASEPRI, r3
 80021cc:	f3bf 8f6f 	isb	sy
 80021d0:	f3bf 8f4f 	dsb	sy
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80021d6:	bf00      	nop
 80021d8:	e7fe      	b.n	80021d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d103      	bne.n	80021e8 <xQueueGenericSend+0x40>
 80021e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <xQueueGenericSend+0x44>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <xQueueGenericSend+0x46>
 80021ec:	2300      	movs	r3, #0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10a      	bne.n	8002208 <xQueueGenericSend+0x60>
	__asm volatile
 80021f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f6:	f383 8811 	msr	BASEPRI, r3
 80021fa:	f3bf 8f6f 	isb	sy
 80021fe:	f3bf 8f4f 	dsb	sy
 8002202:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002204:	bf00      	nop
 8002206:	e7fe      	b.n	8002206 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d103      	bne.n	8002216 <xQueueGenericSend+0x6e>
 800220e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <xQueueGenericSend+0x72>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <xQueueGenericSend+0x74>
 800221a:	2300      	movs	r3, #0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10a      	bne.n	8002236 <xQueueGenericSend+0x8e>
	__asm volatile
 8002220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002224:	f383 8811 	msr	BASEPRI, r3
 8002228:	f3bf 8f6f 	isb	sy
 800222c:	f3bf 8f4f 	dsb	sy
 8002230:	623b      	str	r3, [r7, #32]
}
 8002232:	bf00      	nop
 8002234:	e7fe      	b.n	8002234 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002236:	f001 f9b1 	bl	800359c <xTaskGetSchedulerState>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d102      	bne.n	8002246 <xQueueGenericSend+0x9e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <xQueueGenericSend+0xa2>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <xQueueGenericSend+0xa4>
 800224a:	2300      	movs	r3, #0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10a      	bne.n	8002266 <xQueueGenericSend+0xbe>
	__asm volatile
 8002250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002254:	f383 8811 	msr	BASEPRI, r3
 8002258:	f3bf 8f6f 	isb	sy
 800225c:	f3bf 8f4f 	dsb	sy
 8002260:	61fb      	str	r3, [r7, #28]
}
 8002262:	bf00      	nop
 8002264:	e7fe      	b.n	8002264 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002266:	f001 fe79 	bl	8003f5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800226e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002272:	429a      	cmp	r2, r3
 8002274:	d302      	bcc.n	800227c <xQueueGenericSend+0xd4>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d129      	bne.n	80022d0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	68b9      	ldr	r1, [r7, #8]
 8002280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002282:	f000 fa07 	bl	8002694 <prvCopyDataToQueue>
 8002286:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	2b00      	cmp	r3, #0
 800228e:	d010      	beq.n	80022b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002292:	3324      	adds	r3, #36	; 0x24
 8002294:	4618      	mov	r0, r3
 8002296:	f000 ffbf 	bl	8003218 <xTaskRemoveFromEventList>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d013      	beq.n	80022c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80022a0:	4b3f      	ldr	r3, [pc, #252]	; (80023a0 <xQueueGenericSend+0x1f8>)
 80022a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	f3bf 8f4f 	dsb	sy
 80022ac:	f3bf 8f6f 	isb	sy
 80022b0:	e00a      	b.n	80022c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80022b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d007      	beq.n	80022c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80022b8:	4b39      	ldr	r3, [pc, #228]	; (80023a0 <xQueueGenericSend+0x1f8>)
 80022ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	f3bf 8f4f 	dsb	sy
 80022c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80022c8:	f001 fe78 	bl	8003fbc <vPortExitCritical>
				return pdPASS;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e063      	b.n	8002398 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d103      	bne.n	80022de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80022d6:	f001 fe71 	bl	8003fbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	e05c      	b.n	8002398 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80022de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d106      	bne.n	80022f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 fff9 	bl	80032e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80022ee:	2301      	movs	r3, #1
 80022f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80022f2:	f001 fe63 	bl	8003fbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80022f6:	f000 fd6b 	bl	8002dd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80022fa:	f001 fe2f 	bl	8003f5c <vPortEnterCritical>
 80022fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002300:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002304:	b25b      	sxtb	r3, r3
 8002306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230a:	d103      	bne.n	8002314 <xQueueGenericSend+0x16c>
 800230c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002316:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800231a:	b25b      	sxtb	r3, r3
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002320:	d103      	bne.n	800232a <xQueueGenericSend+0x182>
 8002322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800232a:	f001 fe47 	bl	8003fbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800232e:	1d3a      	adds	r2, r7, #4
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	4611      	mov	r1, r2
 8002336:	4618      	mov	r0, r3
 8002338:	f000 ffe8 	bl	800330c <xTaskCheckForTimeOut>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d124      	bne.n	800238c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002342:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002344:	f000 fa9e 	bl	8002884 <prvIsQueueFull>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d018      	beq.n	8002380 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800234e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002350:	3310      	adds	r3, #16
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	4611      	mov	r1, r2
 8002356:	4618      	mov	r0, r3
 8002358:	f000 ff0e 	bl	8003178 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800235c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800235e:	f000 fa29 	bl	80027b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002362:	f000 fd43 	bl	8002dec <xTaskResumeAll>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	f47f af7c 	bne.w	8002266 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800236e:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <xQueueGenericSend+0x1f8>)
 8002370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	f3bf 8f4f 	dsb	sy
 800237a:	f3bf 8f6f 	isb	sy
 800237e:	e772      	b.n	8002266 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002382:	f000 fa17 	bl	80027b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002386:	f000 fd31 	bl	8002dec <xTaskResumeAll>
 800238a:	e76c      	b.n	8002266 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800238c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800238e:	f000 fa11 	bl	80027b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002392:	f000 fd2b 	bl	8002dec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002396:	2300      	movs	r3, #0
		}
	}
}
 8002398:	4618      	mov	r0, r3
 800239a:	3738      	adds	r7, #56	; 0x38
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	e000ed04 	.word	0xe000ed04

080023a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08e      	sub	sp, #56	; 0x38
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80023b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10a      	bne.n	80023d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80023bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c0:	f383 8811 	msr	BASEPRI, r3
 80023c4:	f3bf 8f6f 	isb	sy
 80023c8:	f3bf 8f4f 	dsb	sy
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80023ce:	bf00      	nop
 80023d0:	e7fe      	b.n	80023d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d103      	bne.n	80023e0 <xQueueGenericSendFromISR+0x3c>
 80023d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <xQueueGenericSendFromISR+0x40>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <xQueueGenericSendFromISR+0x42>
 80023e4:	2300      	movs	r3, #0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10a      	bne.n	8002400 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80023ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ee:	f383 8811 	msr	BASEPRI, r3
 80023f2:	f3bf 8f6f 	isb	sy
 80023f6:	f3bf 8f4f 	dsb	sy
 80023fa:	623b      	str	r3, [r7, #32]
}
 80023fc:	bf00      	nop
 80023fe:	e7fe      	b.n	80023fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d103      	bne.n	800240e <xQueueGenericSendFromISR+0x6a>
 8002406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <xQueueGenericSendFromISR+0x6e>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <xQueueGenericSendFromISR+0x70>
 8002412:	2300      	movs	r3, #0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10a      	bne.n	800242e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241c:	f383 8811 	msr	BASEPRI, r3
 8002420:	f3bf 8f6f 	isb	sy
 8002424:	f3bf 8f4f 	dsb	sy
 8002428:	61fb      	str	r3, [r7, #28]
}
 800242a:	bf00      	nop
 800242c:	e7fe      	b.n	800242c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800242e:	f001 fe57 	bl	80040e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002432:	f3ef 8211 	mrs	r2, BASEPRI
 8002436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243a:	f383 8811 	msr	BASEPRI, r3
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f3bf 8f4f 	dsb	sy
 8002446:	61ba      	str	r2, [r7, #24]
 8002448:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800244a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002456:	429a      	cmp	r2, r3
 8002458:	d302      	bcc.n	8002460 <xQueueGenericSendFromISR+0xbc>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d12c      	bne.n	80024ba <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002462:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002470:	f000 f910 	bl	8002694 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002474:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247c:	d112      	bne.n	80024a4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800247e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	2b00      	cmp	r3, #0
 8002484:	d016      	beq.n	80024b4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002488:	3324      	adds	r3, #36	; 0x24
 800248a:	4618      	mov	r0, r3
 800248c:	f000 fec4 	bl	8003218 <xTaskRemoveFromEventList>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00e      	beq.n	80024b4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00b      	beq.n	80024b4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	e007      	b.n	80024b4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80024a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80024a8:	3301      	adds	r3, #1
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	b25a      	sxtb	r2, r3
 80024ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80024b4:	2301      	movs	r3, #1
 80024b6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80024b8:	e001      	b.n	80024be <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	637b      	str	r3, [r7, #52]	; 0x34
 80024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80024c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80024ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3738      	adds	r7, #56	; 0x38
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08c      	sub	sp, #48	; 0x30
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80024e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10a      	bne.n	8002504 <xQueueReceive+0x30>
	__asm volatile
 80024ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f2:	f383 8811 	msr	BASEPRI, r3
 80024f6:	f3bf 8f6f 	isb	sy
 80024fa:	f3bf 8f4f 	dsb	sy
 80024fe:	623b      	str	r3, [r7, #32]
}
 8002500:	bf00      	nop
 8002502:	e7fe      	b.n	8002502 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d103      	bne.n	8002512 <xQueueReceive+0x3e>
 800250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <xQueueReceive+0x42>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <xQueueReceive+0x44>
 8002516:	2300      	movs	r3, #0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10a      	bne.n	8002532 <xQueueReceive+0x5e>
	__asm volatile
 800251c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002520:	f383 8811 	msr	BASEPRI, r3
 8002524:	f3bf 8f6f 	isb	sy
 8002528:	f3bf 8f4f 	dsb	sy
 800252c:	61fb      	str	r3, [r7, #28]
}
 800252e:	bf00      	nop
 8002530:	e7fe      	b.n	8002530 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002532:	f001 f833 	bl	800359c <xTaskGetSchedulerState>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d102      	bne.n	8002542 <xQueueReceive+0x6e>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <xQueueReceive+0x72>
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <xQueueReceive+0x74>
 8002546:	2300      	movs	r3, #0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10a      	bne.n	8002562 <xQueueReceive+0x8e>
	__asm volatile
 800254c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002550:	f383 8811 	msr	BASEPRI, r3
 8002554:	f3bf 8f6f 	isb	sy
 8002558:	f3bf 8f4f 	dsb	sy
 800255c:	61bb      	str	r3, [r7, #24]
}
 800255e:	bf00      	nop
 8002560:	e7fe      	b.n	8002560 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002562:	f001 fcfb 	bl	8003f5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	2b00      	cmp	r3, #0
 8002570:	d01f      	beq.n	80025b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002572:	68b9      	ldr	r1, [r7, #8]
 8002574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002576:	f000 f8f7 	bl	8002768 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	1e5a      	subs	r2, r3, #1
 800257e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002580:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00f      	beq.n	80025aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800258a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258c:	3310      	adds	r3, #16
 800258e:	4618      	mov	r0, r3
 8002590:	f000 fe42 	bl	8003218 <xTaskRemoveFromEventList>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800259a:	4b3d      	ldr	r3, [pc, #244]	; (8002690 <xQueueReceive+0x1bc>)
 800259c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	f3bf 8f4f 	dsb	sy
 80025a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80025aa:	f001 fd07 	bl	8003fbc <vPortExitCritical>
				return pdPASS;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e069      	b.n	8002686 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d103      	bne.n	80025c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80025b8:	f001 fd00 	bl	8003fbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80025bc:	2300      	movs	r3, #0
 80025be:	e062      	b.n	8002686 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d106      	bne.n	80025d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025c6:	f107 0310 	add.w	r3, r7, #16
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 fe88 	bl	80032e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025d0:	2301      	movs	r3, #1
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025d4:	f001 fcf2 	bl	8003fbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025d8:	f000 fbfa 	bl	8002dd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025dc:	f001 fcbe 	bl	8003f5c <vPortEnterCritical>
 80025e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025e6:	b25b      	sxtb	r3, r3
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d103      	bne.n	80025f6 <xQueueReceive+0x122>
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025fc:	b25b      	sxtb	r3, r3
 80025fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002602:	d103      	bne.n	800260c <xQueueReceive+0x138>
 8002604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800260c:	f001 fcd6 	bl	8003fbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002610:	1d3a      	adds	r2, r7, #4
 8002612:	f107 0310 	add.w	r3, r7, #16
 8002616:	4611      	mov	r1, r2
 8002618:	4618      	mov	r0, r3
 800261a:	f000 fe77 	bl	800330c <xTaskCheckForTimeOut>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d123      	bne.n	800266c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002626:	f000 f917 	bl	8002858 <prvIsQueueEmpty>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d017      	beq.n	8002660 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002632:	3324      	adds	r3, #36	; 0x24
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f000 fd9d 	bl	8003178 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800263e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002640:	f000 f8b8 	bl	80027b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002644:	f000 fbd2 	bl	8002dec <xTaskResumeAll>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d189      	bne.n	8002562 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <xQueueReceive+0x1bc>)
 8002650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	f3bf 8f4f 	dsb	sy
 800265a:	f3bf 8f6f 	isb	sy
 800265e:	e780      	b.n	8002562 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002662:	f000 f8a7 	bl	80027b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002666:	f000 fbc1 	bl	8002dec <xTaskResumeAll>
 800266a:	e77a      	b.n	8002562 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800266c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800266e:	f000 f8a1 	bl	80027b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002672:	f000 fbbb 	bl	8002dec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002678:	f000 f8ee 	bl	8002858 <prvIsQueueEmpty>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	f43f af6f 	beq.w	8002562 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002684:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002686:	4618      	mov	r0, r3
 8002688:	3730      	adds	r7, #48	; 0x30
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	e000ed04 	.word	0xe000ed04

08002694 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10d      	bne.n	80026ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d14d      	bne.n	8002756 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 ff8a 	bl	80035d8 <xTaskPriorityDisinherit>
 80026c4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	e043      	b.n	8002756 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d119      	bne.n	8002708 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6898      	ldr	r0, [r3, #8]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	461a      	mov	r2, r3
 80026de:	68b9      	ldr	r1, [r7, #8]
 80026e0:	f001 ff40 	bl	8004564 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	441a      	add	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d32b      	bcc.n	8002756 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	609a      	str	r2, [r3, #8]
 8002706:	e026      	b.n	8002756 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	68d8      	ldr	r0, [r3, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	461a      	mov	r2, r3
 8002712:	68b9      	ldr	r1, [r7, #8]
 8002714:	f001 ff26 	bl	8004564 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	425b      	negs	r3, r3
 8002722:	441a      	add	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d207      	bcs.n	8002744 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	425b      	negs	r3, r3
 800273e:	441a      	add	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d105      	bne.n	8002756 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	3b01      	subs	r3, #1
 8002754:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800275e:	697b      	ldr	r3, [r7, #20]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d018      	beq.n	80027ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	441a      	add	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	429a      	cmp	r2, r3
 8002792:	d303      	bcc.n	800279c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68d9      	ldr	r1, [r3, #12]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	461a      	mov	r2, r3
 80027a6:	6838      	ldr	r0, [r7, #0]
 80027a8:	f001 fedc 	bl	8004564 <memcpy>
	}
}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80027bc:	f001 fbce 	bl	8003f5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027c8:	e011      	b.n	80027ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d012      	beq.n	80027f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3324      	adds	r3, #36	; 0x24
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 fd1e 	bl	8003218 <xTaskRemoveFromEventList>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80027e2:	f000 fdf5 	bl	80033d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	dce9      	bgt.n	80027ca <prvUnlockQueue+0x16>
 80027f6:	e000      	b.n	80027fa <prvUnlockQueue+0x46>
					break;
 80027f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	22ff      	movs	r2, #255	; 0xff
 80027fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002802:	f001 fbdb 	bl	8003fbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002806:	f001 fba9 	bl	8003f5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002810:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002812:	e011      	b.n	8002838 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d012      	beq.n	8002842 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3310      	adds	r3, #16
 8002820:	4618      	mov	r0, r3
 8002822:	f000 fcf9 	bl	8003218 <xTaskRemoveFromEventList>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800282c:	f000 fdd0 	bl	80033d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002830:	7bbb      	ldrb	r3, [r7, #14]
 8002832:	3b01      	subs	r3, #1
 8002834:	b2db      	uxtb	r3, r3
 8002836:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002838:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800283c:	2b00      	cmp	r3, #0
 800283e:	dce9      	bgt.n	8002814 <prvUnlockQueue+0x60>
 8002840:	e000      	b.n	8002844 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002842:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	22ff      	movs	r2, #255	; 0xff
 8002848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800284c:	f001 fbb6 	bl	8003fbc <vPortExitCritical>
}
 8002850:	bf00      	nop
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002860:	f001 fb7c 	bl	8003f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002868:	2b00      	cmp	r3, #0
 800286a:	d102      	bne.n	8002872 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800286c:	2301      	movs	r3, #1
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	e001      	b.n	8002876 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002876:	f001 fba1 	bl	8003fbc <vPortExitCritical>

	return xReturn;
 800287a:	68fb      	ldr	r3, [r7, #12]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800288c:	f001 fb66 	bl	8003f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002898:	429a      	cmp	r2, r3
 800289a:	d102      	bne.n	80028a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800289c:	2301      	movs	r3, #1
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	e001      	b.n	80028a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80028a2:	2300      	movs	r3, #0
 80028a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80028a6:	f001 fb89 	bl	8003fbc <vPortExitCritical>

	return xReturn;
 80028aa:	68fb      	ldr	r3, [r7, #12]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	e014      	b.n	80028ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80028c4:	4a0e      	ldr	r2, [pc, #56]	; (8002900 <vQueueAddToRegistry+0x4c>)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10b      	bne.n	80028e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80028d0:	490b      	ldr	r1, [pc, #44]	; (8002900 <vQueueAddToRegistry+0x4c>)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80028da:	4a09      	ldr	r2, [pc, #36]	; (8002900 <vQueueAddToRegistry+0x4c>)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	4413      	add	r3, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80028e6:	e006      	b.n	80028f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	3301      	adds	r3, #1
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b07      	cmp	r3, #7
 80028f2:	d9e7      	bls.n	80028c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr
 8002900:	20000794 	.word	0x20000794

08002904 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002914:	f001 fb22 	bl	8003f5c <vPortEnterCritical>
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800291e:	b25b      	sxtb	r3, r3
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002924:	d103      	bne.n	800292e <vQueueWaitForMessageRestricted+0x2a>
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002934:	b25b      	sxtb	r3, r3
 8002936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293a:	d103      	bne.n	8002944 <vQueueWaitForMessageRestricted+0x40>
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002944:	f001 fb3a 	bl	8003fbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294c:	2b00      	cmp	r3, #0
 800294e:	d106      	bne.n	800295e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	3324      	adds	r3, #36	; 0x24
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	68b9      	ldr	r1, [r7, #8]
 8002958:	4618      	mov	r0, r3
 800295a:	f000 fc31 	bl	80031c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800295e:	6978      	ldr	r0, [r7, #20]
 8002960:	f7ff ff28 	bl	80027b4 <prvUnlockQueue>
	}
 8002964:	bf00      	nop
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08e      	sub	sp, #56	; 0x38
 8002970:	af04      	add	r7, sp, #16
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800297a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10a      	bne.n	8002996 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002984:	f383 8811 	msr	BASEPRI, r3
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	623b      	str	r3, [r7, #32]
}
 8002992:	bf00      	nop
 8002994:	e7fe      	b.n	8002994 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800299c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a0:	f383 8811 	msr	BASEPRI, r3
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	f3bf 8f4f 	dsb	sy
 80029ac:	61fb      	str	r3, [r7, #28]
}
 80029ae:	bf00      	nop
 80029b0:	e7fe      	b.n	80029b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80029b2:	235c      	movs	r3, #92	; 0x5c
 80029b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	2b5c      	cmp	r3, #92	; 0x5c
 80029ba:	d00a      	beq.n	80029d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80029bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	61bb      	str	r3, [r7, #24]
}
 80029ce:	bf00      	nop
 80029d0:	e7fe      	b.n	80029d0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80029d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01e      	beq.n	8002a16 <xTaskCreateStatic+0xaa>
 80029d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d01b      	beq.n	8002a16 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80029f0:	2300      	movs	r3, #0
 80029f2:	9303      	str	r3, [sp, #12]
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	9302      	str	r3, [sp, #8]
 80029f8:	f107 0314 	add.w	r3, r7, #20
 80029fc:	9301      	str	r3, [sp, #4]
 80029fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f850 	bl	8002aae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a10:	f000 f8d4 	bl	8002bbc <prvAddNewTaskToReadyList>
 8002a14:	e001      	b.n	8002a1a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002a1a:	697b      	ldr	r3, [r7, #20]
	}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3728      	adds	r7, #40	; 0x28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08c      	sub	sp, #48	; 0x30
 8002a28:	af04      	add	r7, sp, #16
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	4613      	mov	r3, r2
 8002a32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a34:	88fb      	ldrh	r3, [r7, #6]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f001 fb8f 	bl	800415c <pvPortMalloc>
 8002a3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00e      	beq.n	8002a64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002a46:	205c      	movs	r0, #92	; 0x5c
 8002a48:	f001 fb88 	bl	800415c <pvPortMalloc>
 8002a4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	631a      	str	r2, [r3, #48]	; 0x30
 8002a5a:	e005      	b.n	8002a68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a5c:	6978      	ldr	r0, [r7, #20]
 8002a5e:	f001 fc41 	bl	80042e4 <vPortFree>
 8002a62:	e001      	b.n	8002a68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d017      	beq.n	8002a9e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a76:	88fa      	ldrh	r2, [r7, #6]
 8002a78:	2300      	movs	r3, #0
 8002a7a:	9303      	str	r3, [sp, #12]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	9302      	str	r3, [sp, #8]
 8002a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a82:	9301      	str	r3, [sp, #4]
 8002a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 f80e 	bl	8002aae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a92:	69f8      	ldr	r0, [r7, #28]
 8002a94:	f000 f892 	bl	8002bbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	61bb      	str	r3, [r7, #24]
 8002a9c:	e002      	b.n	8002aa4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002aa4:	69bb      	ldr	r3, [r7, #24]
	}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3720      	adds	r7, #32
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b088      	sub	sp, #32
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	60f8      	str	r0, [r7, #12]
 8002ab6:	60b9      	str	r1, [r7, #8]
 8002ab8:	607a      	str	r2, [r7, #4]
 8002aba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	21a5      	movs	r1, #165	; 0xa5
 8002ac8:	f001 fd20 	bl	800450c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	f023 0307 	bic.w	r3, r3, #7
 8002ae4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	617b      	str	r3, [r7, #20]
}
 8002b02:	bf00      	nop
 8002b04:	e7fe      	b.n	8002b04 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
 8002b0a:	e012      	b.n	8002b32 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	4413      	add	r3, r2
 8002b12:	7819      	ldrb	r1, [r3, #0]
 8002b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	4413      	add	r3, r2
 8002b1a:	3334      	adds	r3, #52	; 0x34
 8002b1c:	460a      	mov	r2, r1
 8002b1e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	4413      	add	r3, r2
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d006      	beq.n	8002b3a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	2b0f      	cmp	r3, #15
 8002b36:	d9e9      	bls.n	8002b0c <prvInitialiseNewTask+0x5e>
 8002b38:	e000      	b.n	8002b3c <prvInitialiseNewTask+0x8e>
		{
			break;
 8002b3a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b46:	2b37      	cmp	r3, #55	; 0x37
 8002b48:	d901      	bls.n	8002b4e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b4a:	2337      	movs	r3, #55	; 0x37
 8002b4c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b52:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b58:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	3304      	adds	r3, #4
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff f98c 	bl	8001e82 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	3318      	adds	r3, #24
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff f987 	bl	8001e82 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b78:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b82:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	68f9      	ldr	r1, [r7, #12]
 8002b9c:	69b8      	ldr	r0, [r7, #24]
 8002b9e:	f001 f8ef 	bl	8003d80 <pxPortInitialiseStack>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bb2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bb4:	bf00      	nop
 8002bb6:	3720      	adds	r7, #32
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002bc4:	f001 f9ca 	bl	8003f5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	; (8002c80 <prvAddNewTaskToReadyList+0xc4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	4a2c      	ldr	r2, [pc, #176]	; (8002c80 <prvAddNewTaskToReadyList+0xc4>)
 8002bd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002bd2:	4b2c      	ldr	r3, [pc, #176]	; (8002c84 <prvAddNewTaskToReadyList+0xc8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002bda:	4a2a      	ldr	r2, [pc, #168]	; (8002c84 <prvAddNewTaskToReadyList+0xc8>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002be0:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <prvAddNewTaskToReadyList+0xc4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d110      	bne.n	8002c0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002be8:	f000 fc16 	bl	8003418 <prvInitialiseTaskLists>
 8002bec:	e00d      	b.n	8002c0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002bee:	4b26      	ldr	r3, [pc, #152]	; (8002c88 <prvAddNewTaskToReadyList+0xcc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bf6:	4b23      	ldr	r3, [pc, #140]	; (8002c84 <prvAddNewTaskToReadyList+0xc8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d802      	bhi.n	8002c0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c04:	4a1f      	ldr	r2, [pc, #124]	; (8002c84 <prvAddNewTaskToReadyList+0xc8>)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c0a:	4b20      	ldr	r3, [pc, #128]	; (8002c8c <prvAddNewTaskToReadyList+0xd0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	4a1e      	ldr	r2, [pc, #120]	; (8002c8c <prvAddNewTaskToReadyList+0xd0>)
 8002c12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c14:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <prvAddNewTaskToReadyList+0xd0>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c20:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <prvAddNewTaskToReadyList+0xd4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d903      	bls.n	8002c30 <prvAddNewTaskToReadyList+0x74>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	4a18      	ldr	r2, [pc, #96]	; (8002c90 <prvAddNewTaskToReadyList+0xd4>)
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4a15      	ldr	r2, [pc, #84]	; (8002c94 <prvAddNewTaskToReadyList+0xd8>)
 8002c3e:	441a      	add	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3304      	adds	r3, #4
 8002c44:	4619      	mov	r1, r3
 8002c46:	4610      	mov	r0, r2
 8002c48:	f7ff f927 	bl	8001e9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c4c:	f001 f9b6 	bl	8003fbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c50:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <prvAddNewTaskToReadyList+0xcc>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00e      	beq.n	8002c76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c58:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <prvAddNewTaskToReadyList+0xc8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d207      	bcs.n	8002c76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c66:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <prvAddNewTaskToReadyList+0xdc>)
 8002c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	f3bf 8f4f 	dsb	sy
 8002c72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000ca8 	.word	0x20000ca8
 8002c84:	200007d4 	.word	0x200007d4
 8002c88:	20000cb4 	.word	0x20000cb4
 8002c8c:	20000cc4 	.word	0x20000cc4
 8002c90:	20000cb0 	.word	0x20000cb0
 8002c94:	200007d8 	.word	0x200007d8
 8002c98:	e000ed04 	.word	0xe000ed04

08002c9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d017      	beq.n	8002cde <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002cae:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <vTaskDelay+0x60>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <vTaskDelay+0x30>
	__asm volatile
 8002cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	60bb      	str	r3, [r7, #8]
}
 8002cc8:	bf00      	nop
 8002cca:	e7fe      	b.n	8002cca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002ccc:	f000 f880 	bl	8002dd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 fcee 	bl	80036b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002cd8:	f000 f888 	bl	8002dec <xTaskResumeAll>
 8002cdc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d107      	bne.n	8002cf4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <vTaskDelay+0x64>)
 8002ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002cf4:	bf00      	nop
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20000cd0 	.word	0x20000cd0
 8002d00:	e000ed04 	.word	0xe000ed04

08002d04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	; 0x28
 8002d08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002d12:	463a      	mov	r2, r7
 8002d14:	1d39      	adds	r1, r7, #4
 8002d16:	f107 0308 	add.w	r3, r7, #8
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff f860 	bl	8001de0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002d20:	6839      	ldr	r1, [r7, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	9202      	str	r2, [sp, #8]
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	460a      	mov	r2, r1
 8002d32:	4921      	ldr	r1, [pc, #132]	; (8002db8 <vTaskStartScheduler+0xb4>)
 8002d34:	4821      	ldr	r0, [pc, #132]	; (8002dbc <vTaskStartScheduler+0xb8>)
 8002d36:	f7ff fe19 	bl	800296c <xTaskCreateStatic>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4a20      	ldr	r2, [pc, #128]	; (8002dc0 <vTaskStartScheduler+0xbc>)
 8002d3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d40:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <vTaskStartScheduler+0xbc>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	e001      	b.n	8002d52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d102      	bne.n	8002d5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002d58:	f000 fd00 	bl	800375c <xTimerCreateTimerTask>
 8002d5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d116      	bne.n	8002d92 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	613b      	str	r3, [r7, #16]
}
 8002d76:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <vTaskStartScheduler+0xc0>)
 8002d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d7e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d80:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <vTaskStartScheduler+0xc4>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002d86:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <vTaskStartScheduler+0xc8>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d8c:	f001 f874 	bl	8003e78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d90:	e00e      	b.n	8002db0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d98:	d10a      	bne.n	8002db0 <vTaskStartScheduler+0xac>
	__asm volatile
 8002d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9e:	f383 8811 	msr	BASEPRI, r3
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	60fb      	str	r3, [r7, #12]
}
 8002dac:	bf00      	nop
 8002dae:	e7fe      	b.n	8002dae <vTaskStartScheduler+0xaa>
}
 8002db0:	bf00      	nop
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	080045e0 	.word	0x080045e0
 8002dbc:	080033e9 	.word	0x080033e9
 8002dc0:	20000ccc 	.word	0x20000ccc
 8002dc4:	20000cc8 	.word	0x20000cc8
 8002dc8:	20000cb4 	.word	0x20000cb4
 8002dcc:	20000cac 	.word	0x20000cac

08002dd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002dd4:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <vTaskSuspendAll+0x18>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	4a03      	ldr	r2, [pc, #12]	; (8002de8 <vTaskSuspendAll+0x18>)
 8002ddc:	6013      	str	r3, [r2, #0]
}
 8002dde:	bf00      	nop
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20000cd0 	.word	0x20000cd0

08002dec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002df6:	2300      	movs	r3, #0
 8002df8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002dfa:	4b42      	ldr	r3, [pc, #264]	; (8002f04 <xTaskResumeAll+0x118>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10a      	bne.n	8002e18 <xTaskResumeAll+0x2c>
	__asm volatile
 8002e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e06:	f383 8811 	msr	BASEPRI, r3
 8002e0a:	f3bf 8f6f 	isb	sy
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	603b      	str	r3, [r7, #0]
}
 8002e14:	bf00      	nop
 8002e16:	e7fe      	b.n	8002e16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e18:	f001 f8a0 	bl	8003f5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e1c:	4b39      	ldr	r3, [pc, #228]	; (8002f04 <xTaskResumeAll+0x118>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3b01      	subs	r3, #1
 8002e22:	4a38      	ldr	r2, [pc, #224]	; (8002f04 <xTaskResumeAll+0x118>)
 8002e24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e26:	4b37      	ldr	r3, [pc, #220]	; (8002f04 <xTaskResumeAll+0x118>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d162      	bne.n	8002ef4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e2e:	4b36      	ldr	r3, [pc, #216]	; (8002f08 <xTaskResumeAll+0x11c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d05e      	beq.n	8002ef4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e36:	e02f      	b.n	8002e98 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002e38:	4b34      	ldr	r3, [pc, #208]	; (8002f0c <xTaskResumeAll+0x120>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3318      	adds	r3, #24
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff f883 	bl	8001f50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff f87e 	bl	8001f50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e58:	4b2d      	ldr	r3, [pc, #180]	; (8002f10 <xTaskResumeAll+0x124>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d903      	bls.n	8002e68 <xTaskResumeAll+0x7c>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	4a2a      	ldr	r2, [pc, #168]	; (8002f10 <xTaskResumeAll+0x124>)
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4a27      	ldr	r2, [pc, #156]	; (8002f14 <xTaskResumeAll+0x128>)
 8002e76:	441a      	add	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	f7ff f80b 	bl	8001e9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e88:	4b23      	ldr	r3, [pc, #140]	; (8002f18 <xTaskResumeAll+0x12c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d302      	bcc.n	8002e98 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002e92:	4b22      	ldr	r3, [pc, #136]	; (8002f1c <xTaskResumeAll+0x130>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e98:	4b1c      	ldr	r3, [pc, #112]	; (8002f0c <xTaskResumeAll+0x120>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1cb      	bne.n	8002e38 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002ea6:	f000 fb55 	bl	8003554 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <xTaskResumeAll+0x134>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d010      	beq.n	8002ed8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002eb6:	f000 f845 	bl	8002f44 <xTaskIncrementTick>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002ec0:	4b16      	ldr	r3, [pc, #88]	; (8002f1c <xTaskResumeAll+0x130>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f1      	bne.n	8002eb6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8002ed2:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <xTaskResumeAll+0x134>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002ed8:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <xTaskResumeAll+0x130>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d009      	beq.n	8002ef4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002ee4:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <xTaskResumeAll+0x138>)
 8002ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	f3bf 8f4f 	dsb	sy
 8002ef0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ef4:	f001 f862 	bl	8003fbc <vPortExitCritical>

	return xAlreadyYielded;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20000cd0 	.word	0x20000cd0
 8002f08:	20000ca8 	.word	0x20000ca8
 8002f0c:	20000c68 	.word	0x20000c68
 8002f10:	20000cb0 	.word	0x20000cb0
 8002f14:	200007d8 	.word	0x200007d8
 8002f18:	200007d4 	.word	0x200007d4
 8002f1c:	20000cbc 	.word	0x20000cbc
 8002f20:	20000cb8 	.word	0x20000cb8
 8002f24:	e000ed04 	.word	0xe000ed04

08002f28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002f2e:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <xTaskGetTickCount+0x18>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002f34:	687b      	ldr	r3, [r7, #4]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr
 8002f40:	20000cac 	.word	0x20000cac

08002f44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f4e:	4b51      	ldr	r3, [pc, #324]	; (8003094 <xTaskIncrementTick+0x150>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f040 808e 	bne.w	8003074 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f58:	4b4f      	ldr	r3, [pc, #316]	; (8003098 <xTaskIncrementTick+0x154>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f60:	4a4d      	ldr	r2, [pc, #308]	; (8003098 <xTaskIncrementTick+0x154>)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d120      	bne.n	8002fae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f6c:	4b4b      	ldr	r3, [pc, #300]	; (800309c <xTaskIncrementTick+0x158>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <xTaskIncrementTick+0x48>
	__asm volatile
 8002f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	603b      	str	r3, [r7, #0]
}
 8002f88:	bf00      	nop
 8002f8a:	e7fe      	b.n	8002f8a <xTaskIncrementTick+0x46>
 8002f8c:	4b43      	ldr	r3, [pc, #268]	; (800309c <xTaskIncrementTick+0x158>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	4b43      	ldr	r3, [pc, #268]	; (80030a0 <xTaskIncrementTick+0x15c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a41      	ldr	r2, [pc, #260]	; (800309c <xTaskIncrementTick+0x158>)
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	4a41      	ldr	r2, [pc, #260]	; (80030a0 <xTaskIncrementTick+0x15c>)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	4b40      	ldr	r3, [pc, #256]	; (80030a4 <xTaskIncrementTick+0x160>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	4a3f      	ldr	r2, [pc, #252]	; (80030a4 <xTaskIncrementTick+0x160>)
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	f000 fad3 	bl	8003554 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002fae:	4b3e      	ldr	r3, [pc, #248]	; (80030a8 <xTaskIncrementTick+0x164>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d34e      	bcc.n	8003056 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fb8:	4b38      	ldr	r3, [pc, #224]	; (800309c <xTaskIncrementTick+0x158>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <xTaskIncrementTick+0x82>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <xTaskIncrementTick+0x84>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d004      	beq.n	8002fd6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fcc:	4b36      	ldr	r3, [pc, #216]	; (80030a8 <xTaskIncrementTick+0x164>)
 8002fce:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd2:	601a      	str	r2, [r3, #0]
					break;
 8002fd4:	e03f      	b.n	8003056 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002fd6:	4b31      	ldr	r3, [pc, #196]	; (800309c <xTaskIncrementTick+0x158>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d203      	bcs.n	8002ff6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002fee:	4a2e      	ldr	r2, [pc, #184]	; (80030a8 <xTaskIncrementTick+0x164>)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6013      	str	r3, [r2, #0]
						break;
 8002ff4:	e02f      	b.n	8003056 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe ffa8 	bl	8001f50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	2b00      	cmp	r3, #0
 8003006:	d004      	beq.n	8003012 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	3318      	adds	r3, #24
 800300c:	4618      	mov	r0, r3
 800300e:	f7fe ff9f 	bl	8001f50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003016:	4b25      	ldr	r3, [pc, #148]	; (80030ac <xTaskIncrementTick+0x168>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d903      	bls.n	8003026 <xTaskIncrementTick+0xe2>
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	4a22      	ldr	r2, [pc, #136]	; (80030ac <xTaskIncrementTick+0x168>)
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4a1f      	ldr	r2, [pc, #124]	; (80030b0 <xTaskIncrementTick+0x16c>)
 8003034:	441a      	add	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	3304      	adds	r3, #4
 800303a:	4619      	mov	r1, r3
 800303c:	4610      	mov	r0, r2
 800303e:	f7fe ff2c 	bl	8001e9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003046:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <xTaskIncrementTick+0x170>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	429a      	cmp	r2, r3
 800304e:	d3b3      	bcc.n	8002fb8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003050:	2301      	movs	r3, #1
 8003052:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003054:	e7b0      	b.n	8002fb8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003056:	4b17      	ldr	r3, [pc, #92]	; (80030b4 <xTaskIncrementTick+0x170>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800305c:	4914      	ldr	r1, [pc, #80]	; (80030b0 <xTaskIncrementTick+0x16c>)
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d907      	bls.n	800307e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800306e:	2301      	movs	r3, #1
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	e004      	b.n	800307e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003074:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <xTaskIncrementTick+0x174>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3301      	adds	r3, #1
 800307a:	4a0f      	ldr	r2, [pc, #60]	; (80030b8 <xTaskIncrementTick+0x174>)
 800307c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800307e:	4b0f      	ldr	r3, [pc, #60]	; (80030bc <xTaskIncrementTick+0x178>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003086:	2301      	movs	r3, #1
 8003088:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800308a:	697b      	ldr	r3, [r7, #20]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000cd0 	.word	0x20000cd0
 8003098:	20000cac 	.word	0x20000cac
 800309c:	20000c60 	.word	0x20000c60
 80030a0:	20000c64 	.word	0x20000c64
 80030a4:	20000cc0 	.word	0x20000cc0
 80030a8:	20000cc8 	.word	0x20000cc8
 80030ac:	20000cb0 	.word	0x20000cb0
 80030b0:	200007d8 	.word	0x200007d8
 80030b4:	200007d4 	.word	0x200007d4
 80030b8:	20000cb8 	.word	0x20000cb8
 80030bc:	20000cbc 	.word	0x20000cbc

080030c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030c6:	4b27      	ldr	r3, [pc, #156]	; (8003164 <vTaskSwitchContext+0xa4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80030ce:	4b26      	ldr	r3, [pc, #152]	; (8003168 <vTaskSwitchContext+0xa8>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80030d4:	e041      	b.n	800315a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80030d6:	4b24      	ldr	r3, [pc, #144]	; (8003168 <vTaskSwitchContext+0xa8>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80030dc:	4b23      	ldr	r3, [pc, #140]	; (800316c <vTaskSwitchContext+0xac>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	e010      	b.n	8003106 <vTaskSwitchContext+0x46>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10a      	bne.n	8003100 <vTaskSwitchContext+0x40>
	__asm volatile
 80030ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ee:	f383 8811 	msr	BASEPRI, r3
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	607b      	str	r3, [r7, #4]
}
 80030fc:	bf00      	nop
 80030fe:	e7fe      	b.n	80030fe <vTaskSwitchContext+0x3e>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3b01      	subs	r3, #1
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	491a      	ldr	r1, [pc, #104]	; (8003170 <vTaskSwitchContext+0xb0>)
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0e4      	beq.n	80030e4 <vTaskSwitchContext+0x24>
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4a12      	ldr	r2, [pc, #72]	; (8003170 <vTaskSwitchContext+0xb0>)
 8003126:	4413      	add	r3, r2
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	605a      	str	r2, [r3, #4]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	3308      	adds	r3, #8
 800313c:	429a      	cmp	r2, r3
 800313e:	d104      	bne.n	800314a <vTaskSwitchContext+0x8a>
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	4a08      	ldr	r2, [pc, #32]	; (8003174 <vTaskSwitchContext+0xb4>)
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	4a05      	ldr	r2, [pc, #20]	; (800316c <vTaskSwitchContext+0xac>)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6013      	str	r3, [r2, #0]
}
 800315a:	bf00      	nop
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr
 8003164:	20000cd0 	.word	0x20000cd0
 8003168:	20000cbc 	.word	0x20000cbc
 800316c:	20000cb0 	.word	0x20000cb0
 8003170:	200007d8 	.word	0x200007d8
 8003174:	200007d4 	.word	0x200007d4

08003178 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10a      	bne.n	800319e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	60fb      	str	r3, [r7, #12]
}
 800319a:	bf00      	nop
 800319c:	e7fe      	b.n	800319c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800319e:	4b07      	ldr	r3, [pc, #28]	; (80031bc <vTaskPlaceOnEventList+0x44>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3318      	adds	r3, #24
 80031a4:	4619      	mov	r1, r3
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7fe fe9a 	bl	8001ee0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80031ac:	2101      	movs	r1, #1
 80031ae:	6838      	ldr	r0, [r7, #0]
 80031b0:	f000 fa80 	bl	80036b4 <prvAddCurrentTaskToDelayedList>
}
 80031b4:	bf00      	nop
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	200007d4 	.word	0x200007d4

080031c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10a      	bne.n	80031e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80031d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d6:	f383 8811 	msr	BASEPRI, r3
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	617b      	str	r3, [r7, #20]
}
 80031e4:	bf00      	nop
 80031e6:	e7fe      	b.n	80031e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031e8:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <vTaskPlaceOnEventListRestricted+0x54>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3318      	adds	r3, #24
 80031ee:	4619      	mov	r1, r3
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7fe fe52 	bl	8001e9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80031fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003200:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	68b8      	ldr	r0, [r7, #8]
 8003206:	f000 fa55 	bl	80036b4 <prvAddCurrentTaskToDelayedList>
	}
 800320a:	bf00      	nop
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	200007d4 	.word	0x200007d4

08003218 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10a      	bne.n	8003244 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800322e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003232:	f383 8811 	msr	BASEPRI, r3
 8003236:	f3bf 8f6f 	isb	sy
 800323a:	f3bf 8f4f 	dsb	sy
 800323e:	60fb      	str	r3, [r7, #12]
}
 8003240:	bf00      	nop
 8003242:	e7fe      	b.n	8003242 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	3318      	adds	r3, #24
 8003248:	4618      	mov	r0, r3
 800324a:	f7fe fe81 	bl	8001f50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800324e:	4b1e      	ldr	r3, [pc, #120]	; (80032c8 <xTaskRemoveFromEventList+0xb0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d11d      	bne.n	8003292 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	3304      	adds	r3, #4
 800325a:	4618      	mov	r0, r3
 800325c:	f7fe fe78 	bl	8001f50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003264:	4b19      	ldr	r3, [pc, #100]	; (80032cc <xTaskRemoveFromEventList+0xb4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d903      	bls.n	8003274 <xTaskRemoveFromEventList+0x5c>
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	4a16      	ldr	r2, [pc, #88]	; (80032cc <xTaskRemoveFromEventList+0xb4>)
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4a13      	ldr	r2, [pc, #76]	; (80032d0 <xTaskRemoveFromEventList+0xb8>)
 8003282:	441a      	add	r2, r3
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	3304      	adds	r3, #4
 8003288:	4619      	mov	r1, r3
 800328a:	4610      	mov	r0, r2
 800328c:	f7fe fe05 	bl	8001e9a <vListInsertEnd>
 8003290:	e005      	b.n	800329e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	3318      	adds	r3, #24
 8003296:	4619      	mov	r1, r3
 8003298:	480e      	ldr	r0, [pc, #56]	; (80032d4 <xTaskRemoveFromEventList+0xbc>)
 800329a:	f7fe fdfe 	bl	8001e9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a2:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <xTaskRemoveFromEventList+0xc0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d905      	bls.n	80032b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80032ac:	2301      	movs	r3, #1
 80032ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80032b0:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <xTaskRemoveFromEventList+0xc4>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	e001      	b.n	80032bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80032bc:	697b      	ldr	r3, [r7, #20]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000cd0 	.word	0x20000cd0
 80032cc:	20000cb0 	.word	0x20000cb0
 80032d0:	200007d8 	.word	0x200007d8
 80032d4:	20000c68 	.word	0x20000c68
 80032d8:	200007d4 	.word	0x200007d4
 80032dc:	20000cbc 	.word	0x20000cbc

080032e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <vTaskInternalSetTimeOutState+0x24>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80032f0:	4b05      	ldr	r3, [pc, #20]	; (8003308 <vTaskInternalSetTimeOutState+0x28>)
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	605a      	str	r2, [r3, #4]
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	20000cc0 	.word	0x20000cc0
 8003308:	20000cac 	.word	0x20000cac

0800330c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10a      	bne.n	8003332 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800331c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003320:	f383 8811 	msr	BASEPRI, r3
 8003324:	f3bf 8f6f 	isb	sy
 8003328:	f3bf 8f4f 	dsb	sy
 800332c:	613b      	str	r3, [r7, #16]
}
 800332e:	bf00      	nop
 8003330:	e7fe      	b.n	8003330 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10a      	bne.n	800334e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	60fb      	str	r3, [r7, #12]
}
 800334a:	bf00      	nop
 800334c:	e7fe      	b.n	800334c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800334e:	f000 fe05 	bl	8003f5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003352:	4b1d      	ldr	r3, [pc, #116]	; (80033c8 <xTaskCheckForTimeOut+0xbc>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336a:	d102      	bne.n	8003372 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
 8003370:	e023      	b.n	80033ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4b15      	ldr	r3, [pc, #84]	; (80033cc <xTaskCheckForTimeOut+0xc0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d007      	beq.n	800338e <xTaskCheckForTimeOut+0x82>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	429a      	cmp	r2, r3
 8003386:	d302      	bcc.n	800338e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003388:	2301      	movs	r3, #1
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	e015      	b.n	80033ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	429a      	cmp	r2, r3
 8003396:	d20b      	bcs.n	80033b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	1ad2      	subs	r2, r2, r3
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff ff9b 	bl	80032e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
 80033ae:	e004      	b.n	80033ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80033b6:	2301      	movs	r3, #1
 80033b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80033ba:	f000 fdff 	bl	8003fbc <vPortExitCritical>

	return xReturn;
 80033be:	69fb      	ldr	r3, [r7, #28]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3720      	adds	r7, #32
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20000cac 	.word	0x20000cac
 80033cc:	20000cc0 	.word	0x20000cc0

080033d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <vTaskMissedYield+0x14>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000cbc 	.word	0x20000cbc

080033e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80033f0:	f000 f852 	bl	8003498 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80033f4:	4b06      	ldr	r3, [pc, #24]	; (8003410 <prvIdleTask+0x28>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d9f9      	bls.n	80033f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <prvIdleTask+0x2c>)
 80033fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800340c:	e7f0      	b.n	80033f0 <prvIdleTask+0x8>
 800340e:	bf00      	nop
 8003410:	200007d8 	.word	0x200007d8
 8003414:	e000ed04 	.word	0xe000ed04

08003418 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800341e:	2300      	movs	r3, #0
 8003420:	607b      	str	r3, [r7, #4]
 8003422:	e00c      	b.n	800343e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4a12      	ldr	r2, [pc, #72]	; (8003478 <prvInitialiseTaskLists+0x60>)
 8003430:	4413      	add	r3, r2
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe fd06 	bl	8001e44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3301      	adds	r3, #1
 800343c:	607b      	str	r3, [r7, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b37      	cmp	r3, #55	; 0x37
 8003442:	d9ef      	bls.n	8003424 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003444:	480d      	ldr	r0, [pc, #52]	; (800347c <prvInitialiseTaskLists+0x64>)
 8003446:	f7fe fcfd 	bl	8001e44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800344a:	480d      	ldr	r0, [pc, #52]	; (8003480 <prvInitialiseTaskLists+0x68>)
 800344c:	f7fe fcfa 	bl	8001e44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003450:	480c      	ldr	r0, [pc, #48]	; (8003484 <prvInitialiseTaskLists+0x6c>)
 8003452:	f7fe fcf7 	bl	8001e44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003456:	480c      	ldr	r0, [pc, #48]	; (8003488 <prvInitialiseTaskLists+0x70>)
 8003458:	f7fe fcf4 	bl	8001e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800345c:	480b      	ldr	r0, [pc, #44]	; (800348c <prvInitialiseTaskLists+0x74>)
 800345e:	f7fe fcf1 	bl	8001e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003462:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <prvInitialiseTaskLists+0x78>)
 8003464:	4a05      	ldr	r2, [pc, #20]	; (800347c <prvInitialiseTaskLists+0x64>)
 8003466:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003468:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <prvInitialiseTaskLists+0x7c>)
 800346a:	4a05      	ldr	r2, [pc, #20]	; (8003480 <prvInitialiseTaskLists+0x68>)
 800346c:	601a      	str	r2, [r3, #0]
}
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	200007d8 	.word	0x200007d8
 800347c:	20000c38 	.word	0x20000c38
 8003480:	20000c4c 	.word	0x20000c4c
 8003484:	20000c68 	.word	0x20000c68
 8003488:	20000c7c 	.word	0x20000c7c
 800348c:	20000c94 	.word	0x20000c94
 8003490:	20000c60 	.word	0x20000c60
 8003494:	20000c64 	.word	0x20000c64

08003498 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800349e:	e019      	b.n	80034d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80034a0:	f000 fd5c 	bl	8003f5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80034a4:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <prvCheckTasksWaitingTermination+0x50>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fe fd4d 	bl	8001f50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80034b6:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <prvCheckTasksWaitingTermination+0x54>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	4a0b      	ldr	r2, [pc, #44]	; (80034ec <prvCheckTasksWaitingTermination+0x54>)
 80034be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <prvCheckTasksWaitingTermination+0x58>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3b01      	subs	r3, #1
 80034c6:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <prvCheckTasksWaitingTermination+0x58>)
 80034c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80034ca:	f000 fd77 	bl	8003fbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f810 	bl	80034f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034d4:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <prvCheckTasksWaitingTermination+0x58>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1e1      	bne.n	80034a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80034dc:	bf00      	nop
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000c7c 	.word	0x20000c7c
 80034ec:	20000ca8 	.word	0x20000ca8
 80034f0:	20000c90 	.word	0x20000c90

080034f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003502:	2b00      	cmp	r3, #0
 8003504:	d108      	bne.n	8003518 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	4618      	mov	r0, r3
 800350c:	f000 feea 	bl	80042e4 <vPortFree>
				vPortFree( pxTCB );
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 fee7 	bl	80042e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003516:	e018      	b.n	800354a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800351e:	2b01      	cmp	r3, #1
 8003520:	d103      	bne.n	800352a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fede 	bl	80042e4 <vPortFree>
	}
 8003528:	e00f      	b.n	800354a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003530:	2b02      	cmp	r3, #2
 8003532:	d00a      	beq.n	800354a <prvDeleteTCB+0x56>
	__asm volatile
 8003534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	60fb      	str	r3, [r7, #12]
}
 8003546:	bf00      	nop
 8003548:	e7fe      	b.n	8003548 <prvDeleteTCB+0x54>
	}
 800354a:	bf00      	nop
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800355a:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <prvResetNextTaskUnblockTime+0x40>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <prvResetNextTaskUnblockTime+0x14>
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <prvResetNextTaskUnblockTime+0x16>
 8003568:	2300      	movs	r3, #0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d004      	beq.n	8003578 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800356e:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <prvResetNextTaskUnblockTime+0x44>)
 8003570:	f04f 32ff 	mov.w	r2, #4294967295
 8003574:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003576:	e008      	b.n	800358a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <prvResetNextTaskUnblockTime+0x40>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4a04      	ldr	r2, [pc, #16]	; (8003598 <prvResetNextTaskUnblockTime+0x44>)
 8003588:	6013      	str	r3, [r2, #0]
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr
 8003594:	20000c60 	.word	0x20000c60
 8003598:	20000cc8 	.word	0x20000cc8

0800359c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80035a2:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <xTaskGetSchedulerState+0x34>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d102      	bne.n	80035b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80035aa:	2301      	movs	r3, #1
 80035ac:	607b      	str	r3, [r7, #4]
 80035ae:	e008      	b.n	80035c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035b0:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <xTaskGetSchedulerState+0x38>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d102      	bne.n	80035be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80035b8:	2302      	movs	r3, #2
 80035ba:	607b      	str	r3, [r7, #4]
 80035bc:	e001      	b.n	80035c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80035be:	2300      	movs	r3, #0
 80035c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80035c2:	687b      	ldr	r3, [r7, #4]
	}
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	20000cb4 	.word	0x20000cb4
 80035d4:	20000cd0 	.word	0x20000cd0

080035d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d056      	beq.n	800369c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80035ee:	4b2e      	ldr	r3, [pc, #184]	; (80036a8 <xTaskPriorityDisinherit+0xd0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d00a      	beq.n	800360e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	60fb      	str	r3, [r7, #12]
}
 800360a:	bf00      	nop
 800360c:	e7fe      	b.n	800360c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10a      	bne.n	800362c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	60bb      	str	r3, [r7, #8]
}
 8003628:	bf00      	nop
 800362a:	e7fe      	b.n	800362a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003630:	1e5a      	subs	r2, r3, #1
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363e:	429a      	cmp	r2, r3
 8003640:	d02c      	beq.n	800369c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003646:	2b00      	cmp	r3, #0
 8003648:	d128      	bne.n	800369c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	3304      	adds	r3, #4
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe fc7e 	bl	8001f50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366c:	4b0f      	ldr	r3, [pc, #60]	; (80036ac <xTaskPriorityDisinherit+0xd4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d903      	bls.n	800367c <xTaskPriorityDisinherit+0xa4>
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	4a0c      	ldr	r2, [pc, #48]	; (80036ac <xTaskPriorityDisinherit+0xd4>)
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <xTaskPriorityDisinherit+0xd8>)
 800368a:	441a      	add	r2, r3
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	3304      	adds	r3, #4
 8003690:	4619      	mov	r1, r3
 8003692:	4610      	mov	r0, r2
 8003694:	f7fe fc01 	bl	8001e9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003698:	2301      	movs	r3, #1
 800369a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800369c:	697b      	ldr	r3, [r7, #20]
	}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	200007d4 	.word	0x200007d4
 80036ac:	20000cb0 	.word	0x20000cb0
 80036b0:	200007d8 	.word	0x200007d8

080036b4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80036be:	4b21      	ldr	r3, [pc, #132]	; (8003744 <prvAddCurrentTaskToDelayedList+0x90>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036c4:	4b20      	ldr	r3, [pc, #128]	; (8003748 <prvAddCurrentTaskToDelayedList+0x94>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3304      	adds	r3, #4
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe fc40 	bl	8001f50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	d10a      	bne.n	80036ee <prvAddCurrentTaskToDelayedList+0x3a>
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036de:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <prvAddCurrentTaskToDelayedList+0x94>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3304      	adds	r3, #4
 80036e4:	4619      	mov	r1, r3
 80036e6:	4819      	ldr	r0, [pc, #100]	; (800374c <prvAddCurrentTaskToDelayedList+0x98>)
 80036e8:	f7fe fbd7 	bl	8001e9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80036ec:	e026      	b.n	800373c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4413      	add	r3, r2
 80036f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80036f6:	4b14      	ldr	r3, [pc, #80]	; (8003748 <prvAddCurrentTaskToDelayedList+0x94>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	429a      	cmp	r2, r3
 8003704:	d209      	bcs.n	800371a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003706:	4b12      	ldr	r3, [pc, #72]	; (8003750 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	4b0f      	ldr	r3, [pc, #60]	; (8003748 <prvAddCurrentTaskToDelayedList+0x94>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3304      	adds	r3, #4
 8003710:	4619      	mov	r1, r3
 8003712:	4610      	mov	r0, r2
 8003714:	f7fe fbe4 	bl	8001ee0 <vListInsert>
}
 8003718:	e010      	b.n	800373c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800371a:	4b0e      	ldr	r3, [pc, #56]	; (8003754 <prvAddCurrentTaskToDelayedList+0xa0>)
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <prvAddCurrentTaskToDelayedList+0x94>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3304      	adds	r3, #4
 8003724:	4619      	mov	r1, r3
 8003726:	4610      	mov	r0, r2
 8003728:	f7fe fbda 	bl	8001ee0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800372c:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <prvAddCurrentTaskToDelayedList+0xa4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	429a      	cmp	r2, r3
 8003734:	d202      	bcs.n	800373c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003736:	4a08      	ldr	r2, [pc, #32]	; (8003758 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	6013      	str	r3, [r2, #0]
}
 800373c:	bf00      	nop
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000cac 	.word	0x20000cac
 8003748:	200007d4 	.word	0x200007d4
 800374c:	20000c94 	.word	0x20000c94
 8003750:	20000c64 	.word	0x20000c64
 8003754:	20000c60 	.word	0x20000c60
 8003758:	20000cc8 	.word	0x20000cc8

0800375c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08a      	sub	sp, #40	; 0x28
 8003760:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003766:	f000 facb 	bl	8003d00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800376a:	4b1c      	ldr	r3, [pc, #112]	; (80037dc <xTimerCreateTimerTask+0x80>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d021      	beq.n	80037b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003776:	2300      	movs	r3, #0
 8003778:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800377a:	1d3a      	adds	r2, r7, #4
 800377c:	f107 0108 	add.w	r1, r7, #8
 8003780:	f107 030c 	add.w	r3, r7, #12
 8003784:	4618      	mov	r0, r3
 8003786:	f7fe fb43 	bl	8001e10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	9202      	str	r2, [sp, #8]
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	2302      	movs	r3, #2
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	2300      	movs	r3, #0
 800379a:	460a      	mov	r2, r1
 800379c:	4910      	ldr	r1, [pc, #64]	; (80037e0 <xTimerCreateTimerTask+0x84>)
 800379e:	4811      	ldr	r0, [pc, #68]	; (80037e4 <xTimerCreateTimerTask+0x88>)
 80037a0:	f7ff f8e4 	bl	800296c <xTaskCreateStatic>
 80037a4:	4603      	mov	r3, r0
 80037a6:	4a10      	ldr	r2, [pc, #64]	; (80037e8 <xTimerCreateTimerTask+0x8c>)
 80037a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80037aa:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <xTimerCreateTimerTask+0x8c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80037b2:	2301      	movs	r3, #1
 80037b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10a      	bne.n	80037d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80037bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	613b      	str	r3, [r7, #16]
}
 80037ce:	bf00      	nop
 80037d0:	e7fe      	b.n	80037d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80037d2:	697b      	ldr	r3, [r7, #20]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20000d04 	.word	0x20000d04
 80037e0:	080045e8 	.word	0x080045e8
 80037e4:	08003909 	.word	0x08003909
 80037e8:	20000d08 	.word	0x20000d08

080037ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08a      	sub	sp, #40	; 0x28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10a      	bne.n	800381a <xTimerGenericCommand+0x2e>
	__asm volatile
 8003804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	623b      	str	r3, [r7, #32]
}
 8003816:	bf00      	nop
 8003818:	e7fe      	b.n	8003818 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800381a:	4b1a      	ldr	r3, [pc, #104]	; (8003884 <xTimerGenericCommand+0x98>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d02a      	beq.n	8003878 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b05      	cmp	r3, #5
 8003832:	dc18      	bgt.n	8003866 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003834:	f7ff feb2 	bl	800359c <xTaskGetSchedulerState>
 8003838:	4603      	mov	r3, r0
 800383a:	2b02      	cmp	r3, #2
 800383c:	d109      	bne.n	8003852 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800383e:	4b11      	ldr	r3, [pc, #68]	; (8003884 <xTimerGenericCommand+0x98>)
 8003840:	6818      	ldr	r0, [r3, #0]
 8003842:	f107 0110 	add.w	r1, r7, #16
 8003846:	2300      	movs	r3, #0
 8003848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800384a:	f7fe fcad 	bl	80021a8 <xQueueGenericSend>
 800384e:	6278      	str	r0, [r7, #36]	; 0x24
 8003850:	e012      	b.n	8003878 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003852:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <xTimerGenericCommand+0x98>)
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	f107 0110 	add.w	r1, r7, #16
 800385a:	2300      	movs	r3, #0
 800385c:	2200      	movs	r2, #0
 800385e:	f7fe fca3 	bl	80021a8 <xQueueGenericSend>
 8003862:	6278      	str	r0, [r7, #36]	; 0x24
 8003864:	e008      	b.n	8003878 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003866:	4b07      	ldr	r3, [pc, #28]	; (8003884 <xTimerGenericCommand+0x98>)
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	f107 0110 	add.w	r1, r7, #16
 800386e:	2300      	movs	r3, #0
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	f7fe fd97 	bl	80023a4 <xQueueGenericSendFromISR>
 8003876:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800387a:	4618      	mov	r0, r3
 800387c:	3728      	adds	r7, #40	; 0x28
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000d04 	.word	0x20000d04

08003888 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af02      	add	r7, sp, #8
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003892:	4b1c      	ldr	r3, [pc, #112]	; (8003904 <prvProcessExpiredTimer+0x7c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	3304      	adds	r3, #4
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fe fb55 	bl	8001f50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d122      	bne.n	80038f4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	699a      	ldr	r2, [r3, #24]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	18d1      	adds	r1, r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	6978      	ldr	r0, [r7, #20]
 80038bc:	f000 f8c8 	bl	8003a50 <prvInsertTimerInActiveList>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d016      	beq.n	80038f4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80038c6:	2300      	movs	r3, #0
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	2300      	movs	r3, #0
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	2100      	movs	r1, #0
 80038d0:	6978      	ldr	r0, [r7, #20]
 80038d2:	f7ff ff8b 	bl	80037ec <xTimerGenericCommand>
 80038d6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10a      	bne.n	80038f4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80038de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	60fb      	str	r3, [r7, #12]
}
 80038f0:	bf00      	nop
 80038f2:	e7fe      	b.n	80038f2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	6978      	ldr	r0, [r7, #20]
 80038fa:	4798      	blx	r3
}
 80038fc:	bf00      	nop
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20000cfc 	.word	0x20000cfc

08003908 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003910:	f107 0308 	add.w	r3, r7, #8
 8003914:	4618      	mov	r0, r3
 8003916:	f000 f857 	bl	80039c8 <prvGetNextExpireTime>
 800391a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	4619      	mov	r1, r3
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f803 	bl	800392c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003926:	f000 f8d5 	bl	8003ad4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800392a:	e7f1      	b.n	8003910 <prvTimerTask+0x8>

0800392c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003936:	f7ff fa4b 	bl	8002dd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800393a:	f107 0308 	add.w	r3, r7, #8
 800393e:	4618      	mov	r0, r3
 8003940:	f000 f866 	bl	8003a10 <prvSampleTimeNow>
 8003944:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d130      	bne.n	80039ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10a      	bne.n	8003968 <prvProcessTimerOrBlockTask+0x3c>
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	429a      	cmp	r2, r3
 8003958:	d806      	bhi.n	8003968 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800395a:	f7ff fa47 	bl	8002dec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800395e:	68f9      	ldr	r1, [r7, #12]
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff ff91 	bl	8003888 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003966:	e024      	b.n	80039b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d008      	beq.n	8003980 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800396e:	4b13      	ldr	r3, [pc, #76]	; (80039bc <prvProcessTimerOrBlockTask+0x90>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	bf0c      	ite	eq
 8003978:	2301      	moveq	r3, #1
 800397a:	2300      	movne	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003980:	4b0f      	ldr	r3, [pc, #60]	; (80039c0 <prvProcessTimerOrBlockTask+0x94>)
 8003982:	6818      	ldr	r0, [r3, #0]
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	4619      	mov	r1, r3
 800398e:	f7fe ffb9 	bl	8002904 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003992:	f7ff fa2b 	bl	8002dec <xTaskResumeAll>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10a      	bne.n	80039b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800399c:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <prvProcessTimerOrBlockTask+0x98>)
 800399e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	f3bf 8f6f 	isb	sy
}
 80039ac:	e001      	b.n	80039b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80039ae:	f7ff fa1d 	bl	8002dec <xTaskResumeAll>
}
 80039b2:	bf00      	nop
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000d00 	.word	0x20000d00
 80039c0:	20000d04 	.word	0x20000d04
 80039c4:	e000ed04 	.word	0xe000ed04

080039c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80039d0:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <prvGetNextExpireTime+0x44>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	bf0c      	ite	eq
 80039da:	2301      	moveq	r3, #1
 80039dc:	2300      	movne	r3, #0
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	461a      	mov	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d105      	bne.n	80039fa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039ee:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <prvGetNextExpireTime+0x44>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	e001      	b.n	80039fe <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80039fe:	68fb      	ldr	r3, [r7, #12]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	20000cfc 	.word	0x20000cfc

08003a10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003a18:	f7ff fa86 	bl	8002f28 <xTaskGetTickCount>
 8003a1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <prvSampleTimeNow+0x3c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d205      	bcs.n	8003a34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003a28:	f000 f908 	bl	8003c3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	e002      	b.n	8003a3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003a3a:	4a04      	ldr	r2, [pc, #16]	; (8003a4c <prvSampleTimeNow+0x3c>)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003a40:	68fb      	ldr	r3, [r7, #12]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000d0c 	.word	0x20000d0c

08003a50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d812      	bhi.n	8003a9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	1ad2      	subs	r2, r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d302      	bcc.n	8003a8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003a84:	2301      	movs	r3, #1
 8003a86:	617b      	str	r3, [r7, #20]
 8003a88:	e01b      	b.n	8003ac2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003a8a:	4b10      	ldr	r3, [pc, #64]	; (8003acc <prvInsertTimerInActiveList+0x7c>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	3304      	adds	r3, #4
 8003a92:	4619      	mov	r1, r3
 8003a94:	4610      	mov	r0, r2
 8003a96:	f7fe fa23 	bl	8001ee0 <vListInsert>
 8003a9a:	e012      	b.n	8003ac2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d206      	bcs.n	8003ab2 <prvInsertTimerInActiveList+0x62>
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d302      	bcc.n	8003ab2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003aac:	2301      	movs	r3, #1
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	e007      	b.n	8003ac2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ab2:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <prvInsertTimerInActiveList+0x80>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	4619      	mov	r1, r3
 8003abc:	4610      	mov	r0, r2
 8003abe:	f7fe fa0f 	bl	8001ee0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003ac2:	697b      	ldr	r3, [r7, #20]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	20000d00 	.word	0x20000d00
 8003ad0:	20000cfc 	.word	0x20000cfc

08003ad4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b08e      	sub	sp, #56	; 0x38
 8003ad8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ada:	e09d      	b.n	8003c18 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	da18      	bge.n	8003b14 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003ae2:	1d3b      	adds	r3, r7, #4
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10a      	bne.n	8003b04 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	61fb      	str	r3, [r7, #28]
}
 8003b00:	bf00      	nop
 8003b02:	e7fe      	b.n	8003b02 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b0a:	6850      	ldr	r0, [r2, #4]
 8003b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b0e:	6892      	ldr	r2, [r2, #8]
 8003b10:	4611      	mov	r1, r2
 8003b12:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	db7e      	blt.n	8003c18 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d004      	beq.n	8003b30 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b28:	3304      	adds	r3, #4
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fe fa10 	bl	8001f50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b30:	463b      	mov	r3, r7
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff ff6c 	bl	8003a10 <prvSampleTimeNow>
 8003b38:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b09      	cmp	r3, #9
 8003b3e:	d86a      	bhi.n	8003c16 <prvProcessReceivedCommands+0x142>
 8003b40:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <prvProcessReceivedCommands+0x74>)
 8003b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b46:	bf00      	nop
 8003b48:	08003b71 	.word	0x08003b71
 8003b4c:	08003b71 	.word	0x08003b71
 8003b50:	08003b71 	.word	0x08003b71
 8003b54:	08003c19 	.word	0x08003c19
 8003b58:	08003bcd 	.word	0x08003bcd
 8003b5c:	08003c05 	.word	0x08003c05
 8003b60:	08003b71 	.word	0x08003b71
 8003b64:	08003b71 	.word	0x08003b71
 8003b68:	08003c19 	.word	0x08003c19
 8003b6c:	08003bcd 	.word	0x08003bcd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	18d1      	adds	r1, r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b7e:	f7ff ff67 	bl	8003a50 <prvInsertTimerInActiveList>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d047      	beq.n	8003c18 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b8e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d13f      	bne.n	8003c18 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	441a      	add	r2, r3
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003baa:	f7ff fe1f 	bl	80037ec <xTimerGenericCommand>
 8003bae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d130      	bne.n	8003c18 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8003bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bba:	f383 8811 	msr	BASEPRI, r3
 8003bbe:	f3bf 8f6f 	isb	sy
 8003bc2:	f3bf 8f4f 	dsb	sy
 8003bc6:	61bb      	str	r3, [r7, #24]
}
 8003bc8:	bf00      	nop
 8003bca:	e7fe      	b.n	8003bca <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10a      	bne.n	8003bf0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8003bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	617b      	str	r3, [r7, #20]
}
 8003bec:	bf00      	nop
 8003bee:	e7fe      	b.n	8003bee <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf2:	699a      	ldr	r2, [r3, #24]
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf6:	18d1      	adds	r1, r2, r3
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bfe:	f7ff ff27 	bl	8003a50 <prvInsertTimerInActiveList>
					break;
 8003c02:	e009      	b.n	8003c18 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d104      	bne.n	8003c18 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8003c0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c10:	f000 fb68 	bl	80042e4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003c14:	e000      	b.n	8003c18 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8003c16:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c18:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <prvProcessReceivedCommands+0x164>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	1d39      	adds	r1, r7, #4
 8003c1e:	2200      	movs	r2, #0
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fe fc57 	bl	80024d4 <xQueueReceive>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f47f af57 	bne.w	8003adc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003c2e:	bf00      	nop
 8003c30:	bf00      	nop
 8003c32:	3730      	adds	r7, #48	; 0x30
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000d04 	.word	0x20000d04

08003c3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c42:	e045      	b.n	8003cd0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c44:	4b2c      	ldr	r3, [pc, #176]	; (8003cf8 <prvSwitchTimerLists+0xbc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c4e:	4b2a      	ldr	r3, [pc, #168]	; (8003cf8 <prvSwitchTimerLists+0xbc>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fe f977 	bl	8001f50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d12e      	bne.n	8003cd0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4413      	add	r3, r2
 8003c7a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d90e      	bls.n	8003ca2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c90:	4b19      	ldr	r3, [pc, #100]	; (8003cf8 <prvSwitchTimerLists+0xbc>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	3304      	adds	r3, #4
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4610      	mov	r0, r2
 8003c9c:	f7fe f920 	bl	8001ee0 <vListInsert>
 8003ca0:	e016      	b.n	8003cd0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	2100      	movs	r1, #0
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f7ff fd9d 	bl	80037ec <xTimerGenericCommand>
 8003cb2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <prvSwitchTimerLists+0x94>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	603b      	str	r3, [r7, #0]
}
 8003ccc:	bf00      	nop
 8003cce:	e7fe      	b.n	8003cce <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003cd0:	4b09      	ldr	r3, [pc, #36]	; (8003cf8 <prvSwitchTimerLists+0xbc>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1b4      	bne.n	8003c44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003cda:	4b07      	ldr	r3, [pc, #28]	; (8003cf8 <prvSwitchTimerLists+0xbc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003ce0:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <prvSwitchTimerLists+0xc0>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a04      	ldr	r2, [pc, #16]	; (8003cf8 <prvSwitchTimerLists+0xbc>)
 8003ce6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003ce8:	4a04      	ldr	r2, [pc, #16]	; (8003cfc <prvSwitchTimerLists+0xc0>)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	6013      	str	r3, [r2, #0]
}
 8003cee:	bf00      	nop
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	20000cfc 	.word	0x20000cfc
 8003cfc:	20000d00 	.word	0x20000d00

08003d00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003d06:	f000 f929 	bl	8003f5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003d0a:	4b15      	ldr	r3, [pc, #84]	; (8003d60 <prvCheckForValidListAndQueue+0x60>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d120      	bne.n	8003d54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003d12:	4814      	ldr	r0, [pc, #80]	; (8003d64 <prvCheckForValidListAndQueue+0x64>)
 8003d14:	f7fe f896 	bl	8001e44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003d18:	4813      	ldr	r0, [pc, #76]	; (8003d68 <prvCheckForValidListAndQueue+0x68>)
 8003d1a:	f7fe f893 	bl	8001e44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003d1e:	4b13      	ldr	r3, [pc, #76]	; (8003d6c <prvCheckForValidListAndQueue+0x6c>)
 8003d20:	4a10      	ldr	r2, [pc, #64]	; (8003d64 <prvCheckForValidListAndQueue+0x64>)
 8003d22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003d24:	4b12      	ldr	r3, [pc, #72]	; (8003d70 <prvCheckForValidListAndQueue+0x70>)
 8003d26:	4a10      	ldr	r2, [pc, #64]	; (8003d68 <prvCheckForValidListAndQueue+0x68>)
 8003d28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <prvCheckForValidListAndQueue+0x74>)
 8003d30:	4a11      	ldr	r2, [pc, #68]	; (8003d78 <prvCheckForValidListAndQueue+0x78>)
 8003d32:	2110      	movs	r1, #16
 8003d34:	200a      	movs	r0, #10
 8003d36:	f7fe f99d 	bl	8002074 <xQueueGenericCreateStatic>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	4a08      	ldr	r2, [pc, #32]	; (8003d60 <prvCheckForValidListAndQueue+0x60>)
 8003d3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003d40:	4b07      	ldr	r3, [pc, #28]	; (8003d60 <prvCheckForValidListAndQueue+0x60>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d005      	beq.n	8003d54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003d48:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <prvCheckForValidListAndQueue+0x60>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	490b      	ldr	r1, [pc, #44]	; (8003d7c <prvCheckForValidListAndQueue+0x7c>)
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fe fdb0 	bl	80028b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d54:	f000 f932 	bl	8003fbc <vPortExitCritical>
}
 8003d58:	bf00      	nop
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20000d04 	.word	0x20000d04
 8003d64:	20000cd4 	.word	0x20000cd4
 8003d68:	20000ce8 	.word	0x20000ce8
 8003d6c:	20000cfc 	.word	0x20000cfc
 8003d70:	20000d00 	.word	0x20000d00
 8003d74:	20000db0 	.word	0x20000db0
 8003d78:	20000d10 	.word	0x20000d10
 8003d7c:	080045f0 	.word	0x080045f0

08003d80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3b04      	subs	r3, #4
 8003d90:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3b04      	subs	r3, #4
 8003d9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f023 0201 	bic.w	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3b04      	subs	r3, #4
 8003dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003db0:	4a08      	ldr	r2, [pc, #32]	; (8003dd4 <pxPortInitialiseStack+0x54>)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3b14      	subs	r3, #20
 8003dba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	3b20      	subs	r3, #32
 8003dc6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bc80      	pop	{r7}
 8003dd2:	4770      	bx	lr
 8003dd4:	08003dd9 	.word	0x08003dd9

08003dd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003de2:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <prvTaskExitError+0x54>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dea:	d00a      	beq.n	8003e02 <prvTaskExitError+0x2a>
	__asm volatile
 8003dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	60fb      	str	r3, [r7, #12]
}
 8003dfe:	bf00      	nop
 8003e00:	e7fe      	b.n	8003e00 <prvTaskExitError+0x28>
	__asm volatile
 8003e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	60bb      	str	r3, [r7, #8]
}
 8003e14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e16:	bf00      	nop
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0fc      	beq.n	8003e18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e1e:	bf00      	nop
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	2000000c 	.word	0x2000000c

08003e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e30:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <pxCurrentTCBConst2>)
 8003e32:	6819      	ldr	r1, [r3, #0]
 8003e34:	6808      	ldr	r0, [r1, #0]
 8003e36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e3a:	f380 8809 	msr	PSP, r0
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f04f 0000 	mov.w	r0, #0
 8003e46:	f380 8811 	msr	BASEPRI, r0
 8003e4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003e4e:	4770      	bx	lr

08003e50 <pxCurrentTCBConst2>:
 8003e50:	200007d4 	.word	0x200007d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop

08003e58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003e58:	4806      	ldr	r0, [pc, #24]	; (8003e74 <prvPortStartFirstTask+0x1c>)
 8003e5a:	6800      	ldr	r0, [r0, #0]
 8003e5c:	6800      	ldr	r0, [r0, #0]
 8003e5e:	f380 8808 	msr	MSP, r0
 8003e62:	b662      	cpsie	i
 8003e64:	b661      	cpsie	f
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	df00      	svc	0
 8003e70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e72:	bf00      	nop
 8003e74:	e000ed08 	.word	0xe000ed08

08003e78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e7e:	4b32      	ldr	r3, [pc, #200]	; (8003f48 <xPortStartScheduler+0xd0>)
 8003e80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	22ff      	movs	r2, #255	; 0xff
 8003e8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	4b2a      	ldr	r3, [pc, #168]	; (8003f4c <xPortStartScheduler+0xd4>)
 8003ea4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ea6:	4b2a      	ldr	r3, [pc, #168]	; (8003f50 <xPortStartScheduler+0xd8>)
 8003ea8:	2207      	movs	r2, #7
 8003eaa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003eac:	e009      	b.n	8003ec2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003eae:	4b28      	ldr	r3, [pc, #160]	; (8003f50 <xPortStartScheduler+0xd8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	4a26      	ldr	r2, [pc, #152]	; (8003f50 <xPortStartScheduler+0xd8>)
 8003eb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eca:	2b80      	cmp	r3, #128	; 0x80
 8003ecc:	d0ef      	beq.n	8003eae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ece:	4b20      	ldr	r3, [pc, #128]	; (8003f50 <xPortStartScheduler+0xd8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f1c3 0307 	rsb	r3, r3, #7
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d00a      	beq.n	8003ef0 <xPortStartScheduler+0x78>
	__asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	60bb      	str	r3, [r7, #8]
}
 8003eec:	bf00      	nop
 8003eee:	e7fe      	b.n	8003eee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ef0:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <xPortStartScheduler+0xd8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	021b      	lsls	r3, r3, #8
 8003ef6:	4a16      	ldr	r2, [pc, #88]	; (8003f50 <xPortStartScheduler+0xd8>)
 8003ef8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003efa:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <xPortStartScheduler+0xd8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f02:	4a13      	ldr	r2, [pc, #76]	; (8003f50 <xPortStartScheduler+0xd8>)
 8003f04:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f0e:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <xPortStartScheduler+0xdc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a10      	ldr	r2, [pc, #64]	; (8003f54 <xPortStartScheduler+0xdc>)
 8003f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f1a:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <xPortStartScheduler+0xdc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a0d      	ldr	r2, [pc, #52]	; (8003f54 <xPortStartScheduler+0xdc>)
 8003f20:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f24:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f26:	f000 f8b9 	bl	800409c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f2a:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <xPortStartScheduler+0xe0>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f30:	f7ff ff92 	bl	8003e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f34:	f7ff f8c4 	bl	80030c0 <vTaskSwitchContext>
	prvTaskExitError();
 8003f38:	f7ff ff4e 	bl	8003dd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	e000e400 	.word	0xe000e400
 8003f4c:	20000e00 	.word	0x20000e00
 8003f50:	20000e04 	.word	0x20000e04
 8003f54:	e000ed20 	.word	0xe000ed20
 8003f58:	2000000c 	.word	0x2000000c

08003f5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
	__asm volatile
 8003f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f66:	f383 8811 	msr	BASEPRI, r3
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	607b      	str	r3, [r7, #4]
}
 8003f74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f76:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <vPortEnterCritical+0x58>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	4a0d      	ldr	r2, [pc, #52]	; (8003fb4 <vPortEnterCritical+0x58>)
 8003f7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f80:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <vPortEnterCritical+0x58>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d10f      	bne.n	8003fa8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f88:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <vPortEnterCritical+0x5c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <vPortEnterCritical+0x4c>
	__asm volatile
 8003f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	603b      	str	r3, [r7, #0]
}
 8003fa4:	bf00      	nop
 8003fa6:	e7fe      	b.n	8003fa6 <vPortEnterCritical+0x4a>
	}
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	2000000c 	.word	0x2000000c
 8003fb8:	e000ed04 	.word	0xe000ed04

08003fbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003fc2:	4b11      	ldr	r3, [pc, #68]	; (8004008 <vPortExitCritical+0x4c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10a      	bne.n	8003fe0 <vPortExitCritical+0x24>
	__asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	607b      	str	r3, [r7, #4]
}
 8003fdc:	bf00      	nop
 8003fde:	e7fe      	b.n	8003fde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003fe0:	4b09      	ldr	r3, [pc, #36]	; (8004008 <vPortExitCritical+0x4c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	4a08      	ldr	r2, [pc, #32]	; (8004008 <vPortExitCritical+0x4c>)
 8003fe8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003fea:	4b07      	ldr	r3, [pc, #28]	; (8004008 <vPortExitCritical+0x4c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d105      	bne.n	8003ffe <vPortExitCritical+0x42>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	f383 8811 	msr	BASEPRI, r3
}
 8003ffc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr
 8004008:	2000000c 	.word	0x2000000c
 800400c:	00000000 	.word	0x00000000

08004010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004010:	f3ef 8009 	mrs	r0, PSP
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	4b0d      	ldr	r3, [pc, #52]	; (8004050 <pxCurrentTCBConst>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004020:	6010      	str	r0, [r2, #0]
 8004022:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004026:	f04f 0050 	mov.w	r0, #80	; 0x50
 800402a:	f380 8811 	msr	BASEPRI, r0
 800402e:	f7ff f847 	bl	80030c0 <vTaskSwitchContext>
 8004032:	f04f 0000 	mov.w	r0, #0
 8004036:	f380 8811 	msr	BASEPRI, r0
 800403a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800403e:	6819      	ldr	r1, [r3, #0]
 8004040:	6808      	ldr	r0, [r1, #0]
 8004042:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004046:	f380 8809 	msr	PSP, r0
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	4770      	bx	lr

08004050 <pxCurrentTCBConst>:
 8004050:	200007d4 	.word	0x200007d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop

08004058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
	__asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	607b      	str	r3, [r7, #4]
}
 8004070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004072:	f7fe ff67 	bl	8002f44 <xTaskIncrementTick>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800407c:	4b06      	ldr	r3, [pc, #24]	; (8004098 <SysTick_Handler+0x40>)
 800407e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	2300      	movs	r3, #0
 8004086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	f383 8811 	msr	BASEPRI, r3
}
 800408e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004090:	bf00      	nop
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	e000ed04 	.word	0xe000ed04

0800409c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80040a0:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <vPortSetupTimerInterrupt+0x30>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040a6:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <vPortSetupTimerInterrupt+0x34>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040ac:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <vPortSetupTimerInterrupt+0x38>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a09      	ldr	r2, [pc, #36]	; (80040d8 <vPortSetupTimerInterrupt+0x3c>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	099b      	lsrs	r3, r3, #6
 80040b8:	4a08      	ldr	r2, [pc, #32]	; (80040dc <vPortSetupTimerInterrupt+0x40>)
 80040ba:	3b01      	subs	r3, #1
 80040bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80040be:	4b03      	ldr	r3, [pc, #12]	; (80040cc <vPortSetupTimerInterrupt+0x30>)
 80040c0:	2207      	movs	r2, #7
 80040c2:	601a      	str	r2, [r3, #0]
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr
 80040cc:	e000e010 	.word	0xe000e010
 80040d0:	e000e018 	.word	0xe000e018
 80040d4:	20000000 	.word	0x20000000
 80040d8:	10624dd3 	.word	0x10624dd3
 80040dc:	e000e014 	.word	0xe000e014

080040e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80040e6:	f3ef 8305 	mrs	r3, IPSR
 80040ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b0f      	cmp	r3, #15
 80040f0:	d914      	bls.n	800411c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80040f2:	4a16      	ldr	r2, [pc, #88]	; (800414c <vPortValidateInterruptPriority+0x6c>)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4413      	add	r3, r2
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80040fc:	4b14      	ldr	r3, [pc, #80]	; (8004150 <vPortValidateInterruptPriority+0x70>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	7afa      	ldrb	r2, [r7, #11]
 8004102:	429a      	cmp	r2, r3
 8004104:	d20a      	bcs.n	800411c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	607b      	str	r3, [r7, #4]
}
 8004118:	bf00      	nop
 800411a:	e7fe      	b.n	800411a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800411c:	4b0d      	ldr	r3, [pc, #52]	; (8004154 <vPortValidateInterruptPriority+0x74>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004124:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <vPortValidateInterruptPriority+0x78>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d90a      	bls.n	8004142 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	603b      	str	r3, [r7, #0]
}
 800413e:	bf00      	nop
 8004140:	e7fe      	b.n	8004140 <vPortValidateInterruptPriority+0x60>
	}
 8004142:	bf00      	nop
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr
 800414c:	e000e3f0 	.word	0xe000e3f0
 8004150:	20000e00 	.word	0x20000e00
 8004154:	e000ed0c 	.word	0xe000ed0c
 8004158:	20000e04 	.word	0x20000e04

0800415c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08a      	sub	sp, #40	; 0x28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004164:	2300      	movs	r3, #0
 8004166:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004168:	f7fe fe32 	bl	8002dd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800416c:	4b58      	ldr	r3, [pc, #352]	; (80042d0 <pvPortMalloc+0x174>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004174:	f000 f910 	bl	8004398 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004178:	4b56      	ldr	r3, [pc, #344]	; (80042d4 <pvPortMalloc+0x178>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4013      	ands	r3, r2
 8004180:	2b00      	cmp	r3, #0
 8004182:	f040 808e 	bne.w	80042a2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d01d      	beq.n	80041c8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800418c:	2208      	movs	r2, #8
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4413      	add	r3, r2
 8004192:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	2b00      	cmp	r3, #0
 800419c:	d014      	beq.n	80041c8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f023 0307 	bic.w	r3, r3, #7
 80041a4:	3308      	adds	r3, #8
 80041a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <pvPortMalloc+0x6c>
	__asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	617b      	str	r3, [r7, #20]
}
 80041c4:	bf00      	nop
 80041c6:	e7fe      	b.n	80041c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d069      	beq.n	80042a2 <pvPortMalloc+0x146>
 80041ce:	4b42      	ldr	r3, [pc, #264]	; (80042d8 <pvPortMalloc+0x17c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d864      	bhi.n	80042a2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80041d8:	4b40      	ldr	r3, [pc, #256]	; (80042dc <pvPortMalloc+0x180>)
 80041da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80041dc:	4b3f      	ldr	r3, [pc, #252]	; (80042dc <pvPortMalloc+0x180>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041e2:	e004      	b.n	80041ee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d903      	bls.n	8004200 <pvPortMalloc+0xa4>
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1f1      	bne.n	80041e4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004200:	4b33      	ldr	r3, [pc, #204]	; (80042d0 <pvPortMalloc+0x174>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004206:	429a      	cmp	r2, r3
 8004208:	d04b      	beq.n	80042a2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2208      	movs	r2, #8
 8004210:	4413      	add	r3, r2
 8004212:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	1ad2      	subs	r2, r2, r3
 8004224:	2308      	movs	r3, #8
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	429a      	cmp	r2, r3
 800422a:	d91f      	bls.n	800426c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800422c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4413      	add	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <pvPortMalloc+0xf8>
	__asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	613b      	str	r3, [r7, #16]
}
 8004250:	bf00      	nop
 8004252:	e7fe      	b.n	8004252 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	1ad2      	subs	r2, r2, r3
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004266:	69b8      	ldr	r0, [r7, #24]
 8004268:	f000 f8f8 	bl	800445c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800426c:	4b1a      	ldr	r3, [pc, #104]	; (80042d8 <pvPortMalloc+0x17c>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	4a18      	ldr	r2, [pc, #96]	; (80042d8 <pvPortMalloc+0x17c>)
 8004278:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800427a:	4b17      	ldr	r3, [pc, #92]	; (80042d8 <pvPortMalloc+0x17c>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	4b18      	ldr	r3, [pc, #96]	; (80042e0 <pvPortMalloc+0x184>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d203      	bcs.n	800428e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004286:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <pvPortMalloc+0x17c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a15      	ldr	r2, [pc, #84]	; (80042e0 <pvPortMalloc+0x184>)
 800428c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <pvPortMalloc+0x178>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	431a      	orrs	r2, r3
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80042a2:	f7fe fda3 	bl	8002dec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00a      	beq.n	80042c6 <pvPortMalloc+0x16a>
	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	60fb      	str	r3, [r7, #12]
}
 80042c2:	bf00      	nop
 80042c4:	e7fe      	b.n	80042c4 <pvPortMalloc+0x168>
	return pvReturn;
 80042c6:	69fb      	ldr	r3, [r7, #28]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3728      	adds	r7, #40	; 0x28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	20001a10 	.word	0x20001a10
 80042d4:	20001a1c 	.word	0x20001a1c
 80042d8:	20001a14 	.word	0x20001a14
 80042dc:	20001a08 	.word	0x20001a08
 80042e0:	20001a18 	.word	0x20001a18

080042e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d048      	beq.n	8004388 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80042f6:	2308      	movs	r3, #8
 80042f8:	425b      	negs	r3, r3
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	4413      	add	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	4b21      	ldr	r3, [pc, #132]	; (8004390 <vPortFree+0xac>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4013      	ands	r3, r2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <vPortFree+0x44>
	__asm volatile
 8004312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	60fb      	str	r3, [r7, #12]
}
 8004324:	bf00      	nop
 8004326:	e7fe      	b.n	8004326 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00a      	beq.n	8004346 <vPortFree+0x62>
	__asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	60bb      	str	r3, [r7, #8]
}
 8004342:	bf00      	nop
 8004344:	e7fe      	b.n	8004344 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	4b11      	ldr	r3, [pc, #68]	; (8004390 <vPortFree+0xac>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4013      	ands	r3, r2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d019      	beq.n	8004388 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d115      	bne.n	8004388 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <vPortFree+0xac>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	43db      	mvns	r3, r3
 8004366:	401a      	ands	r2, r3
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800436c:	f7fe fd30 	bl	8002dd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	4b07      	ldr	r3, [pc, #28]	; (8004394 <vPortFree+0xb0>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4413      	add	r3, r2
 800437a:	4a06      	ldr	r2, [pc, #24]	; (8004394 <vPortFree+0xb0>)
 800437c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800437e:	6938      	ldr	r0, [r7, #16]
 8004380:	f000 f86c 	bl	800445c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004384:	f7fe fd32 	bl	8002dec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004388:	bf00      	nop
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20001a1c 	.word	0x20001a1c
 8004394:	20001a14 	.word	0x20001a14

08004398 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800439e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80043a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80043a4:	4b27      	ldr	r3, [pc, #156]	; (8004444 <prvHeapInit+0xac>)
 80043a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00c      	beq.n	80043cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3307      	adds	r3, #7
 80043b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0307 	bic.w	r3, r3, #7
 80043be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	4a1f      	ldr	r2, [pc, #124]	; (8004444 <prvHeapInit+0xac>)
 80043c8:	4413      	add	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80043d0:	4a1d      	ldr	r2, [pc, #116]	; (8004448 <prvHeapInit+0xb0>)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80043d6:	4b1c      	ldr	r3, [pc, #112]	; (8004448 <prvHeapInit+0xb0>)
 80043d8:	2200      	movs	r2, #0
 80043da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	4413      	add	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80043e4:	2208      	movs	r2, #8
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	1a9b      	subs	r3, r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0307 	bic.w	r3, r3, #7
 80043f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4a15      	ldr	r2, [pc, #84]	; (800444c <prvHeapInit+0xb4>)
 80043f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80043fa:	4b14      	ldr	r3, [pc, #80]	; (800444c <prvHeapInit+0xb4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2200      	movs	r2, #0
 8004400:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <prvHeapInit+0xb4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	1ad2      	subs	r2, r2, r3
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004418:	4b0c      	ldr	r3, [pc, #48]	; (800444c <prvHeapInit+0xb4>)
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4a0a      	ldr	r2, [pc, #40]	; (8004450 <prvHeapInit+0xb8>)
 8004426:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	4a09      	ldr	r2, [pc, #36]	; (8004454 <prvHeapInit+0xbc>)
 800442e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004430:	4b09      	ldr	r3, [pc, #36]	; (8004458 <prvHeapInit+0xc0>)
 8004432:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004436:	601a      	str	r2, [r3, #0]
}
 8004438:	bf00      	nop
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	20000e08 	.word	0x20000e08
 8004448:	20001a08 	.word	0x20001a08
 800444c:	20001a10 	.word	0x20001a10
 8004450:	20001a18 	.word	0x20001a18
 8004454:	20001a14 	.word	0x20001a14
 8004458:	20001a1c 	.word	0x20001a1c

0800445c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004464:	4b27      	ldr	r3, [pc, #156]	; (8004504 <prvInsertBlockIntoFreeList+0xa8>)
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	e002      	b.n	8004470 <prvInsertBlockIntoFreeList+0x14>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	429a      	cmp	r2, r3
 8004478:	d8f7      	bhi.n	800446a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	4413      	add	r3, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	429a      	cmp	r2, r3
 800448a:	d108      	bne.n	800449e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	441a      	add	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	441a      	add	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d118      	bne.n	80044e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	4b14      	ldr	r3, [pc, #80]	; (8004508 <prvInsertBlockIntoFreeList+0xac>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d00d      	beq.n	80044da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	441a      	add	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	e008      	b.n	80044ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80044da:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <prvInsertBlockIntoFreeList+0xac>)
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	e003      	b.n	80044ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d002      	beq.n	80044fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044fa:	bf00      	nop
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr
 8004504:	20001a08 	.word	0x20001a08
 8004508:	20001a10 	.word	0x20001a10

0800450c <memset>:
 800450c:	4603      	mov	r3, r0
 800450e:	4402      	add	r2, r0
 8004510:	4293      	cmp	r3, r2
 8004512:	d100      	bne.n	8004516 <memset+0xa>
 8004514:	4770      	bx	lr
 8004516:	f803 1b01 	strb.w	r1, [r3], #1
 800451a:	e7f9      	b.n	8004510 <memset+0x4>

0800451c <__libc_init_array>:
 800451c:	b570      	push	{r4, r5, r6, lr}
 800451e:	2600      	movs	r6, #0
 8004520:	4d0c      	ldr	r5, [pc, #48]	; (8004554 <__libc_init_array+0x38>)
 8004522:	4c0d      	ldr	r4, [pc, #52]	; (8004558 <__libc_init_array+0x3c>)
 8004524:	1b64      	subs	r4, r4, r5
 8004526:	10a4      	asrs	r4, r4, #2
 8004528:	42a6      	cmp	r6, r4
 800452a:	d109      	bne.n	8004540 <__libc_init_array+0x24>
 800452c:	f000 f828 	bl	8004580 <_init>
 8004530:	2600      	movs	r6, #0
 8004532:	4d0a      	ldr	r5, [pc, #40]	; (800455c <__libc_init_array+0x40>)
 8004534:	4c0a      	ldr	r4, [pc, #40]	; (8004560 <__libc_init_array+0x44>)
 8004536:	1b64      	subs	r4, r4, r5
 8004538:	10a4      	asrs	r4, r4, #2
 800453a:	42a6      	cmp	r6, r4
 800453c:	d105      	bne.n	800454a <__libc_init_array+0x2e>
 800453e:	bd70      	pop	{r4, r5, r6, pc}
 8004540:	f855 3b04 	ldr.w	r3, [r5], #4
 8004544:	4798      	blx	r3
 8004546:	3601      	adds	r6, #1
 8004548:	e7ee      	b.n	8004528 <__libc_init_array+0xc>
 800454a:	f855 3b04 	ldr.w	r3, [r5], #4
 800454e:	4798      	blx	r3
 8004550:	3601      	adds	r6, #1
 8004552:	e7f2      	b.n	800453a <__libc_init_array+0x1e>
 8004554:	080046d8 	.word	0x080046d8
 8004558:	080046d8 	.word	0x080046d8
 800455c:	080046d8 	.word	0x080046d8
 8004560:	080046dc 	.word	0x080046dc

08004564 <memcpy>:
 8004564:	440a      	add	r2, r1
 8004566:	4291      	cmp	r1, r2
 8004568:	f100 33ff 	add.w	r3, r0, #4294967295
 800456c:	d100      	bne.n	8004570 <memcpy+0xc>
 800456e:	4770      	bx	lr
 8004570:	b510      	push	{r4, lr}
 8004572:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004576:	4291      	cmp	r1, r2
 8004578:	f803 4f01 	strb.w	r4, [r3, #1]!
 800457c:	d1f9      	bne.n	8004572 <memcpy+0xe>
 800457e:	bd10      	pop	{r4, pc}

08004580 <_init>:
 8004580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004582:	bf00      	nop
 8004584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004586:	bc08      	pop	{r3}
 8004588:	469e      	mov	lr, r3
 800458a:	4770      	bx	lr

0800458c <_fini>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	bf00      	nop
 8004590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004592:	bc08      	pop	{r3}
 8004594:	469e      	mov	lr, r3
 8004596:	4770      	bx	lr
