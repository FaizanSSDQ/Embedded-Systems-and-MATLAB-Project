
STM_NRF_F1_Rec.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002874  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002980  08002980  00012980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029bc  080029bc  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080029bc  080029bc  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029bc  080029bc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029bc  080029bc  000129bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029c0  080029c0  000129c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080029c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000014  080029d8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080029d8  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008af4  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017bd  00000000  00000000  00028b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000880  00000000  00000000  0002a338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000683  00000000  00000000  0002abb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d6a  00000000  00000000  0002b23b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009cfa  00000000  00000000  00041fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083359  00000000  00000000  0004bc9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000021c8  00000000  00000000  000ceff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000d11c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08002968 	.word	0x08002968

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08002968 	.word	0x08002968

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_1


void CS_Select (void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000160:	2200      	movs	r2, #0
 8000162:	2102      	movs	r1, #2
 8000164:	4802      	ldr	r0, [pc, #8]	; (8000170 <CS_Select+0x14>)
 8000166:	f001 f817 	bl	8001198 <HAL_GPIO_WritePin>
}
 800016a:	bf00      	nop
 800016c:	bd80      	pop	{r7, pc}
 800016e:	bf00      	nop
 8000170:	40010c00 	.word	0x40010c00

08000174 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000178:	2201      	movs	r2, #1
 800017a:	2102      	movs	r1, #2
 800017c:	4802      	ldr	r0, [pc, #8]	; (8000188 <CS_UnSelect+0x14>)
 800017e:	f001 f80b 	bl	8001198 <HAL_GPIO_WritePin>
}
 8000182:	bf00      	nop
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	40010c00 	.word	0x40010c00

0800018c <CE_Enable>:


void CE_Enable (void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2104      	movs	r1, #4
 8000194:	4802      	ldr	r0, [pc, #8]	; (80001a0 <CE_Enable+0x14>)
 8000196:	f000 ffff 	bl	8001198 <HAL_GPIO_WritePin>
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010c00 	.word	0x40010c00

080001a4 <CE_Disable>:

void CE_Disable (void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	2104      	movs	r1, #4
 80001ac:	4802      	ldr	r0, [pc, #8]	; (80001b8 <CE_Disable+0x14>)
 80001ae:	f000 fff3 	bl	8001198 <HAL_GPIO_WritePin>
}
 80001b2:	bf00      	nop
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	40010c00 	.word	0x40010c00

080001bc <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b084      	sub	sp, #16
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	4603      	mov	r3, r0
 80001c4:	460a      	mov	r2, r1
 80001c6:	71fb      	strb	r3, [r7, #7]
 80001c8:	4613      	mov	r3, r2
 80001ca:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80001cc:	79fb      	ldrb	r3, [r7, #7]
 80001ce:	f043 0320 	orr.w	r3, r3, #32
 80001d2:	b2db      	uxtb	r3, r3
 80001d4:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 80001d6:	79bb      	ldrb	r3, [r7, #6]
 80001d8:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80001da:	f7ff ffbf 	bl	800015c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80001de:	f107 010c 	add.w	r1, r7, #12
 80001e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e6:	2202      	movs	r2, #2
 80001e8:	4804      	ldr	r0, [pc, #16]	; (80001fc <nrf24_WriteReg+0x40>)
 80001ea:	f001 fcbd 	bl	8001b68 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80001ee:	f7ff ffc1 	bl	8000174 <CS_UnSelect>
}
 80001f2:	bf00      	nop
 80001f4:	3710      	adds	r7, #16
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	20000030 	.word	0x20000030

08000200 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	60b9      	str	r1, [r7, #8]
 800020a:	607a      	str	r2, [r7, #4]
 800020c:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800020e:	7bfb      	ldrb	r3, [r7, #15]
 8000210:	f043 0320 	orr.w	r3, r3, #32
 8000214:	b2db      	uxtb	r3, r3
 8000216:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000218:	f7ff ffa0 	bl	800015c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 800021c:	f107 0114 	add.w	r1, r7, #20
 8000220:	2364      	movs	r3, #100	; 0x64
 8000222:	2201      	movs	r2, #1
 8000224:	4808      	ldr	r0, [pc, #32]	; (8000248 <nrf24_WriteRegMulti+0x48>)
 8000226:	f001 fc9f 	bl	8001b68 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	b29a      	uxth	r2, r3
 800022e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000232:	68b9      	ldr	r1, [r7, #8]
 8000234:	4804      	ldr	r0, [pc, #16]	; (8000248 <nrf24_WriteRegMulti+0x48>)
 8000236:	f001 fc97 	bl	8001b68 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800023a:	f7ff ff9b 	bl	8000174 <CS_UnSelect>
}
 800023e:	bf00      	nop
 8000240:	3718      	adds	r7, #24
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	20000030 	.word	0x20000030

0800024c <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b084      	sub	sp, #16
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000256:	2300      	movs	r3, #0
 8000258:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800025a:	f7ff ff7f 	bl	800015c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800025e:	1df9      	adds	r1, r7, #7
 8000260:	2364      	movs	r3, #100	; 0x64
 8000262:	2201      	movs	r2, #1
 8000264:	4808      	ldr	r0, [pc, #32]	; (8000288 <nrf24_ReadReg+0x3c>)
 8000266:	f001 fc7f 	bl	8001b68 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 800026a:	f107 010f 	add.w	r1, r7, #15
 800026e:	2364      	movs	r3, #100	; 0x64
 8000270:	2201      	movs	r2, #1
 8000272:	4805      	ldr	r0, [pc, #20]	; (8000288 <nrf24_ReadReg+0x3c>)
 8000274:	f001 fdbb 	bl	8001dee <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000278:	f7ff ff7c 	bl	8000174 <CS_UnSelect>

	return data;
 800027c:	7bfb      	ldrb	r3, [r7, #15]
}
 800027e:	4618      	mov	r0, r3
 8000280:	3710      	adds	r7, #16
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	20000030 	.word	0x20000030

0800028c <nrf24_ReadReg_Multi>:


/* Read multiple bytes from the register */
void nrf24_ReadReg_Multi (uint8_t Reg, uint8_t *data, int size)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	60b9      	str	r1, [r7, #8]
 8000296:	607a      	str	r2, [r7, #4]
 8000298:	73fb      	strb	r3, [r7, #15]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 800029a:	f7ff ff5f 	bl	800015c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 800029e:	f107 010f 	add.w	r1, r7, #15
 80002a2:	2364      	movs	r3, #100	; 0x64
 80002a4:	2201      	movs	r2, #1
 80002a6:	4808      	ldr	r0, [pc, #32]	; (80002c8 <nrf24_ReadReg_Multi+0x3c>)
 80002a8:	f001 fc5e 	bl	8001b68 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, data, size, 1000);
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	b29a      	uxth	r2, r3
 80002b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002b4:	68b9      	ldr	r1, [r7, #8]
 80002b6:	4804      	ldr	r0, [pc, #16]	; (80002c8 <nrf24_ReadReg_Multi+0x3c>)
 80002b8:	f001 fd99 	bl	8001dee <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80002bc:	f7ff ff5a 	bl	8000174 <CS_UnSelect>
}
 80002c0:	bf00      	nop
 80002c2:	3710      	adds	r7, #16
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000030 	.word	0x20000030

080002cc <nrfsendCmd>:


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 80002d6:	f7ff ff41 	bl	800015c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 80002da:	1df9      	adds	r1, r7, #7
 80002dc:	2364      	movs	r3, #100	; 0x64
 80002de:	2201      	movs	r2, #1
 80002e0:	4804      	ldr	r0, [pc, #16]	; (80002f4 <nrfsendCmd+0x28>)
 80002e2:	f001 fc41 	bl	8001b68 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80002e6:	f7ff ff45 	bl	8000174 <CS_UnSelect>
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000030 	.word	0x20000030

080002f8 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b088      	sub	sp, #32
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	2b07      	cmp	r3, #7
 8000306:	d104      	bne.n	8000312 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000308:	2100      	movs	r1, #0
 800030a:	2007      	movs	r0, #7
 800030c:	f7ff ff56 	bl	80001bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000310:	e090      	b.n	8000434 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	2b17      	cmp	r3, #23
 8000316:	d104      	bne.n	8000322 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000318:	2111      	movs	r1, #17
 800031a:	2017      	movs	r0, #23
 800031c:	f7ff ff4e 	bl	80001bc <nrf24_WriteReg>
}
 8000320:	e088      	b.n	8000434 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8000322:	2108      	movs	r1, #8
 8000324:	2000      	movs	r0, #0
 8000326:	f7ff ff49 	bl	80001bc <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 800032a:	213f      	movs	r1, #63	; 0x3f
 800032c:	2001      	movs	r0, #1
 800032e:	f7ff ff45 	bl	80001bc <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8000332:	2103      	movs	r1, #3
 8000334:	2002      	movs	r0, #2
 8000336:	f7ff ff41 	bl	80001bc <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 800033a:	2103      	movs	r1, #3
 800033c:	2003      	movs	r0, #3
 800033e:	f7ff ff3d 	bl	80001bc <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8000342:	2103      	movs	r1, #3
 8000344:	2004      	movs	r0, #4
 8000346:	f7ff ff39 	bl	80001bc <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 800034a:	2102      	movs	r1, #2
 800034c:	2005      	movs	r0, #5
 800034e:	f7ff ff35 	bl	80001bc <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000352:	210e      	movs	r1, #14
 8000354:	2006      	movs	r0, #6
 8000356:	f7ff ff31 	bl	80001bc <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 800035a:	2100      	movs	r1, #0
 800035c:	2007      	movs	r0, #7
 800035e:	f7ff ff2d 	bl	80001bc <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000362:	2100      	movs	r1, #0
 8000364:	2008      	movs	r0, #8
 8000366:	f7ff ff29 	bl	80001bc <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 800036a:	2100      	movs	r1, #0
 800036c:	2009      	movs	r0, #9
 800036e:	f7ff ff25 	bl	80001bc <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000372:	4a32      	ldr	r2, [pc, #200]	; (800043c <nrf24_reset+0x144>)
 8000374:	f107 0318 	add.w	r3, r7, #24
 8000378:	e892 0003 	ldmia.w	r2, {r0, r1}
 800037c:	6018      	str	r0, [r3, #0]
 800037e:	3304      	adds	r3, #4
 8000380:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000382:	f107 0318 	add.w	r3, r7, #24
 8000386:	2205      	movs	r2, #5
 8000388:	4619      	mov	r1, r3
 800038a:	200a      	movs	r0, #10
 800038c:	f7ff ff38 	bl	8000200 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000390:	4a2b      	ldr	r2, [pc, #172]	; (8000440 <nrf24_reset+0x148>)
 8000392:	f107 0310 	add.w	r3, r7, #16
 8000396:	e892 0003 	ldmia.w	r2, {r0, r1}
 800039a:	6018      	str	r0, [r3, #0]
 800039c:	3304      	adds	r3, #4
 800039e:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 80003a0:	f107 0310 	add.w	r3, r7, #16
 80003a4:	2205      	movs	r2, #5
 80003a6:	4619      	mov	r1, r3
 80003a8:	200b      	movs	r0, #11
 80003aa:	f7ff ff29 	bl	8000200 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 80003ae:	21c3      	movs	r1, #195	; 0xc3
 80003b0:	200c      	movs	r0, #12
 80003b2:	f7ff ff03 	bl	80001bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80003b6:	21c4      	movs	r1, #196	; 0xc4
 80003b8:	200d      	movs	r0, #13
 80003ba:	f7ff feff 	bl	80001bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80003be:	21c5      	movs	r1, #197	; 0xc5
 80003c0:	200e      	movs	r0, #14
 80003c2:	f7ff fefb 	bl	80001bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80003c6:	21c6      	movs	r1, #198	; 0xc6
 80003c8:	200f      	movs	r0, #15
 80003ca:	f7ff fef7 	bl	80001bc <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80003ce:	4a1b      	ldr	r2, [pc, #108]	; (800043c <nrf24_reset+0x144>)
 80003d0:	f107 0308 	add.w	r3, r7, #8
 80003d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003d8:	6018      	str	r0, [r3, #0]
 80003da:	3304      	adds	r3, #4
 80003dc:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 80003de:	f107 0308 	add.w	r3, r7, #8
 80003e2:	2205      	movs	r2, #5
 80003e4:	4619      	mov	r1, r3
 80003e6:	2010      	movs	r0, #16
 80003e8:	f7ff ff0a 	bl	8000200 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 80003ec:	2100      	movs	r1, #0
 80003ee:	2011      	movs	r0, #17
 80003f0:	f7ff fee4 	bl	80001bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 80003f4:	2100      	movs	r1, #0
 80003f6:	2012      	movs	r0, #18
 80003f8:	f7ff fee0 	bl	80001bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 80003fc:	2100      	movs	r1, #0
 80003fe:	2013      	movs	r0, #19
 8000400:	f7ff fedc 	bl	80001bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000404:	2100      	movs	r1, #0
 8000406:	2014      	movs	r0, #20
 8000408:	f7ff fed8 	bl	80001bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 800040c:	2100      	movs	r1, #0
 800040e:	2015      	movs	r0, #21
 8000410:	f7ff fed4 	bl	80001bc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000414:	2100      	movs	r1, #0
 8000416:	2016      	movs	r0, #22
 8000418:	f7ff fed0 	bl	80001bc <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 800041c:	2111      	movs	r1, #17
 800041e:	2017      	movs	r0, #23
 8000420:	f7ff fecc 	bl	80001bc <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8000424:	2100      	movs	r1, #0
 8000426:	201c      	movs	r0, #28
 8000428:	f7ff fec8 	bl	80001bc <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 800042c:	2100      	movs	r1, #0
 800042e:	201d      	movs	r0, #29
 8000430:	f7ff fec4 	bl	80001bc <nrf24_WriteReg>
}
 8000434:	bf00      	nop
 8000436:	3720      	adds	r7, #32
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	08002980 	.word	0x08002980
 8000440:	08002988 	.word	0x08002988

08000444 <NRF24_Init>:




void NRF24_Init (void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8000448:	f7ff feac 	bl	80001a4 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 800044c:	2000      	movs	r0, #0
 800044e:	f7ff ff53 	bl	80002f8 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8000452:	2100      	movs	r1, #0
 8000454:	2000      	movs	r0, #0
 8000456:	f7ff feb1 	bl	80001bc <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 800045a:	2100      	movs	r1, #0
 800045c:	2001      	movs	r0, #1
 800045e:	f7ff fead 	bl	80001bc <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8000462:	2100      	movs	r1, #0
 8000464:	2002      	movs	r0, #2
 8000466:	f7ff fea9 	bl	80001bc <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800046a:	2103      	movs	r1, #3
 800046c:	2003      	movs	r0, #3
 800046e:	f7ff fea5 	bl	80001bc <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 8000472:	2100      	movs	r1, #0
 8000474:	2004      	movs	r0, #4
 8000476:	f7ff fea1 	bl	80001bc <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800047a:	2100      	movs	r1, #0
 800047c:	2005      	movs	r0, #5
 800047e:	f7ff fe9d 	bl	80001bc <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 8000482:	210e      	movs	r1, #14
 8000484:	2006      	movs	r0, #6
 8000486:	f7ff fe99 	bl	80001bc <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800048a:	f7ff fe7f 	bl	800018c <CE_Enable>

}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}

08000492 <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8000492:	b580      	push	{r7, lr}
 8000494:	b084      	sub	sp, #16
 8000496:	af00      	add	r7, sp, #0
 8000498:	6078      	str	r0, [r7, #4]
 800049a:	460b      	mov	r3, r1
 800049c:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800049e:	f7ff fe81 	bl	80001a4 <CE_Disable>

	nrf24_reset (STATUS);
 80004a2:	2007      	movs	r0, #7
 80004a4:	f7ff ff28 	bl	80002f8 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 80004a8:	78fb      	ldrb	r3, [r7, #3]
 80004aa:	4619      	mov	r1, r3
 80004ac:	2005      	movs	r0, #5
 80004ae:	f7ff fe85 	bl	80001bc <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 80004b2:	2002      	movs	r0, #2
 80004b4:	f7ff feca 	bl	800024c <nrf24_ReadReg>
 80004b8:	4603      	mov	r3, r0
 80004ba:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 80004bc:	7bfb      	ldrb	r3, [r7, #15]
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 80004c4:	7bfb      	ldrb	r3, [r7, #15]
 80004c6:	4619      	mov	r1, r3
 80004c8:	2002      	movs	r0, #2
 80004ca:	f7ff fe77 	bl	80001bc <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 80004ce:	2205      	movs	r2, #5
 80004d0:	6879      	ldr	r1, [r7, #4]
 80004d2:	200b      	movs	r0, #11
 80004d4:	f7ff fe94 	bl	8000200 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 80004d8:	21ee      	movs	r1, #238	; 0xee
 80004da:	200c      	movs	r0, #12
 80004dc:	f7ff fe6e 	bl	80001bc <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 80004e0:	2120      	movs	r1, #32
 80004e2:	2013      	movs	r0, #19
 80004e4:	f7ff fe6a 	bl	80001bc <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f7ff feaf 	bl	800024c <nrf24_ReadReg>
 80004ee:	4603      	mov	r3, r0
 80004f0:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 80004f2:	7bbb      	ldrb	r3, [r7, #14]
 80004f4:	f043 0303 	orr.w	r3, r3, #3
 80004f8:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 80004fa:	7bbb      	ldrb	r3, [r7, #14]
 80004fc:	4619      	mov	r1, r3
 80004fe:	2000      	movs	r0, #0
 8000500:	f7ff fe5c 	bl	80001bc <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000504:	f7ff fe42 	bl	800018c <CE_Enable>
}
 8000508:	bf00      	nop
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8000518:	2007      	movs	r0, #7
 800051a:	f7ff fe97 	bl	800024c <nrf24_ReadReg>
 800051e:	4603      	mov	r3, r0
 8000520:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 8000522:	7bfb      	ldrb	r3, [r7, #15]
 8000524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000528:	2b00      	cmp	r3, #0
 800052a:	d00b      	beq.n	8000544 <isDataAvailable+0x34>
 800052c:	7bfa      	ldrb	r2, [r7, #15]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	4013      	ands	r3, r2
 8000534:	2b00      	cmp	r3, #0
 8000536:	d005      	beq.n	8000544 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8000538:	2140      	movs	r1, #64	; 0x40
 800053a:	2007      	movs	r0, #7
 800053c:	f7ff fe3e 	bl	80001bc <nrf24_WriteReg>

		return 1;
 8000540:	2301      	movs	r3, #1
 8000542:	e000      	b.n	8000546 <isDataAvailable+0x36>
	}

	return 0;
 8000544:	2300      	movs	r3, #0
}
 8000546:	4618      	mov	r0, r3
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
	...

08000550 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 800055c:	f7ff fdfe 	bl	800015c <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8000560:	2361      	movs	r3, #97	; 0x61
 8000562:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8000564:	f107 010f 	add.w	r1, r7, #15
 8000568:	2364      	movs	r3, #100	; 0x64
 800056a:	2201      	movs	r2, #1
 800056c:	480c      	ldr	r0, [pc, #48]	; (80005a0 <NRF24_Receive+0x50>)
 800056e:	f001 fafb 	bl	8001b68 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8000572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000576:	2220      	movs	r2, #32
 8000578:	6879      	ldr	r1, [r7, #4]
 800057a:	4809      	ldr	r0, [pc, #36]	; (80005a0 <NRF24_Receive+0x50>)
 800057c:	f001 fc37 	bl	8001dee <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8000580:	f7ff fdf8 	bl	8000174 <CS_UnSelect>

	HAL_Delay(1);
 8000584:	2001      	movs	r0, #1
 8000586:	f000 fb51 	bl	8000c2c <HAL_Delay>

	cmdtosend = FLUSH_RX;
 800058a:	23e2      	movs	r3, #226	; 0xe2
 800058c:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff fe9b 	bl	80002cc <nrfsendCmd>
}
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000030 	.word	0x20000030

080005a4 <NRF24_ReadAll>:



// Read all the Register data
void NRF24_ReadAll (uint8_t *data)
{
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	for (int i=0; i<10; i++)
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	e00c      	b.n	80005cc <NRF24_ReadAll+0x28>
	{
		*(data+i) = nrf24_ReadReg(i);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	b2d9      	uxtb	r1, r3
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	18d4      	adds	r4, r2, r3
 80005bc:	4608      	mov	r0, r1
 80005be:	f7ff fe45 	bl	800024c <nrf24_ReadReg>
 80005c2:	4603      	mov	r3, r0
 80005c4:	7023      	strb	r3, [r4, #0]
	for (int i=0; i<10; i++)
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	3301      	adds	r3, #1
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	2b09      	cmp	r3, #9
 80005d0:	ddef      	ble.n	80005b2 <NRF24_ReadAll+0xe>
	}

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+10), 5);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	330a      	adds	r3, #10
 80005d6:	2205      	movs	r2, #5
 80005d8:	4619      	mov	r1, r3
 80005da:	200a      	movs	r0, #10
 80005dc:	f7ff fe56 	bl	800028c <nrf24_ReadReg_Multi>

	nrf24_ReadReg_Multi(RX_ADDR_P1, (data+15), 5);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	330f      	adds	r3, #15
 80005e4:	2205      	movs	r2, #5
 80005e6:	4619      	mov	r1, r3
 80005e8:	200b      	movs	r0, #11
 80005ea:	f7ff fe4f 	bl	800028c <nrf24_ReadReg_Multi>

	*(data+20) = nrf24_ReadReg(RX_ADDR_P2);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f103 0414 	add.w	r4, r3, #20
 80005f4:	200c      	movs	r0, #12
 80005f6:	f7ff fe29 	bl	800024c <nrf24_ReadReg>
 80005fa:	4603      	mov	r3, r0
 80005fc:	7023      	strb	r3, [r4, #0]
	*(data+21) = nrf24_ReadReg(RX_ADDR_P3);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f103 0415 	add.w	r4, r3, #21
 8000604:	200d      	movs	r0, #13
 8000606:	f7ff fe21 	bl	800024c <nrf24_ReadReg>
 800060a:	4603      	mov	r3, r0
 800060c:	7023      	strb	r3, [r4, #0]
	*(data+22) = nrf24_ReadReg(RX_ADDR_P4);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f103 0416 	add.w	r4, r3, #22
 8000614:	200e      	movs	r0, #14
 8000616:	f7ff fe19 	bl	800024c <nrf24_ReadReg>
 800061a:	4603      	mov	r3, r0
 800061c:	7023      	strb	r3, [r4, #0]
	*(data+23) = nrf24_ReadReg(RX_ADDR_P5);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f103 0417 	add.w	r4, r3, #23
 8000624:	200f      	movs	r0, #15
 8000626:	f7ff fe11 	bl	800024c <nrf24_ReadReg>
 800062a:	4603      	mov	r3, r0
 800062c:	7023      	strb	r3, [r4, #0]

	nrf24_ReadReg_Multi(RX_ADDR_P0, (data+24), 5);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3318      	adds	r3, #24
 8000632:	2205      	movs	r2, #5
 8000634:	4619      	mov	r1, r3
 8000636:	200a      	movs	r0, #10
 8000638:	f7ff fe28 	bl	800028c <nrf24_ReadReg_Multi>

	for (int i=29; i<38; i++)
 800063c:	231d      	movs	r3, #29
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	e00e      	b.n	8000660 <NRF24_ReadAll+0xbc>
	{
		*(data+i) = nrf24_ReadReg(i-12);
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	b2db      	uxtb	r3, r3
 8000646:	3b0c      	subs	r3, #12
 8000648:	b2d9      	uxtb	r1, r3
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	18d4      	adds	r4, r2, r3
 8000650:	4608      	mov	r0, r1
 8000652:	f7ff fdfb 	bl	800024c <nrf24_ReadReg>
 8000656:	4603      	mov	r3, r0
 8000658:	7023      	strb	r3, [r4, #0]
	for (int i=29; i<38; i++)
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	3301      	adds	r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	2b25      	cmp	r3, #37	; 0x25
 8000664:	dded      	ble.n	8000642 <NRF24_ReadAll+0x9e>
	}

}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	bd90      	pop	{r4, r7, pc}

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000674:	f000 fa78 	bl	8000b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000678:	f000 f832 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067c:	f000 f8d2 	bl	8000824 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000680:	f000 f8a6 	bl	80007d0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000684:	f000 f86e 	bl	8000764 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */


  NRF24_Init();
 8000688:	f7ff fedc 	bl	8000444 <NRF24_Init>
  NRF24_RxMode(RxAddress, 10);
 800068c:	210a      	movs	r1, #10
 800068e:	480f      	ldr	r0, [pc, #60]	; (80006cc <main+0x5c>)
 8000690:	f7ff feff 	bl	8000492 <NRF24_RxMode>
  NRF24_ReadAll(data);
 8000694:	480e      	ldr	r0, [pc, #56]	; (80006d0 <main+0x60>)
 8000696:	f7ff ff85 	bl	80005a4 <NRF24_ReadAll>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (isDataAvailable(2) == 1)
 800069a:	2002      	movs	r0, #2
 800069c:	f7ff ff38 	bl	8000510 <isDataAvailable>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d1f9      	bne.n	800069a <main+0x2a>
		  {
			  NRF24_Receive(RxData);
 80006a6:	480b      	ldr	r0, [pc, #44]	; (80006d4 <main+0x64>)
 80006a8:	f7ff ff52 	bl	8000550 <NRF24_Receive>
			  HAL_UART_Transmit(&huart2, RxData, strlen((char *)RxData), 1000);
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <main+0x64>)
 80006ae:	f7ff fd4d 	bl	800014c <strlen>
 80006b2:	4603      	mov	r3, r0
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ba:	4906      	ldr	r1, [pc, #24]	; (80006d4 <main+0x64>)
 80006bc:	4806      	ldr	r0, [pc, #24]	; (80006d8 <main+0x68>)
 80006be:	f001 ffa7 	bl	8002610 <HAL_UART_Transmit>
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006c2:	2120      	movs	r1, #32
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <main+0x6c>)
 80006c6:	f000 fd7f 	bl	80011c8 <HAL_GPIO_TogglePin>
	  if (isDataAvailable(2) == 1)
 80006ca:	e7e6      	b.n	800069a <main+0x2a>
 80006cc:	20000000 	.word	0x20000000
 80006d0:	200000f0 	.word	0x200000f0
 80006d4:	200000d0 	.word	0x200000d0
 80006d8:	20000088 	.word	0x20000088
 80006dc:	40010800 	.word	0x40010800

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b090      	sub	sp, #64	; 0x40
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0318 	add.w	r3, r7, #24
 80006ea:	2228      	movs	r2, #40	; 0x28
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 f90e 	bl	8002910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000702:	2302      	movs	r3, #2
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000706:	2301      	movs	r3, #1
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070a:	2310      	movs	r3, #16
 800070c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070e:	2302      	movs	r3, #2
 8000710:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000712:	2300      	movs	r3, #0
 8000714:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000716:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800071a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0318 	add.w	r3, r7, #24
 8000720:	4618      	mov	r0, r3
 8000722:	f000 fd8d 	bl	8001240 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800072c:	f000 f8fe 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2302      	movs	r3, #2
 8000736:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2102      	movs	r1, #2
 800074a:	4618      	mov	r0, r3
 800074c:	f000 fffa 	bl	8001744 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000756:	f000 f8e9 	bl	800092c <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3740      	adds	r7, #64	; 0x40
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_SPI2_Init+0x64>)
 800076a:	4a18      	ldr	r2, [pc, #96]	; (80007cc <MX_SPI2_Init+0x68>)
 800076c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <MX_SPI2_Init+0x64>)
 8000770:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000774:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_SPI2_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_SPI2_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_SPI2_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_SPI2_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_SPI2_Init+0x64>)
 8000790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000794:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_SPI2_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_SPI2_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_SPI2_Init+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_SPI2_Init+0x64>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_SPI2_Init+0x64>)
 80007b0:	220a      	movs	r2, #10
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_SPI2_Init+0x64>)
 80007b6:	f001 f953 	bl	8001a60 <HAL_SPI_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80007c0:	f000 f8b4 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000030 	.word	0x20000030
 80007cc:	40003800 	.word	0x40003800

080007d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007d6:	4a12      	ldr	r2, [pc, #72]	; (8000820 <MX_USART2_UART_Init+0x50>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USART2_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USART2_UART_Init+0x4c>)
 8000808:	f001 feb2 	bl	8002570 <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000812:	f000 f88b 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000088 	.word	0x20000088
 8000820:	40004400 	.word	0x40004400

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 0310 	add.w	r3, r7, #16
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000838:	4b37      	ldr	r3, [pc, #220]	; (8000918 <MX_GPIO_Init+0xf4>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a36      	ldr	r2, [pc, #216]	; (8000918 <MX_GPIO_Init+0xf4>)
 800083e:	f043 0310 	orr.w	r3, r3, #16
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b34      	ldr	r3, [pc, #208]	; (8000918 <MX_GPIO_Init+0xf4>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0310 	and.w	r3, r3, #16
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000850:	4b31      	ldr	r3, [pc, #196]	; (8000918 <MX_GPIO_Init+0xf4>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a30      	ldr	r2, [pc, #192]	; (8000918 <MX_GPIO_Init+0xf4>)
 8000856:	f043 0320 	orr.w	r3, r3, #32
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b2e      	ldr	r3, [pc, #184]	; (8000918 <MX_GPIO_Init+0xf4>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f003 0320 	and.w	r3, r3, #32
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000868:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <MX_GPIO_Init+0xf4>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a2a      	ldr	r2, [pc, #168]	; (8000918 <MX_GPIO_Init+0xf4>)
 800086e:	f043 0304 	orr.w	r3, r3, #4
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b28      	ldr	r3, [pc, #160]	; (8000918 <MX_GPIO_Init+0xf4>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000880:	4b25      	ldr	r3, [pc, #148]	; (8000918 <MX_GPIO_Init+0xf4>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a24      	ldr	r2, [pc, #144]	; (8000918 <MX_GPIO_Init+0xf4>)
 8000886:	f043 0308 	orr.w	r3, r3, #8
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b22      	ldr	r3, [pc, #136]	; (8000918 <MX_GPIO_Init+0xf4>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f003 0308 	and.w	r3, r3, #8
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2120      	movs	r1, #32
 800089c:	481f      	ldr	r0, [pc, #124]	; (800091c <MX_GPIO_Init+0xf8>)
 800089e:	f000 fc7b 	bl	8001198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2106      	movs	r1, #6
 80008a6:	481e      	ldr	r0, [pc, #120]	; (8000920 <MX_GPIO_Init+0xfc>)
 80008a8:	f000 fc76 	bl	8001198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <MX_GPIO_Init+0x100>)
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	4619      	mov	r1, r3
 80008c0:	4819      	ldr	r0, [pc, #100]	; (8000928 <MX_GPIO_Init+0x104>)
 80008c2:	f000 fae5 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008c6:	2320      	movs	r3, #32
 80008c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2302      	movs	r3, #2
 80008d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 0310 	add.w	r3, r7, #16
 80008da:	4619      	mov	r1, r3
 80008dc:	480f      	ldr	r0, [pc, #60]	; (800091c <MX_GPIO_Init+0xf8>)
 80008de:	f000 fad7 	bl	8000e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 80008e2:	2306      	movs	r3, #6
 80008e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2302      	movs	r3, #2
 80008f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	4619      	mov	r1, r3
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <MX_GPIO_Init+0xfc>)
 80008fa:	f000 fac9 	bl	8000e90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	2028      	movs	r0, #40	; 0x28
 8000904:	f000 fa8d 	bl	8000e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000908:	2028      	movs	r0, #40	; 0x28
 800090a:	f000 faa6 	bl	8000e5a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090e:	bf00      	nop
 8000910:	3720      	adds	r7, #32
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000
 800091c:	40010800 	.word	0x40010800
 8000920:	40010c00 	.word	0x40010c00
 8000924:	10110000 	.word	0x10110000
 8000928:	40011000 	.word	0x40011000

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	e7fe      	b.n	8000934 <Error_Handler+0x8>
	...

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_MspInit+0x5c>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	4a14      	ldr	r2, [pc, #80]	; (8000994 <HAL_MspInit+0x5c>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6193      	str	r3, [r2, #24]
 800094a:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_MspInit+0x5c>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <HAL_MspInit+0x5c>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <HAL_MspInit+0x5c>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	61d3      	str	r3, [r2, #28]
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <HAL_MspInit+0x5c>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <HAL_MspInit+0x60>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	4a04      	ldr	r2, [pc, #16]	; (8000998 <HAL_MspInit+0x60>)
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	40021000 	.word	0x40021000
 8000998:	40010000 	.word	0x40010000

0800099c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <HAL_SPI_MspInit+0x8c>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d131      	bne.n	8000a20 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009bc:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <HAL_SPI_MspInit+0x90>)
 80009be:	69db      	ldr	r3, [r3, #28]
 80009c0:	4a1a      	ldr	r2, [pc, #104]	; (8000a2c <HAL_SPI_MspInit+0x90>)
 80009c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c6:	61d3      	str	r3, [r2, #28]
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_SPI_MspInit+0x90>)
 80009ca:	69db      	ldr	r3, [r3, #28]
 80009cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_SPI_MspInit+0x90>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <HAL_SPI_MspInit+0x90>)
 80009da:	f043 0308 	orr.w	r3, r3, #8
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_SPI_MspInit+0x90>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0308 	and.w	r3, r3, #8
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80009ec:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80009f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009f6:	2303      	movs	r3, #3
 80009f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	4619      	mov	r1, r3
 8000a00:	480b      	ldr	r0, [pc, #44]	; (8000a30 <HAL_SPI_MspInit+0x94>)
 8000a02:	f000 fa45 	bl	8000e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <HAL_SPI_MspInit+0x94>)
 8000a1c:	f000 fa38 	bl	8000e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a20:	bf00      	nop
 8000a22:	3720      	adds	r7, #32
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40003800 	.word	0x40003800
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40010c00 	.word	0x40010c00

08000a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a15      	ldr	r2, [pc, #84]	; (8000aa4 <HAL_UART_MspInit+0x70>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d123      	bne.n	8000a9c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <HAL_UART_MspInit+0x74>)
 8000a56:	69db      	ldr	r3, [r3, #28]
 8000a58:	4a13      	ldr	r2, [pc, #76]	; (8000aa8 <HAL_UART_MspInit+0x74>)
 8000a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5e:	61d3      	str	r3, [r2, #28]
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <HAL_UART_MspInit+0x74>)
 8000a62:	69db      	ldr	r3, [r3, #28]
 8000a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <HAL_UART_MspInit+0x74>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a0d      	ldr	r2, [pc, #52]	; (8000aa8 <HAL_UART_MspInit+0x74>)
 8000a72:	f043 0304 	orr.w	r3, r3, #4
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <HAL_UART_MspInit+0x74>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a84:	230c      	movs	r3, #12
 8000a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	4619      	mov	r1, r3
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <HAL_UART_MspInit+0x78>)
 8000a98:	f000 f9fa 	bl	8000e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a9c:	bf00      	nop
 8000a9e:	3720      	adds	r7, #32
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40004400 	.word	0x40004400
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40010800 	.word	0x40010800

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <HardFault_Handler+0x4>

08000abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <MemManage_Handler+0x4>

08000ac2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <BusFault_Handler+0x4>

08000ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <UsageFault_Handler+0x4>

08000ace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr

08000ada <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr

08000ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr

08000af2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af6:	f000 f87d 	bl	8000bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}

08000afe <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b02:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b06:	f000 fb79 	bl	80011fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
	...

08000b1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b1c:	f7ff fff7 	bl	8000b0e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b20:	480b      	ldr	r0, [pc, #44]	; (8000b50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b22:	490c      	ldr	r1, [pc, #48]	; (8000b54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b24:	4a0c      	ldr	r2, [pc, #48]	; (8000b58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b38:	4c09      	ldr	r4, [pc, #36]	; (8000b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b46:	f001 feeb 	bl	8002920 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b4a:	f7ff fd91 	bl	8000670 <main>
  bx lr
 8000b4e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b58:	080029c4 	.word	0x080029c4
  ldr r2, =_sbss
 8000b5c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b60:	20000128 	.word	0x20000128

08000b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC1_2_IRQHandler>
	...

08000b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <HAL_Init+0x28>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <HAL_Init+0x28>)
 8000b72:	f043 0310 	orr.w	r3, r3, #16
 8000b76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b78:	2003      	movs	r0, #3
 8000b7a:	f000 f947 	bl	8000e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f000 f808 	bl	8000b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b84:	f7ff fed8 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40022000 	.word	0x40022000

08000b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_InitTick+0x54>)
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_InitTick+0x58>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 f95f 	bl	8000e76 <HAL_SYSTICK_Config>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e00e      	b.n	8000be0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b0f      	cmp	r3, #15
 8000bc6:	d80a      	bhi.n	8000bde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	f000 f927 	bl	8000e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd4:	4a06      	ldr	r2, [pc, #24]	; (8000bf0 <HAL_InitTick+0x5c>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e000      	b.n	8000be0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000010 	.word	0x20000010
 8000bf0:	2000000c 	.word	0x2000000c

08000bf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_IncTick+0x1c>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <HAL_IncTick+0x20>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	4a03      	ldr	r2, [pc, #12]	; (8000c14 <HAL_IncTick+0x20>)
 8000c06:	6013      	str	r3, [r2, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	20000010 	.word	0x20000010
 8000c14:	20000124 	.word	0x20000124

08000c18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b02      	ldr	r3, [pc, #8]	; (8000c28 <HAL_GetTick+0x10>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	20000124 	.word	0x20000124

08000c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c34:	f7ff fff0 	bl	8000c18 <HAL_GetTick>
 8000c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c44:	d005      	beq.n	8000c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <HAL_Delay+0x44>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4413      	add	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c52:	bf00      	nop
 8000c54:	f7ff ffe0 	bl	8000c18 <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d8f7      	bhi.n	8000c54 <HAL_Delay+0x28>
  {
  }
}
 8000c64:	bf00      	nop
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000010 	.word	0x20000010

08000c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bc80      	pop	{r7}
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db0b      	blt.n	8000d02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	f003 021f 	and.w	r2, r3, #31
 8000cf0:	4906      	ldr	r1, [pc, #24]	; (8000d0c <__NVIC_EnableIRQ+0x34>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	095b      	lsrs	r3, r3, #5
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	; (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	; (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	; 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd8:	d301      	bcc.n	8000dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00f      	b.n	8000dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <SysTick_Config+0x40>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de6:	210f      	movs	r1, #15
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f7ff ff90 	bl	8000d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <SysTick_Config+0x40>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <SysTick_Config+0x40>)
 8000df8:	2207      	movs	r2, #7
 8000dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	e000e010 	.word	0xe000e010

08000e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff ff2d 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	60b9      	str	r1, [r7, #8]
 8000e2c:	607a      	str	r2, [r7, #4]
 8000e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e34:	f7ff ff42 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	6978      	ldr	r0, [r7, #20]
 8000e40:	f7ff ff90 	bl	8000d64 <NVIC_EncodePriority>
 8000e44:	4602      	mov	r2, r0
 8000e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff5f 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	4603      	mov	r3, r0
 8000e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff35 	bl	8000cd8 <__NVIC_EnableIRQ>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ffa2 	bl	8000dc8 <SysTick_Config>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b08b      	sub	sp, #44	; 0x2c
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea2:	e169      	b.n	8001178 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	69fa      	ldr	r2, [r7, #28]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	f040 8158 	bne.w	8001172 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	4a9a      	ldr	r2, [pc, #616]	; (8001130 <HAL_GPIO_Init+0x2a0>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d05e      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ecc:	4a98      	ldr	r2, [pc, #608]	; (8001130 <HAL_GPIO_Init+0x2a0>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d875      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000ed2:	4a98      	ldr	r2, [pc, #608]	; (8001134 <HAL_GPIO_Init+0x2a4>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d058      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ed8:	4a96      	ldr	r2, [pc, #600]	; (8001134 <HAL_GPIO_Init+0x2a4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d86f      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000ede:	4a96      	ldr	r2, [pc, #600]	; (8001138 <HAL_GPIO_Init+0x2a8>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d052      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ee4:	4a94      	ldr	r2, [pc, #592]	; (8001138 <HAL_GPIO_Init+0x2a8>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d869      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000eea:	4a94      	ldr	r2, [pc, #592]	; (800113c <HAL_GPIO_Init+0x2ac>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d04c      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000ef0:	4a92      	ldr	r2, [pc, #584]	; (800113c <HAL_GPIO_Init+0x2ac>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d863      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000ef6:	4a92      	ldr	r2, [pc, #584]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d046      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
 8000efc:	4a90      	ldr	r2, [pc, #576]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d85d      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000f02:	2b12      	cmp	r3, #18
 8000f04:	d82a      	bhi.n	8000f5c <HAL_GPIO_Init+0xcc>
 8000f06:	2b12      	cmp	r3, #18
 8000f08:	d859      	bhi.n	8000fbe <HAL_GPIO_Init+0x12e>
 8000f0a:	a201      	add	r2, pc, #4	; (adr r2, 8000f10 <HAL_GPIO_Init+0x80>)
 8000f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f10:	08000f8b 	.word	0x08000f8b
 8000f14:	08000f65 	.word	0x08000f65
 8000f18:	08000f77 	.word	0x08000f77
 8000f1c:	08000fb9 	.word	0x08000fb9
 8000f20:	08000fbf 	.word	0x08000fbf
 8000f24:	08000fbf 	.word	0x08000fbf
 8000f28:	08000fbf 	.word	0x08000fbf
 8000f2c:	08000fbf 	.word	0x08000fbf
 8000f30:	08000fbf 	.word	0x08000fbf
 8000f34:	08000fbf 	.word	0x08000fbf
 8000f38:	08000fbf 	.word	0x08000fbf
 8000f3c:	08000fbf 	.word	0x08000fbf
 8000f40:	08000fbf 	.word	0x08000fbf
 8000f44:	08000fbf 	.word	0x08000fbf
 8000f48:	08000fbf 	.word	0x08000fbf
 8000f4c:	08000fbf 	.word	0x08000fbf
 8000f50:	08000fbf 	.word	0x08000fbf
 8000f54:	08000f6d 	.word	0x08000f6d
 8000f58:	08000f81 	.word	0x08000f81
 8000f5c:	4a79      	ldr	r2, [pc, #484]	; (8001144 <HAL_GPIO_Init+0x2b4>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d013      	beq.n	8000f8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f62:	e02c      	b.n	8000fbe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	623b      	str	r3, [r7, #32]
          break;
 8000f6a:	e029      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	3304      	adds	r3, #4
 8000f72:	623b      	str	r3, [r7, #32]
          break;
 8000f74:	e024      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	3308      	adds	r3, #8
 8000f7c:	623b      	str	r3, [r7, #32]
          break;
 8000f7e:	e01f      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	330c      	adds	r3, #12
 8000f86:	623b      	str	r3, [r7, #32]
          break;
 8000f88:	e01a      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d102      	bne.n	8000f98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f92:	2304      	movs	r3, #4
 8000f94:	623b      	str	r3, [r7, #32]
          break;
 8000f96:	e013      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d105      	bne.n	8000fac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fa0:	2308      	movs	r3, #8
 8000fa2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69fa      	ldr	r2, [r7, #28]
 8000fa8:	611a      	str	r2, [r3, #16]
          break;
 8000faa:	e009      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fac:	2308      	movs	r3, #8
 8000fae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69fa      	ldr	r2, [r7, #28]
 8000fb4:	615a      	str	r2, [r3, #20]
          break;
 8000fb6:	e003      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	623b      	str	r3, [r7, #32]
          break;
 8000fbc:	e000      	b.n	8000fc0 <HAL_GPIO_Init+0x130>
          break;
 8000fbe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	2bff      	cmp	r3, #255	; 0xff
 8000fc4:	d801      	bhi.n	8000fca <HAL_GPIO_Init+0x13a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	e001      	b.n	8000fce <HAL_GPIO_Init+0x13e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	2bff      	cmp	r3, #255	; 0xff
 8000fd4:	d802      	bhi.n	8000fdc <HAL_GPIO_Init+0x14c>
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	e002      	b.n	8000fe2 <HAL_GPIO_Init+0x152>
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	3b08      	subs	r3, #8
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	210f      	movs	r1, #15
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	6a39      	ldr	r1, [r7, #32]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 80b1 	beq.w	8001172 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001010:	4b4d      	ldr	r3, [pc, #308]	; (8001148 <HAL_GPIO_Init+0x2b8>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a4c      	ldr	r2, [pc, #304]	; (8001148 <HAL_GPIO_Init+0x2b8>)
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	6193      	str	r3, [r2, #24]
 800101c:	4b4a      	ldr	r3, [pc, #296]	; (8001148 <HAL_GPIO_Init+0x2b8>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001028:	4a48      	ldr	r2, [pc, #288]	; (800114c <HAL_GPIO_Init+0x2bc>)
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001034:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a40      	ldr	r2, [pc, #256]	; (8001150 <HAL_GPIO_Init+0x2c0>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d013      	beq.n	800107c <HAL_GPIO_Init+0x1ec>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a3f      	ldr	r2, [pc, #252]	; (8001154 <HAL_GPIO_Init+0x2c4>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d00d      	beq.n	8001078 <HAL_GPIO_Init+0x1e8>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a3e      	ldr	r2, [pc, #248]	; (8001158 <HAL_GPIO_Init+0x2c8>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d007      	beq.n	8001074 <HAL_GPIO_Init+0x1e4>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a3d      	ldr	r2, [pc, #244]	; (800115c <HAL_GPIO_Init+0x2cc>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d101      	bne.n	8001070 <HAL_GPIO_Init+0x1e0>
 800106c:	2303      	movs	r3, #3
 800106e:	e006      	b.n	800107e <HAL_GPIO_Init+0x1ee>
 8001070:	2304      	movs	r3, #4
 8001072:	e004      	b.n	800107e <HAL_GPIO_Init+0x1ee>
 8001074:	2302      	movs	r3, #2
 8001076:	e002      	b.n	800107e <HAL_GPIO_Init+0x1ee>
 8001078:	2301      	movs	r3, #1
 800107a:	e000      	b.n	800107e <HAL_GPIO_Init+0x1ee>
 800107c:	2300      	movs	r3, #0
 800107e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001080:	f002 0203 	and.w	r2, r2, #3
 8001084:	0092      	lsls	r2, r2, #2
 8001086:	4093      	lsls	r3, r2
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	4313      	orrs	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800108e:	492f      	ldr	r1, [pc, #188]	; (800114c <HAL_GPIO_Init+0x2bc>)
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3302      	adds	r3, #2
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d006      	beq.n	80010b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010a8:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	492c      	ldr	r1, [pc, #176]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	608b      	str	r3, [r1, #8]
 80010b4:	e006      	b.n	80010c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010b6:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	43db      	mvns	r3, r3
 80010be:	4928      	ldr	r1, [pc, #160]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010c0:	4013      	ands	r3, r2
 80010c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d006      	beq.n	80010de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010d0:	4b23      	ldr	r3, [pc, #140]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	4922      	ldr	r1, [pc, #136]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	4313      	orrs	r3, r2
 80010da:	60cb      	str	r3, [r1, #12]
 80010dc:	e006      	b.n	80010ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010de:	4b20      	ldr	r3, [pc, #128]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010e0:	68da      	ldr	r2, [r3, #12]
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	491e      	ldr	r1, [pc, #120]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010e8:	4013      	ands	r3, r2
 80010ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d006      	beq.n	8001106 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010f8:	4b19      	ldr	r3, [pc, #100]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	4918      	ldr	r1, [pc, #96]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	604b      	str	r3, [r1, #4]
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	43db      	mvns	r3, r3
 800110e:	4914      	ldr	r1, [pc, #80]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 8001110:	4013      	ands	r3, r2
 8001112:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d021      	beq.n	8001164 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	490e      	ldr	r1, [pc, #56]	; (8001160 <HAL_GPIO_Init+0x2d0>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	600b      	str	r3, [r1, #0]
 800112c:	e021      	b.n	8001172 <HAL_GPIO_Init+0x2e2>
 800112e:	bf00      	nop
 8001130:	10320000 	.word	0x10320000
 8001134:	10310000 	.word	0x10310000
 8001138:	10220000 	.word	0x10220000
 800113c:	10210000 	.word	0x10210000
 8001140:	10120000 	.word	0x10120000
 8001144:	10110000 	.word	0x10110000
 8001148:	40021000 	.word	0x40021000
 800114c:	40010000 	.word	0x40010000
 8001150:	40010800 	.word	0x40010800
 8001154:	40010c00 	.word	0x40010c00
 8001158:	40011000 	.word	0x40011000
 800115c:	40011400 	.word	0x40011400
 8001160:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_GPIO_Init+0x304>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	43db      	mvns	r3, r3
 800116c:	4909      	ldr	r1, [pc, #36]	; (8001194 <HAL_GPIO_Init+0x304>)
 800116e:	4013      	ands	r3, r2
 8001170:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001174:	3301      	adds	r3, #1
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	fa22 f303 	lsr.w	r3, r2, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	f47f ae8e 	bne.w	8000ea4 <HAL_GPIO_Init+0x14>
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	372c      	adds	r7, #44	; 0x2c
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	40010400 	.word	0x40010400

08001198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
 80011a4:	4613      	mov	r3, r2
 80011a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011a8:	787b      	ldrb	r3, [r7, #1]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ae:	887a      	ldrh	r2, [r7, #2]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011b4:	e003      	b.n	80011be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011b6:	887b      	ldrh	r3, [r7, #2]
 80011b8:	041a      	lsls	r2, r3, #16
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	611a      	str	r2, [r3, #16]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011da:	887a      	ldrh	r2, [r7, #2]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4013      	ands	r3, r2
 80011e0:	041a      	lsls	r2, r3, #16
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	43d9      	mvns	r1, r3
 80011e6:	887b      	ldrh	r3, [r7, #2]
 80011e8:	400b      	ands	r3, r1
 80011ea:	431a      	orrs	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	611a      	str	r2, [r3, #16]
}
 80011f0:	bf00      	nop
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
	...

080011fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001208:	695a      	ldr	r2, [r3, #20]
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	4013      	ands	r3, r2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d006      	beq.n	8001220 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001218:	88fb      	ldrh	r3, [r7, #6]
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f806 	bl	800122c <HAL_GPIO_EXTI_Callback>
  }
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40010400 	.word	0x40010400

0800122c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e272      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 8087 	beq.w	800136e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001260:	4b92      	ldr	r3, [pc, #584]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 030c 	and.w	r3, r3, #12
 8001268:	2b04      	cmp	r3, #4
 800126a:	d00c      	beq.n	8001286 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800126c:	4b8f      	ldr	r3, [pc, #572]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 030c 	and.w	r3, r3, #12
 8001274:	2b08      	cmp	r3, #8
 8001276:	d112      	bne.n	800129e <HAL_RCC_OscConfig+0x5e>
 8001278:	4b8c      	ldr	r3, [pc, #560]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001284:	d10b      	bne.n	800129e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001286:	4b89      	ldr	r3, [pc, #548]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d06c      	beq.n	800136c <HAL_RCC_OscConfig+0x12c>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d168      	bne.n	800136c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e24c      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a6:	d106      	bne.n	80012b6 <HAL_RCC_OscConfig+0x76>
 80012a8:	4b80      	ldr	r3, [pc, #512]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a7f      	ldr	r2, [pc, #508]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80012ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	e02e      	b.n	8001314 <HAL_RCC_OscConfig+0xd4>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x98>
 80012be:	4b7b      	ldr	r3, [pc, #492]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a7a      	ldr	r2, [pc, #488]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80012c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	4b78      	ldr	r3, [pc, #480]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a77      	ldr	r2, [pc, #476]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80012d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	e01d      	b.n	8001314 <HAL_RCC_OscConfig+0xd4>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012e0:	d10c      	bne.n	80012fc <HAL_RCC_OscConfig+0xbc>
 80012e2:	4b72      	ldr	r3, [pc, #456]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a71      	ldr	r2, [pc, #452]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80012e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	4b6f      	ldr	r3, [pc, #444]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a6e      	ldr	r2, [pc, #440]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80012f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e00b      	b.n	8001314 <HAL_RCC_OscConfig+0xd4>
 80012fc:	4b6b      	ldr	r3, [pc, #428]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a6a      	ldr	r2, [pc, #424]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 8001302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	4b68      	ldr	r3, [pc, #416]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a67      	ldr	r2, [pc, #412]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 800130e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001312:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d013      	beq.n	8001344 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fc7c 	bl	8000c18 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001324:	f7ff fc78 	bl	8000c18 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b64      	cmp	r3, #100	; 0x64
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e200      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001336:	4b5d      	ldr	r3, [pc, #372]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0xe4>
 8001342:	e014      	b.n	800136e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff fc68 	bl	8000c18 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800134c:	f7ff fc64 	bl	8000c18 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b64      	cmp	r3, #100	; 0x64
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e1ec      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135e:	4b53      	ldr	r3, [pc, #332]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f0      	bne.n	800134c <HAL_RCC_OscConfig+0x10c>
 800136a:	e000      	b.n	800136e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d063      	beq.n	8001442 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800137a:	4b4c      	ldr	r3, [pc, #304]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00b      	beq.n	800139e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001386:	4b49      	ldr	r3, [pc, #292]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	2b08      	cmp	r3, #8
 8001390:	d11c      	bne.n	80013cc <HAL_RCC_OscConfig+0x18c>
 8001392:	4b46      	ldr	r3, [pc, #280]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d116      	bne.n	80013cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139e:	4b43      	ldr	r3, [pc, #268]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d005      	beq.n	80013b6 <HAL_RCC_OscConfig+0x176>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d001      	beq.n	80013b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e1c0      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b6:	4b3d      	ldr	r3, [pc, #244]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	4939      	ldr	r1, [pc, #228]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ca:	e03a      	b.n	8001442 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d020      	beq.n	8001416 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d4:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013da:	f7ff fc1d 	bl	8000c18 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e2:	f7ff fc19 	bl	8000c18 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e1a1      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f4:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0f0      	beq.n	80013e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001400:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	4927      	ldr	r1, [pc, #156]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 8001410:	4313      	orrs	r3, r2
 8001412:	600b      	str	r3, [r1, #0]
 8001414:	e015      	b.n	8001442 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001416:	4b26      	ldr	r3, [pc, #152]	; (80014b0 <HAL_RCC_OscConfig+0x270>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fbfc 	bl	8000c18 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001424:	f7ff fbf8 	bl	8000c18 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e180      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001436:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	2b00      	cmp	r3, #0
 800144c:	d03a      	beq.n	80014c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d019      	beq.n	800148a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001456:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 8001458:	2201      	movs	r2, #1
 800145a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145c:	f7ff fbdc 	bl	8000c18 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001464:	f7ff fbd8 	bl	8000c18 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e160      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <HAL_RCC_OscConfig+0x26c>)
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001482:	2001      	movs	r0, #1
 8001484:	f000 face 	bl	8001a24 <RCC_Delay>
 8001488:	e01c      	b.n	80014c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_RCC_OscConfig+0x274>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001490:	f7ff fbc2 	bl	8000c18 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001496:	e00f      	b.n	80014b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001498:	f7ff fbbe 	bl	8000c18 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d908      	bls.n	80014b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e146      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
 80014aa:	bf00      	nop
 80014ac:	40021000 	.word	0x40021000
 80014b0:	42420000 	.word	0x42420000
 80014b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b8:	4b92      	ldr	r3, [pc, #584]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1e9      	bne.n	8001498 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f000 80a6 	beq.w	800161e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014d6:	4b8b      	ldr	r3, [pc, #556]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10d      	bne.n	80014fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	4b88      	ldr	r3, [pc, #544]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	4a87      	ldr	r2, [pc, #540]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ec:	61d3      	str	r3, [r2, #28]
 80014ee:	4b85      	ldr	r3, [pc, #532]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014fa:	2301      	movs	r3, #1
 80014fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fe:	4b82      	ldr	r3, [pc, #520]	; (8001708 <HAL_RCC_OscConfig+0x4c8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001506:	2b00      	cmp	r3, #0
 8001508:	d118      	bne.n	800153c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800150a:	4b7f      	ldr	r3, [pc, #508]	; (8001708 <HAL_RCC_OscConfig+0x4c8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a7e      	ldr	r2, [pc, #504]	; (8001708 <HAL_RCC_OscConfig+0x4c8>)
 8001510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001516:	f7ff fb7f 	bl	8000c18 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800151e:	f7ff fb7b 	bl	8000c18 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b64      	cmp	r3, #100	; 0x64
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e103      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001530:	4b75      	ldr	r3, [pc, #468]	; (8001708 <HAL_RCC_OscConfig+0x4c8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d106      	bne.n	8001552 <HAL_RCC_OscConfig+0x312>
 8001544:	4b6f      	ldr	r3, [pc, #444]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	4a6e      	ldr	r2, [pc, #440]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6213      	str	r3, [r2, #32]
 8001550:	e02d      	b.n	80015ae <HAL_RCC_OscConfig+0x36e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10c      	bne.n	8001574 <HAL_RCC_OscConfig+0x334>
 800155a:	4b6a      	ldr	r3, [pc, #424]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	4a69      	ldr	r2, [pc, #420]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	6213      	str	r3, [r2, #32]
 8001566:	4b67      	ldr	r3, [pc, #412]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	4a66      	ldr	r2, [pc, #408]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	f023 0304 	bic.w	r3, r3, #4
 8001570:	6213      	str	r3, [r2, #32]
 8001572:	e01c      	b.n	80015ae <HAL_RCC_OscConfig+0x36e>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	2b05      	cmp	r3, #5
 800157a:	d10c      	bne.n	8001596 <HAL_RCC_OscConfig+0x356>
 800157c:	4b61      	ldr	r3, [pc, #388]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	4a60      	ldr	r2, [pc, #384]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001582:	f043 0304 	orr.w	r3, r3, #4
 8001586:	6213      	str	r3, [r2, #32]
 8001588:	4b5e      	ldr	r3, [pc, #376]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	4a5d      	ldr	r2, [pc, #372]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6213      	str	r3, [r2, #32]
 8001594:	e00b      	b.n	80015ae <HAL_RCC_OscConfig+0x36e>
 8001596:	4b5b      	ldr	r3, [pc, #364]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	4a5a      	ldr	r2, [pc, #360]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	f023 0301 	bic.w	r3, r3, #1
 80015a0:	6213      	str	r3, [r2, #32]
 80015a2:	4b58      	ldr	r3, [pc, #352]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	6a1b      	ldr	r3, [r3, #32]
 80015a6:	4a57      	ldr	r2, [pc, #348]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	f023 0304 	bic.w	r3, r3, #4
 80015ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d015      	beq.n	80015e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b6:	f7ff fb2f 	bl	8000c18 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015bc:	e00a      	b.n	80015d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015be:	f7ff fb2b 	bl	8000c18 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e0b1      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d4:	4b4b      	ldr	r3, [pc, #300]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0ee      	beq.n	80015be <HAL_RCC_OscConfig+0x37e>
 80015e0:	e014      	b.n	800160c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e2:	f7ff fb19 	bl	8000c18 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e8:	e00a      	b.n	8001600 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ea:	f7ff fb15 	bl	8000c18 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e09b      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001600:	4b40      	ldr	r3, [pc, #256]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1ee      	bne.n	80015ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800160c:	7dfb      	ldrb	r3, [r7, #23]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d105      	bne.n	800161e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001612:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	4a3b      	ldr	r2, [pc, #236]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800161c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 8087 	beq.w	8001736 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001628:	4b36      	ldr	r3, [pc, #216]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 030c 	and.w	r3, r3, #12
 8001630:	2b08      	cmp	r3, #8
 8001632:	d061      	beq.n	80016f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	2b02      	cmp	r3, #2
 800163a:	d146      	bne.n	80016ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163c:	4b33      	ldr	r3, [pc, #204]	; (800170c <HAL_RCC_OscConfig+0x4cc>)
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff fae9 	bl	8000c18 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164a:	f7ff fae5 	bl	8000c18 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e06d      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800165c:	4b29      	ldr	r3, [pc, #164]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1f0      	bne.n	800164a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a1b      	ldr	r3, [r3, #32]
 800166c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001670:	d108      	bne.n	8001684 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001672:	4b24      	ldr	r3, [pc, #144]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	4921      	ldr	r1, [pc, #132]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001684:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a19      	ldr	r1, [r3, #32]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	430b      	orrs	r3, r1
 8001696:	491b      	ldr	r1, [pc, #108]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	4313      	orrs	r3, r2
 800169a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800169c:	4b1b      	ldr	r3, [pc, #108]	; (800170c <HAL_RCC_OscConfig+0x4cc>)
 800169e:	2201      	movs	r2, #1
 80016a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7ff fab9 	bl	8000c18 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016aa:	f7ff fab5 	bl	8000c18 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e03d      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x46a>
 80016c8:	e035      	b.n	8001736 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <HAL_RCC_OscConfig+0x4cc>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff faa2 	bl	8000c18 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d8:	f7ff fa9e 	bl	8000c18 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e026      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_RCC_OscConfig+0x4c4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x498>
 80016f6:	e01e      	b.n	8001736 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d107      	bne.n	8001710 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e019      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
 8001704:	40021000 	.word	0x40021000
 8001708:	40007000 	.word	0x40007000
 800170c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_RCC_OscConfig+0x500>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	429a      	cmp	r2, r3
 8001722:	d106      	bne.n	8001732 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d001      	beq.n	8001736 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000

08001744 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0d0      	b.n	80018fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001758:	4b6a      	ldr	r3, [pc, #424]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d910      	bls.n	8001788 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b67      	ldr	r3, [pc, #412]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 0207 	bic.w	r2, r3, #7
 800176e:	4965      	ldr	r1, [pc, #404]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b63      	ldr	r3, [pc, #396]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0b8      	b.n	80018fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d020      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a0:	4b59      	ldr	r3, [pc, #356]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	4a58      	ldr	r2, [pc, #352]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80017a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b8:	4b53      	ldr	r3, [pc, #332]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	4a52      	ldr	r2, [pc, #328]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80017be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c4:	4b50      	ldr	r3, [pc, #320]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	494d      	ldr	r1, [pc, #308]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d040      	beq.n	8001864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	4b47      	ldr	r3, [pc, #284]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d115      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e07f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001802:	4b41      	ldr	r3, [pc, #260]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e073      	b.n	80018fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001812:	4b3d      	ldr	r3, [pc, #244]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e06b      	b.n	80018fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001822:	4b39      	ldr	r3, [pc, #228]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f023 0203 	bic.w	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4936      	ldr	r1, [pc, #216]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001834:	f7ff f9f0 	bl	8000c18 <HAL_GetTick>
 8001838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	e00a      	b.n	8001852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183c:	f7ff f9ec 	bl	8000c18 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	; 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e053      	b.n	80018fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 020c 	and.w	r2, r3, #12
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	429a      	cmp	r2, r3
 8001862:	d1eb      	bne.n	800183c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001864:	4b27      	ldr	r3, [pc, #156]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d210      	bcs.n	8001894 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b24      	ldr	r3, [pc, #144]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 0207 	bic.w	r2, r3, #7
 800187a:	4922      	ldr	r1, [pc, #136]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	4313      	orrs	r3, r2
 8001880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e032      	b.n	80018fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	4916      	ldr	r1, [pc, #88]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d009      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	490e      	ldr	r1, [pc, #56]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018d2:	f000 f821 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 80018d6:	4602      	mov	r2, r0
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	490a      	ldr	r1, [pc, #40]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80018e4:	5ccb      	ldrb	r3, [r1, r3]
 80018e6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ea:	4a09      	ldr	r2, [pc, #36]	; (8001910 <HAL_RCC_ClockConfig+0x1cc>)
 80018ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_RCC_ClockConfig+0x1d0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff f94e 	bl	8000b94 <HAL_InitTick>

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40022000 	.word	0x40022000
 8001908:	40021000 	.word	0x40021000
 800190c:	08002990 	.word	0x08002990
 8001910:	20000008 	.word	0x20000008
 8001914:	2000000c 	.word	0x2000000c

08001918 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001918:	b480      	push	{r7}
 800191a:	b087      	sub	sp, #28
 800191c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <HAL_RCC_GetSysClockFreq+0x94>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b04      	cmp	r3, #4
 8001940:	d002      	beq.n	8001948 <HAL_RCC_GetSysClockFreq+0x30>
 8001942:	2b08      	cmp	r3, #8
 8001944:	d003      	beq.n	800194e <HAL_RCC_GetSysClockFreq+0x36>
 8001946:	e027      	b.n	8001998 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800194a:	613b      	str	r3, [r7, #16]
      break;
 800194c:	e027      	b.n	800199e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	0c9b      	lsrs	r3, r3, #18
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	4a17      	ldr	r2, [pc, #92]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001958:	5cd3      	ldrb	r3, [r2, r3]
 800195a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d010      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_RCC_GetSysClockFreq+0x94>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	0c5b      	lsrs	r3, r3, #17
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	4a11      	ldr	r2, [pc, #68]	; (80019b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001972:	5cd3      	ldrb	r3, [r2, r3]
 8001974:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800197a:	fb03 f202 	mul.w	r2, r3, r2
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	fbb2 f3f3 	udiv	r3, r2, r3
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e004      	b.n	8001992 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a0c      	ldr	r2, [pc, #48]	; (80019bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800198c:	fb02 f303 	mul.w	r3, r2, r3
 8001990:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	613b      	str	r3, [r7, #16]
      break;
 8001996:	e002      	b.n	800199e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800199a:	613b      	str	r3, [r7, #16]
      break;
 800199c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800199e:	693b      	ldr	r3, [r7, #16]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	371c      	adds	r7, #28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000
 80019b0:	007a1200 	.word	0x007a1200
 80019b4:	080029a8 	.word	0x080029a8
 80019b8:	080029b8 	.word	0x080029b8
 80019bc:	003d0900 	.word	0x003d0900

080019c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019c4:	4b02      	ldr	r3, [pc, #8]	; (80019d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	20000008 	.word	0x20000008

080019d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019d8:	f7ff fff2 	bl	80019c0 <HAL_RCC_GetHCLKFreq>
 80019dc:	4602      	mov	r2, r0
 80019de:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	0a1b      	lsrs	r3, r3, #8
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	4903      	ldr	r1, [pc, #12]	; (80019f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ea:	5ccb      	ldrb	r3, [r1, r3]
 80019ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40021000 	.word	0x40021000
 80019f8:	080029a0 	.word	0x080029a0

080019fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a00:	f7ff ffde 	bl	80019c0 <HAL_RCC_GetHCLKFreq>
 8001a04:	4602      	mov	r2, r0
 8001a06:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	0adb      	lsrs	r3, r3, #11
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	4903      	ldr	r1, [pc, #12]	; (8001a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a12:	5ccb      	ldrb	r3, [r1, r3]
 8001a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	080029a0 	.word	0x080029a0

08001a24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <RCC_Delay+0x34>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <RCC_Delay+0x38>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	0a5b      	lsrs	r3, r3, #9
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	fb02 f303 	mul.w	r3, r2, r3
 8001a3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a40:	bf00      	nop
  }
  while (Delay --);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1e5a      	subs	r2, r3, #1
 8001a46:	60fa      	str	r2, [r7, #12]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f9      	bne.n	8001a40 <RCC_Delay+0x1c>
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr
 8001a58:	20000008 	.word	0x20000008
 8001a5c:	10624dd3 	.word	0x10624dd3

08001a60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e076      	b.n	8001b60 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d108      	bne.n	8001a8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a82:	d009      	beq.n	8001a98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
 8001a8a:	e005      	b.n	8001a98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d106      	bne.n	8001ab8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7fe ff72 	bl	800099c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2202      	movs	r2, #2
 8001abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ace:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	431a      	orrs	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b1c:	ea42 0103 	orr.w	r1, r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	0c1a      	lsrs	r2, r3, #16
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f002 0204 	and.w	r2, r2, #4
 8001b3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	69da      	ldr	r2, [r3, #28]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	603b      	str	r3, [r7, #0]
 8001b74:	4613      	mov	r3, r2
 8001b76:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_SPI_Transmit+0x22>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e12d      	b.n	8001de6 <HAL_SPI_Transmit+0x27e>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b92:	f7ff f841 	bl	8000c18 <HAL_GetTick>
 8001b96:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d002      	beq.n	8001bae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001bac:	e116      	b.n	8001ddc <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <HAL_SPI_Transmit+0x52>
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d102      	bne.n	8001bc0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001bbe:	e10d      	b.n	8001ddc <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	68ba      	ldr	r2, [r7, #8]
 8001bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	88fa      	ldrh	r2, [r7, #6]
 8001bd8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	88fa      	ldrh	r2, [r7, #6]
 8001bde:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c06:	d10f      	bne.n	8001c28 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c26:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c32:	2b40      	cmp	r3, #64	; 0x40
 8001c34:	d007      	beq.n	8001c46 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c4e:	d14f      	bne.n	8001cf0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <HAL_SPI_Transmit+0xf6>
 8001c58:	8afb      	ldrh	r3, [r7, #22]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d142      	bne.n	8001ce4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	881a      	ldrh	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	1c9a      	adds	r2, r3, #2
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c82:	e02f      	b.n	8001ce4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d112      	bne.n	8001cb8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	881a      	ldrh	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	1c9a      	adds	r2, r3, #2
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	86da      	strh	r2, [r3, #54]	; 0x36
 8001cb6:	e015      	b.n	8001ce4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cb8:	f7fe ffae 	bl	8000c18 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d803      	bhi.n	8001cd0 <HAL_SPI_Transmit+0x168>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cce:	d102      	bne.n	8001cd6 <HAL_SPI_Transmit+0x16e>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d106      	bne.n	8001ce4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001ce2:	e07b      	b.n	8001ddc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1ca      	bne.n	8001c84 <HAL_SPI_Transmit+0x11c>
 8001cee:	e050      	b.n	8001d92 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <HAL_SPI_Transmit+0x196>
 8001cf8:	8afb      	ldrh	r3, [r7, #22]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d144      	bne.n	8001d88 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	330c      	adds	r3, #12
 8001d08:	7812      	ldrb	r2, [r2, #0]
 8001d0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001d24:	e030      	b.n	8001d88 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d113      	bne.n	8001d5c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	330c      	adds	r3, #12
 8001d3e:	7812      	ldrb	r2, [r2, #0]
 8001d40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	86da      	strh	r2, [r3, #54]	; 0x36
 8001d5a:	e015      	b.n	8001d88 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d5c:	f7fe ff5c 	bl	8000c18 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d803      	bhi.n	8001d74 <HAL_SPI_Transmit+0x20c>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d72:	d102      	bne.n	8001d7a <HAL_SPI_Transmit+0x212>
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d106      	bne.n	8001d88 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001d86:	e029      	b.n	8001ddc <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1c9      	bne.n	8001d26 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	6839      	ldr	r1, [r7, #0]
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 fbcc 	bl	8002534 <SPI_EndRxTxTransaction>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2220      	movs	r2, #32
 8001da6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10a      	bne.n	8001dc6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d002      	beq.n	8001dd4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	77fb      	strb	r3, [r7, #31]
 8001dd2:	e003      	b.n	8001ddc <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001de4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b088      	sub	sp, #32
 8001df2:	af02      	add	r7, sp, #8
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d002      	beq.n	8001e14 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001e12:	e0fb      	b.n	800200c <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e1c:	d112      	bne.n	8001e44 <HAL_SPI_Receive+0x56>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10e      	bne.n	8001e44 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2204      	movs	r2, #4
 8001e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001e2e:	88fa      	ldrh	r2, [r7, #6]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	4613      	mov	r3, r2
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f000 f8ef 	bl	800201e <HAL_SPI_TransmitReceive>
 8001e40:	4603      	mov	r3, r0
 8001e42:	e0e8      	b.n	8002016 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_SPI_Receive+0x64>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e0e1      	b.n	8002016 <HAL_SPI_Receive+0x228>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e5a:	f7fe fedd 	bl	8000c18 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <HAL_SPI_Receive+0x7e>
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d102      	bne.n	8001e72 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001e70:	e0cc      	b.n	800200c <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2204      	movs	r2, #4
 8001e76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	88fa      	ldrh	r2, [r7, #6]
 8001e8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	88fa      	ldrh	r2, [r7, #6]
 8001e90:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eb8:	d10f      	bne.n	8001eda <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ec8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ed8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee4:	2b40      	cmp	r3, #64	; 0x40
 8001ee6:	d007      	beq.n	8001ef8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ef6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d16a      	bne.n	8001fd6 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001f00:	e032      	b.n	8001f68 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d115      	bne.n	8001f3c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f103 020c 	add.w	r2, r3, #12
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1c:	7812      	ldrb	r2, [r2, #0]
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	3b01      	subs	r3, #1
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f3a:	e015      	b.n	8001f68 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f3c:	f7fe fe6c 	bl	8000c18 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d803      	bhi.n	8001f54 <HAL_SPI_Receive+0x166>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f52:	d102      	bne.n	8001f5a <HAL_SPI_Receive+0x16c>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001f66:	e051      	b.n	800200c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1c7      	bne.n	8001f02 <HAL_SPI_Receive+0x114>
 8001f72:	e035      	b.n	8001fe0 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d113      	bne.n	8001faa <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8c:	b292      	uxth	r2, r2
 8001f8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f94:	1c9a      	adds	r2, r3, #2
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001fa8:	e015      	b.n	8001fd6 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001faa:	f7fe fe35 	bl	8000c18 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d803      	bhi.n	8001fc2 <HAL_SPI_Receive+0x1d4>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d102      	bne.n	8001fc8 <HAL_SPI_Receive+0x1da>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d106      	bne.n	8001fd6 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001fd4:	e01a      	b.n	800200c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1c9      	bne.n	8001f74 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	6839      	ldr	r1, [r7, #0]
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 fa53 	bl	8002490 <SPI_EndRxTransaction>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d002      	beq.n	8001ff6 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	75fb      	strb	r3, [r7, #23]
 8002002:	e003      	b.n	800200c <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002014:	7dfb      	ldrb	r3, [r7, #23]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b08c      	sub	sp, #48	; 0x30
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
 800202a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800202c:	2301      	movs	r3, #1
 800202e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_SPI_TransmitReceive+0x26>
 8002040:	2302      	movs	r3, #2
 8002042:	e198      	b.n	8002376 <HAL_SPI_TransmitReceive+0x358>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800204c:	f7fe fde4 	bl	8000c18 <HAL_GetTick>
 8002050:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002058:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002062:	887b      	ldrh	r3, [r7, #2]
 8002064:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002066:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800206a:	2b01      	cmp	r3, #1
 800206c:	d00f      	beq.n	800208e <HAL_SPI_TransmitReceive+0x70>
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002074:	d107      	bne.n	8002086 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d103      	bne.n	8002086 <HAL_SPI_TransmitReceive+0x68>
 800207e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002082:	2b04      	cmp	r3, #4
 8002084:	d003      	beq.n	800208e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002086:	2302      	movs	r3, #2
 8002088:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800208c:	e16d      	b.n	800236a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_SPI_TransmitReceive+0x82>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <HAL_SPI_TransmitReceive+0x82>
 800209a:	887b      	ldrh	r3, [r7, #2]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d103      	bne.n	80020a8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80020a6:	e160      	b.n	800236a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d003      	beq.n	80020bc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2205      	movs	r2, #5
 80020b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	887a      	ldrh	r2, [r7, #2]
 80020cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	887a      	ldrh	r2, [r7, #2]
 80020d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	887a      	ldrh	r2, [r7, #2]
 80020de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fc:	2b40      	cmp	r3, #64	; 0x40
 80020fe:	d007      	beq.n	8002110 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800210e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002118:	d17c      	bne.n	8002214 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <HAL_SPI_TransmitReceive+0x10a>
 8002122:	8b7b      	ldrh	r3, [r7, #26]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d16a      	bne.n	80021fe <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	881a      	ldrh	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	1c9a      	adds	r2, r3, #2
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800214c:	e057      	b.n	80021fe <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b02      	cmp	r3, #2
 800215a:	d11b      	bne.n	8002194 <HAL_SPI_TransmitReceive+0x176>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002160:	b29b      	uxth	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d016      	beq.n	8002194 <HAL_SPI_TransmitReceive+0x176>
 8002166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002168:	2b01      	cmp	r3, #1
 800216a:	d113      	bne.n	8002194 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	881a      	ldrh	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	1c9a      	adds	r2, r3, #2
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002186:	b29b      	uxth	r3, r3
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d119      	bne.n	80021d6 <HAL_SPI_TransmitReceive+0x1b8>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d014      	beq.n	80021d6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b6:	b292      	uxth	r2, r2
 80021b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021be:	1c9a      	adds	r2, r3, #2
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021d2:	2301      	movs	r3, #1
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80021d6:	f7fe fd1f 	bl	8000c18 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d80b      	bhi.n	80021fe <HAL_SPI_TransmitReceive+0x1e0>
 80021e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ec:	d007      	beq.n	80021fe <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80021fc:	e0b5      	b.n	800236a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002202:	b29b      	uxth	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1a2      	bne.n	800214e <HAL_SPI_TransmitReceive+0x130>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800220c:	b29b      	uxth	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d19d      	bne.n	800214e <HAL_SPI_TransmitReceive+0x130>
 8002212:	e080      	b.n	8002316 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <HAL_SPI_TransmitReceive+0x204>
 800221c:	8b7b      	ldrh	r3, [r7, #26]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d16f      	bne.n	8002302 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	330c      	adds	r3, #12
 800222c:	7812      	ldrb	r2, [r2, #0]
 800222e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800223e:	b29b      	uxth	r3, r3
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002248:	e05b      	b.n	8002302 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b02      	cmp	r3, #2
 8002256:	d11c      	bne.n	8002292 <HAL_SPI_TransmitReceive+0x274>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800225c:	b29b      	uxth	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d017      	beq.n	8002292 <HAL_SPI_TransmitReceive+0x274>
 8002262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002264:	2b01      	cmp	r3, #1
 8002266:	d114      	bne.n	8002292 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	330c      	adds	r3, #12
 8002272:	7812      	ldrb	r2, [r2, #0]
 8002274:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002284:	b29b      	uxth	r3, r3
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b01      	cmp	r3, #1
 800229e:	d119      	bne.n	80022d4 <HAL_SPI_TransmitReceive+0x2b6>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d014      	beq.n	80022d4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	3b01      	subs	r3, #1
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022d0:	2301      	movs	r3, #1
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80022d4:	f7fe fca0 	bl	8000c18 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d803      	bhi.n	80022ec <HAL_SPI_TransmitReceive+0x2ce>
 80022e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ea:	d102      	bne.n	80022f2 <HAL_SPI_TransmitReceive+0x2d4>
 80022ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d107      	bne.n	8002302 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002300:	e033      	b.n	800236a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d19e      	bne.n	800224a <HAL_SPI_TransmitReceive+0x22c>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002310:	b29b      	uxth	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d199      	bne.n	800224a <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002318:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f90a 	bl	8002534 <SPI_EndRxTxTransaction>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d006      	beq.n	8002334 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2220      	movs	r2, #32
 8002330:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002332:	e01a      	b.n	800236a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10a      	bne.n	8002352 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002360:	e003      	b.n	800236a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002372:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002376:	4618      	mov	r0, r3
 8002378:	3730      	adds	r7, #48	; 0x30
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002390:	f7fe fc42 	bl	8000c18 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	4413      	add	r3, r2
 800239e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80023a0:	f7fe fc3a 	bl	8000c18 <HAL_GetTick>
 80023a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80023a6:	4b39      	ldr	r3, [pc, #228]	; (800248c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	015b      	lsls	r3, r3, #5
 80023ac:	0d1b      	lsrs	r3, r3, #20
 80023ae:	69fa      	ldr	r2, [r7, #28]
 80023b0:	fb02 f303 	mul.w	r3, r2, r3
 80023b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023b6:	e054      	b.n	8002462 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023be:	d050      	beq.n	8002462 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023c0:	f7fe fc2a 	bl	8000c18 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d902      	bls.n	80023d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d13d      	bne.n	8002452 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023ee:	d111      	bne.n	8002414 <SPI_WaitFlagStateUntilTimeout+0x94>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023f8:	d004      	beq.n	8002404 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002402:	d107      	bne.n	8002414 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002412:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800241c:	d10f      	bne.n	800243e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800243c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e017      	b.n	8002482 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	3b01      	subs	r3, #1
 8002460:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4013      	ands	r3, r2
 800246c:	68ba      	ldr	r2, [r7, #8]
 800246e:	429a      	cmp	r2, r3
 8002470:	bf0c      	ite	eq
 8002472:	2301      	moveq	r3, #1
 8002474:	2300      	movne	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	429a      	cmp	r2, r3
 800247e:	d19b      	bne.n	80023b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3720      	adds	r7, #32
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000008 	.word	0x20000008

08002490 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af02      	add	r7, sp, #8
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024a4:	d111      	bne.n	80024ca <SPI_EndRxTransaction+0x3a>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ae:	d004      	beq.n	80024ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b8:	d107      	bne.n	80024ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024c8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024d2:	d117      	bne.n	8002504 <SPI_EndRxTransaction+0x74>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024dc:	d112      	bne.n	8002504 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2200      	movs	r2, #0
 80024e6:	2101      	movs	r1, #1
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f7ff ff49 	bl	8002380 <SPI_WaitFlagStateUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d01a      	beq.n	800252a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f8:	f043 0220 	orr.w	r2, r3, #32
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e013      	b.n	800252c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2200      	movs	r2, #0
 800250c:	2180      	movs	r1, #128	; 0x80
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f7ff ff36 	bl	8002380 <SPI_WaitFlagStateUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d007      	beq.n	800252a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251e:	f043 0220 	orr.w	r2, r3, #32
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e000      	b.n	800252c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2200      	movs	r2, #0
 8002548:	2180      	movs	r1, #128	; 0x80
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f7ff ff18 	bl	8002380 <SPI_WaitFlagStateUntilTimeout>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d007      	beq.n	8002566 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255a:	f043 0220 	orr.w	r2, r3, #32
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e000      	b.n	8002568 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e042      	b.n	8002608 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7fe fa4c 	bl	8000a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2224      	movs	r2, #36	; 0x24
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f91d 	bl	80027f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695a      	ldr	r2, [r3, #20]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2220      	movs	r2, #32
 80025f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	; 0x28
 8002614:	af02      	add	r7, sp, #8
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	4613      	mov	r3, r2
 800261e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b20      	cmp	r3, #32
 800262e:	d16d      	bne.n	800270c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <HAL_UART_Transmit+0x2c>
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e066      	b.n	800270e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2221      	movs	r2, #33	; 0x21
 800264a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800264e:	f7fe fae3 	bl	8000c18 <HAL_GetTick>
 8002652:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	88fa      	ldrh	r2, [r7, #6]
 8002658:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	88fa      	ldrh	r2, [r7, #6]
 800265e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002668:	d108      	bne.n	800267c <HAL_UART_Transmit+0x6c>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d104      	bne.n	800267c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	e003      	b.n	8002684 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002680:	2300      	movs	r3, #0
 8002682:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002684:	e02a      	b.n	80026dc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2200      	movs	r2, #0
 800268e:	2180      	movs	r1, #128	; 0x80
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f840 	bl	8002716 <UART_WaitOnFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e036      	b.n	800270e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10b      	bne.n	80026be <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	3302      	adds	r3, #2
 80026ba:	61bb      	str	r3, [r7, #24]
 80026bc:	e007      	b.n	80026ce <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	781a      	ldrb	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	3301      	adds	r3, #1
 80026cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1cf      	bne.n	8002686 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	2200      	movs	r2, #0
 80026ee:	2140      	movs	r1, #64	; 0x40
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 f810 	bl	8002716 <UART_WaitOnFlagUntilTimeout>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e006      	b.n	800270e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2220      	movs	r2, #32
 8002704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	e000      	b.n	800270e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800270c:	2302      	movs	r3, #2
  }
}
 800270e:	4618      	mov	r0, r3
 8002710:	3720      	adds	r7, #32
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b090      	sub	sp, #64	; 0x40
 800271a:	af00      	add	r7, sp, #0
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	603b      	str	r3, [r7, #0]
 8002722:	4613      	mov	r3, r2
 8002724:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002726:	e050      	b.n	80027ca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800272a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272e:	d04c      	beq.n	80027ca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002732:	2b00      	cmp	r3, #0
 8002734:	d007      	beq.n	8002746 <UART_WaitOnFlagUntilTimeout+0x30>
 8002736:	f7fe fa6f 	bl	8000c18 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002742:	429a      	cmp	r2, r3
 8002744:	d241      	bcs.n	80027ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	330c      	adds	r3, #12
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	e853 3f00 	ldrex	r3, [r3]
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800275c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	330c      	adds	r3, #12
 8002764:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002766:	637a      	str	r2, [r7, #52]	; 0x34
 8002768:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800276a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800276c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800276e:	e841 2300 	strex	r3, r2, [r1]
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1e5      	bne.n	8002746 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	3314      	adds	r3, #20
 8002780:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	e853 3f00 	ldrex	r3, [r3]
 8002788:	613b      	str	r3, [r7, #16]
   return(result);
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	f023 0301 	bic.w	r3, r3, #1
 8002790:	63bb      	str	r3, [r7, #56]	; 0x38
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3314      	adds	r3, #20
 8002798:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800279a:	623a      	str	r2, [r7, #32]
 800279c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279e:	69f9      	ldr	r1, [r7, #28]
 80027a0:	6a3a      	ldr	r2, [r7, #32]
 80027a2:	e841 2300 	strex	r3, r2, [r1]
 80027a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1e5      	bne.n	800277a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e00f      	b.n	80027ea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	4013      	ands	r3, r2
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	bf0c      	ite	eq
 80027da:	2301      	moveq	r3, #1
 80027dc:	2300      	movne	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d09f      	beq.n	8002728 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3740      	adds	r7, #64	; 0x40
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	4313      	orrs	r3, r2
 8002822:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800282e:	f023 030c 	bic.w	r3, r3, #12
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	68b9      	ldr	r1, [r7, #8]
 8002838:	430b      	orrs	r3, r1
 800283a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699a      	ldr	r2, [r3, #24]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a2c      	ldr	r2, [pc, #176]	; (8002908 <UART_SetConfig+0x114>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d103      	bne.n	8002864 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800285c:	f7ff f8ce 	bl	80019fc <HAL_RCC_GetPCLK2Freq>
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	e002      	b.n	800286a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002864:	f7ff f8b6 	bl	80019d4 <HAL_RCC_GetPCLK1Freq>
 8002868:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	009a      	lsls	r2, r3, #2
 8002874:	441a      	add	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	4a22      	ldr	r2, [pc, #136]	; (800290c <UART_SetConfig+0x118>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	0119      	lsls	r1, r3, #4
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	009a      	lsls	r2, r3, #2
 8002894:	441a      	add	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	fbb2 f2f3 	udiv	r2, r2, r3
 80028a0:	4b1a      	ldr	r3, [pc, #104]	; (800290c <UART_SetConfig+0x118>)
 80028a2:	fba3 0302 	umull	r0, r3, r3, r2
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	2064      	movs	r0, #100	; 0x64
 80028aa:	fb00 f303 	mul.w	r3, r0, r3
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	3332      	adds	r3, #50	; 0x32
 80028b4:	4a15      	ldr	r2, [pc, #84]	; (800290c <UART_SetConfig+0x118>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028c0:	4419      	add	r1, r3
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	009a      	lsls	r2, r3, #2
 80028cc:	441a      	add	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <UART_SetConfig+0x118>)
 80028da:	fba3 0302 	umull	r0, r3, r3, r2
 80028de:	095b      	lsrs	r3, r3, #5
 80028e0:	2064      	movs	r0, #100	; 0x64
 80028e2:	fb00 f303 	mul.w	r3, r0, r3
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	3332      	adds	r3, #50	; 0x32
 80028ec:	4a07      	ldr	r2, [pc, #28]	; (800290c <UART_SetConfig+0x118>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	f003 020f 	and.w	r2, r3, #15
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	440a      	add	r2, r1
 80028fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002900:	bf00      	nop
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40013800 	.word	0x40013800
 800290c:	51eb851f 	.word	0x51eb851f

08002910 <memset>:
 8002910:	4603      	mov	r3, r0
 8002912:	4402      	add	r2, r0
 8002914:	4293      	cmp	r3, r2
 8002916:	d100      	bne.n	800291a <memset+0xa>
 8002918:	4770      	bx	lr
 800291a:	f803 1b01 	strb.w	r1, [r3], #1
 800291e:	e7f9      	b.n	8002914 <memset+0x4>

08002920 <__libc_init_array>:
 8002920:	b570      	push	{r4, r5, r6, lr}
 8002922:	2600      	movs	r6, #0
 8002924:	4d0c      	ldr	r5, [pc, #48]	; (8002958 <__libc_init_array+0x38>)
 8002926:	4c0d      	ldr	r4, [pc, #52]	; (800295c <__libc_init_array+0x3c>)
 8002928:	1b64      	subs	r4, r4, r5
 800292a:	10a4      	asrs	r4, r4, #2
 800292c:	42a6      	cmp	r6, r4
 800292e:	d109      	bne.n	8002944 <__libc_init_array+0x24>
 8002930:	f000 f81a 	bl	8002968 <_init>
 8002934:	2600      	movs	r6, #0
 8002936:	4d0a      	ldr	r5, [pc, #40]	; (8002960 <__libc_init_array+0x40>)
 8002938:	4c0a      	ldr	r4, [pc, #40]	; (8002964 <__libc_init_array+0x44>)
 800293a:	1b64      	subs	r4, r4, r5
 800293c:	10a4      	asrs	r4, r4, #2
 800293e:	42a6      	cmp	r6, r4
 8002940:	d105      	bne.n	800294e <__libc_init_array+0x2e>
 8002942:	bd70      	pop	{r4, r5, r6, pc}
 8002944:	f855 3b04 	ldr.w	r3, [r5], #4
 8002948:	4798      	blx	r3
 800294a:	3601      	adds	r6, #1
 800294c:	e7ee      	b.n	800292c <__libc_init_array+0xc>
 800294e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002952:	4798      	blx	r3
 8002954:	3601      	adds	r6, #1
 8002956:	e7f2      	b.n	800293e <__libc_init_array+0x1e>
 8002958:	080029bc 	.word	0x080029bc
 800295c:	080029bc 	.word	0x080029bc
 8002960:	080029bc 	.word	0x080029bc
 8002964:	080029c0 	.word	0x080029c0

08002968 <_init>:
 8002968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800296a:	bf00      	nop
 800296c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296e:	bc08      	pop	{r3}
 8002970:	469e      	mov	lr, r3
 8002972:	4770      	bx	lr

08002974 <_fini>:
 8002974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002976:	bf00      	nop
 8002978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800297a:	bc08      	pop	{r3}
 800297c:	469e      	mov	lr, r3
 800297e:	4770      	bx	lr
