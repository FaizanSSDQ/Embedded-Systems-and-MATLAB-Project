
Dual_DMA_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000363c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003778  08003778  00013778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037d8  080037d8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080037d8  080037d8  000137d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037e0  080037e0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037e4  080037e4  000137e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080037e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004264  2000005c  08003844  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200042c0  08003844  000242c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008d10  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019cb  00000000  00000000  00028dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d0  00000000  00000000  0002a7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005fd  00000000  00000000  0002af78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015fe6  00000000  00000000  0002b575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009ef9  00000000  00000000  0004155b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b0ef  00000000  00000000  0004b454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002458  00000000  00000000  000d6544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d899c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000005c 	.word	0x2000005c
 8000158:	00000000 	.word	0x00000000
 800015c:	08003760 	.word	0x08003760

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000060 	.word	0x20000060
 8000178:	08003760 	.word	0x08003760

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b972 	b.w	8000488 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001c0:	9e08      	ldr	r6, [sp, #32]
 80001c2:	460d      	mov	r5, r1
 80001c4:	4604      	mov	r4, r0
 80001c6:	468e      	mov	lr, r1
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14c      	bne.n	8000266 <__udivmoddi4+0xaa>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4694      	mov	ip, r2
 80001d0:	d967      	bls.n	80002a2 <__udivmoddi4+0xe6>
 80001d2:	fab2 f382 	clz	r3, r2
 80001d6:	b153      	cbz	r3, 80001ee <__udivmoddi4+0x32>
 80001d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001dc:	f1c3 0220 	rsb	r2, r3, #32
 80001e0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001e4:	fa20 f202 	lsr.w	r2, r0, r2
 80001e8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001ec:	409c      	lsls	r4, r3
 80001ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001f2:	fbbe f1f7 	udiv	r1, lr, r7
 80001f6:	fa1f f58c 	uxth.w	r5, ip
 80001fa:	fb07 ee11 	mls	lr, r7, r1, lr
 80001fe:	fb01 f005 	mul.w	r0, r1, r5
 8000202:	0c22      	lsrs	r2, r4, #16
 8000204:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000208:	4290      	cmp	r0, r2
 800020a:	d90a      	bls.n	8000222 <__udivmoddi4+0x66>
 800020c:	eb1c 0202 	adds.w	r2, ip, r2
 8000210:	f101 3eff 	add.w	lr, r1, #4294967295
 8000214:	f080 8119 	bcs.w	800044a <__udivmoddi4+0x28e>
 8000218:	4290      	cmp	r0, r2
 800021a:	f240 8116 	bls.w	800044a <__udivmoddi4+0x28e>
 800021e:	3902      	subs	r1, #2
 8000220:	4462      	add	r2, ip
 8000222:	1a12      	subs	r2, r2, r0
 8000224:	fbb2 f0f7 	udiv	r0, r2, r7
 8000228:	fb07 2210 	mls	r2, r7, r0, r2
 800022c:	fb00 f505 	mul.w	r5, r0, r5
 8000230:	b2a4      	uxth	r4, r4
 8000232:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000236:	42a5      	cmp	r5, r4
 8000238:	d90a      	bls.n	8000250 <__udivmoddi4+0x94>
 800023a:	eb1c 0404 	adds.w	r4, ip, r4
 800023e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000242:	f080 8104 	bcs.w	800044e <__udivmoddi4+0x292>
 8000246:	42a5      	cmp	r5, r4
 8000248:	f240 8101 	bls.w	800044e <__udivmoddi4+0x292>
 800024c:	4464      	add	r4, ip
 800024e:	3802      	subs	r0, #2
 8000250:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000254:	2100      	movs	r1, #0
 8000256:	1b64      	subs	r4, r4, r5
 8000258:	b11e      	cbz	r6, 8000262 <__udivmoddi4+0xa6>
 800025a:	40dc      	lsrs	r4, r3
 800025c:	2300      	movs	r3, #0
 800025e:	e9c6 4300 	strd	r4, r3, [r6]
 8000262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000266:	428b      	cmp	r3, r1
 8000268:	d908      	bls.n	800027c <__udivmoddi4+0xc0>
 800026a:	2e00      	cmp	r6, #0
 800026c:	f000 80ea 	beq.w	8000444 <__udivmoddi4+0x288>
 8000270:	2100      	movs	r1, #0
 8000272:	e9c6 0500 	strd	r0, r5, [r6]
 8000276:	4608      	mov	r0, r1
 8000278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027c:	fab3 f183 	clz	r1, r3
 8000280:	2900      	cmp	r1, #0
 8000282:	d148      	bne.n	8000316 <__udivmoddi4+0x15a>
 8000284:	42ab      	cmp	r3, r5
 8000286:	d302      	bcc.n	800028e <__udivmoddi4+0xd2>
 8000288:	4282      	cmp	r2, r0
 800028a:	f200 80f8 	bhi.w	800047e <__udivmoddi4+0x2c2>
 800028e:	1a84      	subs	r4, r0, r2
 8000290:	eb65 0203 	sbc.w	r2, r5, r3
 8000294:	2001      	movs	r0, #1
 8000296:	4696      	mov	lr, r2
 8000298:	2e00      	cmp	r6, #0
 800029a:	d0e2      	beq.n	8000262 <__udivmoddi4+0xa6>
 800029c:	e9c6 4e00 	strd	r4, lr, [r6]
 80002a0:	e7df      	b.n	8000262 <__udivmoddi4+0xa6>
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xea>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f382 	clz	r3, r2
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 808e 	bne.w	80003cc <__udivmoddi4+0x210>
 80002b0:	1a88      	subs	r0, r1, r2
 80002b2:	2101      	movs	r1, #1
 80002b4:	0c17      	lsrs	r7, r2, #16
 80002b6:	fa1f fe82 	uxth.w	lr, r2
 80002ba:	fbb0 f5f7 	udiv	r5, r0, r7
 80002be:	fb07 0015 	mls	r0, r7, r5, r0
 80002c2:	0c22      	lsrs	r2, r4, #16
 80002c4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002c8:	fb0e f005 	mul.w	r0, lr, r5
 80002cc:	4290      	cmp	r0, r2
 80002ce:	d908      	bls.n	80002e2 <__udivmoddi4+0x126>
 80002d0:	eb1c 0202 	adds.w	r2, ip, r2
 80002d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80002d8:	d202      	bcs.n	80002e0 <__udivmoddi4+0x124>
 80002da:	4290      	cmp	r0, r2
 80002dc:	f200 80cc 	bhi.w	8000478 <__udivmoddi4+0x2bc>
 80002e0:	4645      	mov	r5, r8
 80002e2:	1a12      	subs	r2, r2, r0
 80002e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002e8:	fb07 2210 	mls	r2, r7, r0, r2
 80002ec:	fb0e fe00 	mul.w	lr, lr, r0
 80002f0:	b2a4      	uxth	r4, r4
 80002f2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0x150>
 80002fa:	eb1c 0404 	adds.w	r4, ip, r4
 80002fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x14e>
 8000304:	45a6      	cmp	lr, r4
 8000306:	f200 80b4 	bhi.w	8000472 <__udivmoddi4+0x2b6>
 800030a:	4610      	mov	r0, r2
 800030c:	eba4 040e 	sub.w	r4, r4, lr
 8000310:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000314:	e7a0      	b.n	8000258 <__udivmoddi4+0x9c>
 8000316:	f1c1 0720 	rsb	r7, r1, #32
 800031a:	408b      	lsls	r3, r1
 800031c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000320:	ea4c 0c03 	orr.w	ip, ip, r3
 8000324:	fa25 fa07 	lsr.w	sl, r5, r7
 8000328:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032c:	fbba f8f9 	udiv	r8, sl, r9
 8000330:	408d      	lsls	r5, r1
 8000332:	fa20 f307 	lsr.w	r3, r0, r7
 8000336:	fb09 aa18 	mls	sl, r9, r8, sl
 800033a:	fa1f fe8c 	uxth.w	lr, ip
 800033e:	432b      	orrs	r3, r5
 8000340:	fa00 f501 	lsl.w	r5, r0, r1
 8000344:	fb08 f00e 	mul.w	r0, r8, lr
 8000348:	0c1c      	lsrs	r4, r3, #16
 800034a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800034e:	42a0      	cmp	r0, r4
 8000350:	fa02 f201 	lsl.w	r2, r2, r1
 8000354:	d90b      	bls.n	800036e <__udivmoddi4+0x1b2>
 8000356:	eb1c 0404 	adds.w	r4, ip, r4
 800035a:	f108 3aff 	add.w	sl, r8, #4294967295
 800035e:	f080 8086 	bcs.w	800046e <__udivmoddi4+0x2b2>
 8000362:	42a0      	cmp	r0, r4
 8000364:	f240 8083 	bls.w	800046e <__udivmoddi4+0x2b2>
 8000368:	f1a8 0802 	sub.w	r8, r8, #2
 800036c:	4464      	add	r4, ip
 800036e:	1a24      	subs	r4, r4, r0
 8000370:	b298      	uxth	r0, r3
 8000372:	fbb4 f3f9 	udiv	r3, r4, r9
 8000376:	fb09 4413 	mls	r4, r9, r3, r4
 800037a:	fb03 fe0e 	mul.w	lr, r3, lr
 800037e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000382:	45a6      	cmp	lr, r4
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x1dc>
 8000386:	eb1c 0404 	adds.w	r4, ip, r4
 800038a:	f103 30ff 	add.w	r0, r3, #4294967295
 800038e:	d26a      	bcs.n	8000466 <__udivmoddi4+0x2aa>
 8000390:	45a6      	cmp	lr, r4
 8000392:	d968      	bls.n	8000466 <__udivmoddi4+0x2aa>
 8000394:	3b02      	subs	r3, #2
 8000396:	4464      	add	r4, ip
 8000398:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800039c:	fba0 9302 	umull	r9, r3, r0, r2
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	429c      	cmp	r4, r3
 80003a6:	46c8      	mov	r8, r9
 80003a8:	469e      	mov	lr, r3
 80003aa:	d354      	bcc.n	8000456 <__udivmoddi4+0x29a>
 80003ac:	d051      	beq.n	8000452 <__udivmoddi4+0x296>
 80003ae:	2e00      	cmp	r6, #0
 80003b0:	d067      	beq.n	8000482 <__udivmoddi4+0x2c6>
 80003b2:	ebb5 0308 	subs.w	r3, r5, r8
 80003b6:	eb64 040e 	sbc.w	r4, r4, lr
 80003ba:	40cb      	lsrs	r3, r1
 80003bc:	fa04 f707 	lsl.w	r7, r4, r7
 80003c0:	431f      	orrs	r7, r3
 80003c2:	40cc      	lsrs	r4, r1
 80003c4:	e9c6 7400 	strd	r7, r4, [r6]
 80003c8:	2100      	movs	r1, #0
 80003ca:	e74a      	b.n	8000262 <__udivmoddi4+0xa6>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0020 	rsb	r0, r3, #32
 80003d4:	40c1      	lsrs	r1, r0
 80003d6:	409d      	lsls	r5, r3
 80003d8:	fa24 f000 	lsr.w	r0, r4, r0
 80003dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e0:	4328      	orrs	r0, r5
 80003e2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003e6:	fb07 1115 	mls	r1, r7, r5, r1
 80003ea:	fa1f fe8c 	uxth.w	lr, ip
 80003ee:	0c02      	lsrs	r2, r0, #16
 80003f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003f4:	fb05 f10e 	mul.w	r1, r5, lr
 80003f8:	4291      	cmp	r1, r2
 80003fa:	fa04 f403 	lsl.w	r4, r4, r3
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x256>
 8000400:	eb1c 0202 	adds.w	r2, ip, r2
 8000404:	f105 38ff 	add.w	r8, r5, #4294967295
 8000408:	d22f      	bcs.n	800046a <__udivmoddi4+0x2ae>
 800040a:	4291      	cmp	r1, r2
 800040c:	d92d      	bls.n	800046a <__udivmoddi4+0x2ae>
 800040e:	3d02      	subs	r5, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a52      	subs	r2, r2, r1
 8000414:	fbb2 f1f7 	udiv	r1, r2, r7
 8000418:	fb07 2211 	mls	r2, r7, r1, r2
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000422:	fb01 f20e 	mul.w	r2, r1, lr
 8000426:	4282      	cmp	r2, r0
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x280>
 800042a:	eb1c 0000 	adds.w	r0, ip, r0
 800042e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000432:	d216      	bcs.n	8000462 <__udivmoddi4+0x2a6>
 8000434:	4282      	cmp	r2, r0
 8000436:	d914      	bls.n	8000462 <__udivmoddi4+0x2a6>
 8000438:	3902      	subs	r1, #2
 800043a:	4460      	add	r0, ip
 800043c:	1a80      	subs	r0, r0, r2
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	e73a      	b.n	80002ba <__udivmoddi4+0xfe>
 8000444:	4631      	mov	r1, r6
 8000446:	4630      	mov	r0, r6
 8000448:	e70b      	b.n	8000262 <__udivmoddi4+0xa6>
 800044a:	4671      	mov	r1, lr
 800044c:	e6e9      	b.n	8000222 <__udivmoddi4+0x66>
 800044e:	4610      	mov	r0, r2
 8000450:	e6fe      	b.n	8000250 <__udivmoddi4+0x94>
 8000452:	454d      	cmp	r5, r9
 8000454:	d2ab      	bcs.n	80003ae <__udivmoddi4+0x1f2>
 8000456:	ebb9 0802 	subs.w	r8, r9, r2
 800045a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800045e:	3801      	subs	r0, #1
 8000460:	e7a5      	b.n	80003ae <__udivmoddi4+0x1f2>
 8000462:	4641      	mov	r1, r8
 8000464:	e7ea      	b.n	800043c <__udivmoddi4+0x280>
 8000466:	4603      	mov	r3, r0
 8000468:	e796      	b.n	8000398 <__udivmoddi4+0x1dc>
 800046a:	4645      	mov	r5, r8
 800046c:	e7d1      	b.n	8000412 <__udivmoddi4+0x256>
 800046e:	46d0      	mov	r8, sl
 8000470:	e77d      	b.n	800036e <__udivmoddi4+0x1b2>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e749      	b.n	800030c <__udivmoddi4+0x150>
 8000478:	3d02      	subs	r5, #2
 800047a:	4462      	add	r2, ip
 800047c:	e731      	b.n	80002e2 <__udivmoddi4+0x126>
 800047e:	4608      	mov	r0, r1
 8000480:	e70a      	b.n	8000298 <__udivmoddi4+0xdc>
 8000482:	4631      	mov	r1, r6
 8000484:	e6ed      	b.n	8000262 <__udivmoddi4+0xa6>
 8000486:	bf00      	nop

08000488 <__aeabi_idiv0>:
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000492:	f000 fb9e 	bl	8000bd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000496:	f000 f86b 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800049a:	f000 f957 	bl	800074c <MX_GPIO_Init>
  MX_DMA_Init();
 800049e:	f000 f937 	bl	8000710 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004a2:	f000 f90b 	bl	80006bc <MX_USART2_UART_Init>
  MX_ADC_Init();
 80004a6:	f000 f8b1 	bl	800060c <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc,(uint32_t * )ADC_Buffer, BUFF_LEN );
 80004aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004ae:	4929      	ldr	r1, [pc, #164]	; (8000554 <main+0xc8>)
 80004b0:	4829      	ldr	r0, [pc, #164]	; (8000558 <main+0xcc>)
 80004b2:	f000 fd43 	bl	8000f3c <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(HalfFlag==1){
 80004b6:	4b29      	ldr	r3, [pc, #164]	; (800055c <main+0xd0>)
 80004b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d120      	bne.n	8000502 <main+0x76>
	 		  HalfFlag=0;
 80004c0:	4b26      	ldr	r3, [pc, #152]	; (800055c <main+0xd0>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	801a      	strh	r2, [r3, #0]
	 		  for(int i=0;i<HALF_BUFF_LEN-1;i++)
 80004c6:	2300      	movs	r3, #0
 80004c8:	607b      	str	r3, [r7, #4]
 80004ca:	e015      	b.n	80004f8 <main+0x6c>
	 		  {
	 			  sprintf(msg,"%d\r\n",ADC_Buffer[i]);
 80004cc:	4a21      	ldr	r2, [pc, #132]	; (8000554 <main+0xc8>)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004d4:	461a      	mov	r2, r3
 80004d6:	4922      	ldr	r1, [pc, #136]	; (8000560 <main+0xd4>)
 80004d8:	4822      	ldr	r0, [pc, #136]	; (8000564 <main+0xd8>)
 80004da:	f002 fc8f 	bl	8002dfc <siprintf>
	 			  HAL_UART_Transmit(&huart2, msg,strlen(msg), 200);
 80004de:	4821      	ldr	r0, [pc, #132]	; (8000564 <main+0xd8>)
 80004e0:	f7ff fe4c 	bl	800017c <strlen>
 80004e4:	4603      	mov	r3, r0
 80004e6:	b29a      	uxth	r2, r3
 80004e8:	23c8      	movs	r3, #200	; 0xc8
 80004ea:	491e      	ldr	r1, [pc, #120]	; (8000564 <main+0xd8>)
 80004ec:	481e      	ldr	r0, [pc, #120]	; (8000568 <main+0xdc>)
 80004ee:	f002 faaf 	bl	8002a50 <HAL_UART_Transmit>
	 		  for(int i=0;i<HALF_BUFF_LEN-1;i++)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3301      	adds	r3, #1
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f640 72fe 	movw	r2, #4094	; 0xffe
 80004fe:	4293      	cmp	r3, r2
 8000500:	dde4      	ble.n	80004cc <main+0x40>
	 		  }
	 	  }
	 	  if(FullFlag==1){
 8000502:	4b1a      	ldr	r3, [pc, #104]	; (800056c <main+0xe0>)
 8000504:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000508:	2b01      	cmp	r3, #1
 800050a:	d1d4      	bne.n	80004b6 <main+0x2a>
	 		  FullFlag=0;
 800050c:	4b17      	ldr	r3, [pc, #92]	; (800056c <main+0xe0>)
 800050e:	2200      	movs	r2, #0
 8000510:	801a      	strh	r2, [r3, #0]
	 		  for(int i=HALF_BUFF_LEN;i<BUFF_LEN-1;i++)
 8000512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	e015      	b.n	8000546 <main+0xba>
	 		  {
	 			  sprintf(msg,"%d\r\n",ADC_Buffer[i]);
 800051a:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <main+0xc8>)
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000522:	461a      	mov	r2, r3
 8000524:	490e      	ldr	r1, [pc, #56]	; (8000560 <main+0xd4>)
 8000526:	480f      	ldr	r0, [pc, #60]	; (8000564 <main+0xd8>)
 8000528:	f002 fc68 	bl	8002dfc <siprintf>
	 			  HAL_UART_Transmit(&huart2, msg,strlen(msg), 200);
 800052c:	480d      	ldr	r0, [pc, #52]	; (8000564 <main+0xd8>)
 800052e:	f7ff fe25 	bl	800017c <strlen>
 8000532:	4603      	mov	r3, r0
 8000534:	b29a      	uxth	r2, r3
 8000536:	23c8      	movs	r3, #200	; 0xc8
 8000538:	490a      	ldr	r1, [pc, #40]	; (8000564 <main+0xd8>)
 800053a:	480b      	ldr	r0, [pc, #44]	; (8000568 <main+0xdc>)
 800053c:	f002 fa88 	bl	8002a50 <HAL_UART_Transmit>
	 		  for(int i=HALF_BUFF_LEN;i<BUFF_LEN-1;i++)
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	3301      	adds	r3, #1
 8000544:	603b      	str	r3, [r7, #0]
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 800054c:	4293      	cmp	r3, r2
 800054e:	dde4      	ble.n	800051a <main+0x8e>
	  if(HalfFlag==1){
 8000550:	e7b1      	b.n	80004b6 <main+0x2a>
 8000552:	bf00      	nop
 8000554:	20000158 	.word	0x20000158
 8000558:	20000078 	.word	0x20000078
 800055c:	20004158 	.word	0x20004158
 8000560:	08003778 	.word	0x08003778
 8000564:	2000415c 	.word	0x2000415c
 8000568:	20000110 	.word	0x20000110
 800056c:	2000415a 	.word	0x2000415a

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b092      	sub	sp, #72	; 0x48
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2234      	movs	r2, #52	; 0x34
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f002 fc5c 	bl	8002e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	463b      	mov	r3, r7
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000592:	4b1d      	ldr	r3, [pc, #116]	; (8000608 <SystemClock_Config+0x98>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800059a:	4a1b      	ldr	r2, [pc, #108]	; (8000608 <SystemClock_Config+0x98>)
 800059c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005a0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a2:	2302      	movs	r3, #2
 80005a4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a6:	2301      	movs	r3, #1
 80005a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005aa:	2310      	movs	r3, #16
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b2:	2300      	movs	r3, #0
 80005b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80005bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80005c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 fbfc 	bl	8001dc4 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005d2:	f000 f951 	bl	8000878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2303      	movs	r3, #3
 80005dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ea:	463b      	mov	r3, r7
 80005ec:	2101      	movs	r1, #1
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 ff18 	bl	8002424 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005fa:	f000 f93d 	bl	8000878 <Error_Handler>
  }
}
 80005fe:	bf00      	nop
 8000600:	3748      	adds	r7, #72	; 0x48
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40007000 	.word	0x40007000

0800060c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800061c:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <MX_ADC_Init+0xa8>)
 800061e:	4a26      	ldr	r2, [pc, #152]	; (80006b8 <MX_ADC_Init+0xac>)
 8000620:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000622:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <MX_ADC_Init+0xa8>)
 8000624:	2200      	movs	r2, #0
 8000626:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <MX_ADC_Init+0xa8>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062e:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <MX_ADC_Init+0xa8>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <MX_ADC_Init+0xa8>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800063a:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <MX_ADC_Init+0xa8>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <MX_ADC_Init+0xa8>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000646:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_ADC_Init+0xa8>)
 8000648:	2200      	movs	r2, #0
 800064a:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <MX_ADC_Init+0xa8>)
 800064e:	2200      	movs	r2, #0
 8000650:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_ADC_Init+0xa8>)
 8000654:	2200      	movs	r2, #0
 8000656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 800065a:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_ADC_Init+0xa8>)
 800065c:	2201      	movs	r2, #1
 800065e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <MX_ADC_Init+0xa8>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_ADC_Init+0xa8>)
 800066a:	2210      	movs	r2, #16
 800066c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_ADC_Init+0xa8>)
 8000670:	2200      	movs	r2, #0
 8000672:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000674:	4b0f      	ldr	r3, [pc, #60]	; (80006b4 <MX_ADC_Init+0xa8>)
 8000676:	2200      	movs	r2, #0
 8000678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800067c:	480d      	ldr	r0, [pc, #52]	; (80006b4 <MX_ADC_Init+0xa8>)
 800067e:	f000 fb17 	bl	8000cb0 <HAL_ADC_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC_Init+0x80>
  {
    Error_Handler();
 8000688:	f000 f8f6 	bl	8000878 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800068c:	2301      	movs	r3, #1
 800068e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000690:	2301      	movs	r3, #1
 8000692:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4619      	mov	r1, r3
 800069c:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_ADC_Init+0xa8>)
 800069e:	f000 fce5 	bl	800106c <HAL_ADC_ConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 80006a8:	f000 f8e6 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000078 	.word	0x20000078
 80006b8:	40012400 	.word	0x40012400

080006bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	; (800070c <MX_USART2_UART_Init+0x50>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_USART2_UART_Init+0x4c>)
 80006f4:	f002 f95c 	bl	80029b0 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fe:	f000 f8bb 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000110 	.word	0x20000110
 800070c:	40004400 	.word	0x40004400

08000710 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_DMA_Init+0x38>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	4a0b      	ldr	r2, [pc, #44]	; (8000748 <MX_DMA_Init+0x38>)
 800071c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000720:	61d3      	str	r3, [r2, #28]
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_DMA_Init+0x38>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	200b      	movs	r0, #11
 8000734:	f000 ffb5 	bl	80016a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000738:	200b      	movs	r0, #11
 800073a:	f000 ffce 	bl	80016da <HAL_NVIC_EnableIRQ>

}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b34      	ldr	r3, [pc, #208]	; (8000834 <MX_GPIO_Init+0xe8>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	4a33      	ldr	r2, [pc, #204]	; (8000834 <MX_GPIO_Init+0xe8>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	61d3      	str	r3, [r2, #28]
 800076e:	4b31      	ldr	r3, [pc, #196]	; (8000834 <MX_GPIO_Init+0xe8>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	4b2e      	ldr	r3, [pc, #184]	; (8000834 <MX_GPIO_Init+0xe8>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	4a2d      	ldr	r2, [pc, #180]	; (8000834 <MX_GPIO_Init+0xe8>)
 8000780:	f043 0320 	orr.w	r3, r3, #32
 8000784:	61d3      	str	r3, [r2, #28]
 8000786:	4b2b      	ldr	r3, [pc, #172]	; (8000834 <MX_GPIO_Init+0xe8>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	f003 0320 	and.w	r3, r3, #32
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b28      	ldr	r3, [pc, #160]	; (8000834 <MX_GPIO_Init+0xe8>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	4a27      	ldr	r2, [pc, #156]	; (8000834 <MX_GPIO_Init+0xe8>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	61d3      	str	r3, [r2, #28]
 800079e:	4b25      	ldr	r3, [pc, #148]	; (8000834 <MX_GPIO_Init+0xe8>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	4b22      	ldr	r3, [pc, #136]	; (8000834 <MX_GPIO_Init+0xe8>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	4a21      	ldr	r2, [pc, #132]	; (8000834 <MX_GPIO_Init+0xe8>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	61d3      	str	r3, [r2, #28]
 80007b6:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <MX_GPIO_Init+0xe8>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2102      	movs	r1, #2
 80007c6:	481c      	ldr	r0, [pc, #112]	; (8000838 <MX_GPIO_Init+0xec>)
 80007c8:	f001 fae4 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2121      	movs	r1, #33	; 0x21
 80007d0:	481a      	ldr	r0, [pc, #104]	; (800083c <MX_GPIO_Init+0xf0>)
 80007d2:	f001 fadf 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	4812      	ldr	r0, [pc, #72]	; (8000838 <MX_GPIO_Init+0xec>)
 80007ee:	f001 f941 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007f2:	2302      	movs	r3, #2
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	480b      	ldr	r0, [pc, #44]	; (8000838 <MX_GPIO_Init+0xec>)
 800080a:	f001 f933 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 800080e:	2321      	movs	r3, #33	; 0x21
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_GPIO_Init+0xf0>)
 8000826:	f001 f925 	bl	8001a74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800082a:	bf00      	nop
 800082c:	3728      	adds	r7, #40	; 0x28
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800
 8000838:	40020800 	.word	0x40020800
 800083c:	40020000 	.word	0x40020000

08000840 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	//sprintf(msg,"in Half\r\n");
	//HAL_UART_Transmit(&huart2, msg,strlen(msg), 200);
	HalfFlag=1;
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 800084a:	2201      	movs	r2, #1
 800084c:	801a      	strh	r2, [r3, #0]

}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	20004158 	.word	0x20004158

0800085c <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
	//sprintf(msg,"in Full\r\n");
	//HAL_UART_Transmit(&huart2, msg,strlen(msg), 200);
	FullFlag=1;
 8000864:	4b03      	ldr	r3, [pc, #12]	; (8000874 <HAL_ADC_ConvCpltCallback+0x18>)
 8000866:	2201      	movs	r2, #1
 8000868:	801a      	strh	r2, [r3, #0]
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	2000415a 	.word	0x2000415a

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <HAL_MspInit+0x5c>)
 800088c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800088e:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <HAL_MspInit+0x5c>)
 8000890:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000894:	6253      	str	r3, [r2, #36]	; 0x24
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_MspInit+0x5c>)
 8000898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <HAL_MspInit+0x5c>)
 80008a4:	6a1b      	ldr	r3, [r3, #32]
 80008a6:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <HAL_MspInit+0x5c>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6213      	str	r3, [r2, #32]
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <HAL_MspInit+0x5c>)
 80008b0:	6a1b      	ldr	r3, [r3, #32]
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_MspInit+0x5c>)
 80008bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008be:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <HAL_MspInit+0x5c>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6253      	str	r3, [r2, #36]	; 0x24
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_MspInit+0x5c>)
 80008c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008d2:	2007      	movs	r0, #7
 80008d4:	f000 feda 	bl	800168c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40023800 	.word	0x40023800

080008e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a41      	ldr	r2, [pc, #260]	; (8000a08 <HAL_ADC_MspInit+0x124>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d17b      	bne.n	80009fe <HAL_ADC_MspInit+0x11a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000906:	4b41      	ldr	r3, [pc, #260]	; (8000a0c <HAL_ADC_MspInit+0x128>)
 8000908:	6a1b      	ldr	r3, [r3, #32]
 800090a:	4a40      	ldr	r2, [pc, #256]	; (8000a0c <HAL_ADC_MspInit+0x128>)
 800090c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000910:	6213      	str	r3, [r2, #32]
 8000912:	4b3e      	ldr	r3, [pc, #248]	; (8000a0c <HAL_ADC_MspInit+0x128>)
 8000914:	6a1b      	ldr	r3, [r3, #32]
 8000916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800091a:	61bb      	str	r3, [r7, #24]
 800091c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	4b3b      	ldr	r3, [pc, #236]	; (8000a0c <HAL_ADC_MspInit+0x128>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	4a3a      	ldr	r2, [pc, #232]	; (8000a0c <HAL_ADC_MspInit+0x128>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	61d3      	str	r3, [r2, #28]
 800092a:	4b38      	ldr	r3, [pc, #224]	; (8000a0c <HAL_ADC_MspInit+0x128>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b35      	ldr	r3, [pc, #212]	; (8000a0c <HAL_ADC_MspInit+0x128>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	4a34      	ldr	r2, [pc, #208]	; (8000a0c <HAL_ADC_MspInit+0x128>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	61d3      	str	r3, [r2, #28]
 8000942:	4b32      	ldr	r3, [pc, #200]	; (8000a0c <HAL_ADC_MspInit+0x128>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b2f      	ldr	r3, [pc, #188]	; (8000a0c <HAL_ADC_MspInit+0x128>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	4a2e      	ldr	r2, [pc, #184]	; (8000a0c <HAL_ADC_MspInit+0x128>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	61d3      	str	r3, [r2, #28]
 800095a:	4b2c      	ldr	r3, [pc, #176]	; (8000a0c <HAL_ADC_MspInit+0x128>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC_IN10
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    PB2     ------> ADC_IN0b
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000966:	2301      	movs	r3, #1
 8000968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800096a:	2303      	movs	r3, #3
 800096c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4825      	ldr	r0, [pc, #148]	; (8000a10 <HAL_ADC_MspInit+0x12c>)
 800097a:	f001 f87b 	bl	8001a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 800097e:	2312      	movs	r3, #18
 8000980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000982:	2303      	movs	r3, #3
 8000984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4820      	ldr	r0, [pc, #128]	; (8000a14 <HAL_ADC_MspInit+0x130>)
 8000992:	f001 f86f 	bl	8001a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000996:	2304      	movs	r3, #4
 8000998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800099a:	2303      	movs	r3, #3
 800099c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	481b      	ldr	r0, [pc, #108]	; (8000a18 <HAL_ADC_MspInit+0x134>)
 80009aa:	f001 f863 	bl	8001a74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80009ae:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <HAL_ADC_MspInit+0x138>)
 80009b0:	4a1b      	ldr	r2, [pc, #108]	; (8000a20 <HAL_ADC_MspInit+0x13c>)
 80009b2:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <HAL_ADC_MspInit+0x138>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <HAL_ADC_MspInit+0x138>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <HAL_ADC_MspInit+0x138>)
 80009c2:	2280      	movs	r2, #128	; 0x80
 80009c4:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <HAL_ADC_MspInit+0x138>)
 80009c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009cc:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <HAL_ADC_MspInit+0x138>)
 80009d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009d4:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <HAL_ADC_MspInit+0x138>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_ADC_MspInit+0x138>)
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80009e2:	480e      	ldr	r0, [pc, #56]	; (8000a1c <HAL_ADC_MspInit+0x138>)
 80009e4:	f000 fe94 	bl	8001710 <HAL_DMA_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <HAL_ADC_MspInit+0x10e>
    {
      Error_Handler();
 80009ee:	f7ff ff43 	bl	8000878 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <HAL_ADC_MspInit+0x138>)
 80009f6:	645a      	str	r2, [r3, #68]	; 0x44
 80009f8:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <HAL_ADC_MspInit+0x138>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009fe:	bf00      	nop
 8000a00:	3730      	adds	r7, #48	; 0x30
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40012400 	.word	0x40012400
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020800 	.word	0x40020800
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020400 	.word	0x40020400
 8000a1c:	200000cc 	.word	0x200000cc
 8000a20:	40026008 	.word	0x40026008

08000a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <HAL_UART_MspInit+0x7c>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d127      	bne.n	8000a96 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <HAL_UART_MspInit+0x80>)
 8000a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a4a:	4a16      	ldr	r2, [pc, #88]	; (8000aa4 <HAL_UART_MspInit+0x80>)
 8000a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a50:	6253      	str	r3, [r2, #36]	; 0x24
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <HAL_UART_MspInit+0x80>)
 8000a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <HAL_UART_MspInit+0x80>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	4a10      	ldr	r2, [pc, #64]	; (8000aa4 <HAL_UART_MspInit+0x80>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	61d3      	str	r3, [r2, #28]
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_UART_MspInit+0x80>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a76:	230c      	movs	r3, #12
 8000a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a86:	2307      	movs	r3, #7
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <HAL_UART_MspInit+0x84>)
 8000a92:	f000 ffef 	bl	8001a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a96:	bf00      	nop
 8000a98:	3728      	adds	r7, #40	; 0x28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40004400 	.word	0x40004400
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020000 	.word	0x40020000

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <MemManage_Handler+0x4>

08000abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr

08000ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr

08000ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr

08000aee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af2:	f000 f8c1 	bl	8000c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <DMA1_Channel1_IRQHandler+0x10>)
 8000b02:	f000 fed9 	bl	80018b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000cc 	.word	0x200000cc

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <_sbrk+0x5c>)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <_sbrk+0x60>)
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <_sbrk+0x64>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <_sbrk+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d207      	bcs.n	8000b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b40:	f002 f984 	bl	8002e4c <__errno>
 8000b44:	4603      	mov	r3, r0
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <_sbrk+0x64>)
 8000b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20014000 	.word	0x20014000
 8000b70:	00000400 	.word	0x00000400
 8000b74:	20004170 	.word	0x20004170
 8000b78:	200042c0 	.word	0x200042c0

08000b7c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b88:	f7ff fff8 	bl	8000b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480b      	ldr	r0, [pc, #44]	; (8000bbc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b8e:	490c      	ldr	r1, [pc, #48]	; (8000bc0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b90:	4a0c      	ldr	r2, [pc, #48]	; (8000bc4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a09      	ldr	r2, [pc, #36]	; (8000bc8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ba4:	4c09      	ldr	r4, [pc, #36]	; (8000bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb2:	f002 f951 	bl	8002e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bb6:	f7ff fc69 	bl	800048c <main>
  bx lr
 8000bba:	4770      	bx	lr
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000bc4:	080037e8 	.word	0x080037e8
  ldr r2, =_sbss
 8000bc8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000bcc:	200042c0 	.word	0x200042c0

08000bd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC1_IRQHandler>

08000bd2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 fd55 	bl	800168c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000be2:	2000      	movs	r0, #0
 8000be4:	f000 f80e 	bl	8000c04 <HAL_InitTick>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	71fb      	strb	r3, [r7, #7]
 8000bf2:	e001      	b.n	8000bf8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bf4:	f7ff fe46 	bl	8000884 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <HAL_InitTick+0x68>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d022      	beq.n	8000c5e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_InitTick+0x6c>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <HAL_InitTick+0x68>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c24:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 fd62 	bl	80016f6 <HAL_SYSTICK_Config>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d10f      	bne.n	8000c58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b0f      	cmp	r3, #15
 8000c3c:	d809      	bhi.n	8000c52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	6879      	ldr	r1, [r7, #4]
 8000c42:	f04f 30ff 	mov.w	r0, #4294967295
 8000c46:	f000 fd2c 	bl	80016a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <HAL_InitTick+0x70>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	e007      	b.n	8000c62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	73fb      	strb	r3, [r7, #15]
 8000c56:	e004      	b.n	8000c62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e001      	b.n	8000c62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000000 	.word	0x20000000
 8000c74:	20000004 	.word	0x20000004

08000c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_IncTick+0x1c>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <HAL_IncTick+0x20>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4413      	add	r3, r2
 8000c86:	4a03      	ldr	r2, [pc, #12]	; (8000c94 <HAL_IncTick+0x1c>)
 8000c88:	6013      	str	r3, [r2, #0]
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20004174 	.word	0x20004174
 8000c98:	20000008 	.word	0x20000008

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b02      	ldr	r3, [pc, #8]	; (8000cac <HAL_GetTick+0x10>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	20004174 	.word	0x20004174

08000cb0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08e      	sub	sp, #56	; 0x38
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d101      	bne.n	8000cd0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e127      	b.n	8000f20 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	691b      	ldr	r3, [r3, #16]
 8000cd4:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d115      	bne.n	8000d0a <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cec:	4b8e      	ldr	r3, [pc, #568]	; (8000f28 <HAL_ADC_Init+0x278>)
 8000cee:	6a1b      	ldr	r3, [r3, #32]
 8000cf0:	4a8d      	ldr	r2, [pc, #564]	; (8000f28 <HAL_ADC_Init+0x278>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	6213      	str	r3, [r2, #32]
 8000cf8:	4b8b      	ldr	r3, [pc, #556]	; (8000f28 <HAL_ADC_Init+0x278>)
 8000cfa:	6a1b      	ldr	r3, [r3, #32]
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff fded 	bl	80008e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	f003 0310 	and.w	r3, r3, #16
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 80ff 	bne.w	8000f16 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d20:	f023 0302 	bic.w	r3, r3, #2
 8000d24:	f043 0202 	orr.w	r2, r3, #2
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8000d2c:	4b7f      	ldr	r3, [pc, #508]	; (8000f2c <HAL_ADC_Init+0x27c>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	497c      	ldr	r1, [pc, #496]	; (8000f2c <HAL_ADC_Init+0x27c>)
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000d46:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d4e:	4619      	mov	r1, r3
 8000d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d54:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	fa93 f3a3 	rbit	r3, r3
 8000d5c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	fab3 f383 	clz	r3, r3
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8000d6a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000d70:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d78:	4619      	mov	r1, r3
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d80:	fa93 f3a3 	rbit	r3, r3
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	fab3 f383 	clz	r3, r3
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8000d92:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8000d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d96:	4313      	orrs	r3, r2
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d9e:	2b10      	cmp	r3, #16
 8000da0:	d007      	beq.n	8000db2 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000daa:	4313      	orrs	r3, r2
 8000dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dae:	4313      	orrs	r3, r2
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dbc:	2b40      	cmp	r3, #64	; 0x40
 8000dbe:	d04f      	beq.n	8000e60 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000dd2:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	6912      	ldr	r2, [r2, #16]
 8000dd8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8000ddc:	d003      	beq.n	8000de6 <HAL_ADC_Init+0x136>
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	6912      	ldr	r2, [r2, #16]
 8000de2:	2a01      	cmp	r2, #1
 8000de4:	d102      	bne.n	8000dec <HAL_ADC_Init+0x13c>
 8000de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dea:	e000      	b.n	8000dee <HAL_ADC_Init+0x13e>
 8000dec:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8000dee:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000df2:	4313      	orrs	r3, r2
 8000df4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d125      	bne.n	8000e4c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d114      	bne.n	8000e34 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000e14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	fa92 f2a2 	rbit	r2, r2
 8000e1c:	617a      	str	r2, [r7, #20]
  return result;
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	4093      	lsls	r3, r2
 8000e28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30
 8000e32:	e00b      	b.n	8000e4c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e38:	f043 0220 	orr.w	r2, r3, #32
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e44:	f043 0201 	orr.w	r2, r3, #1
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	4b37      	ldr	r3, [pc, #220]	; (8000f30 <HAL_ADC_Init+0x280>)
 8000e54:	4013      	ands	r3, r2
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	6812      	ldr	r2, [r2, #0]
 8000e5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e5c:	430b      	orrs	r3, r1
 8000e5e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	4b33      	ldr	r3, [pc, #204]	; (8000f34 <HAL_ADC_Init+0x284>)
 8000e68:	4013      	ands	r3, r2
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	6812      	ldr	r2, [r2, #0]
 8000e6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000e70:	430b      	orrs	r3, r1
 8000e72:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	691b      	ldr	r3, [r3, #16]
 8000e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e7c:	d003      	beq.n	8000e86 <HAL_ADC_Init+0x1d6>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d119      	bne.n	8000eba <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e94:	3b01      	subs	r3, #1
 8000e96:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8000e9a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	fa92 f2a2 	rbit	r2, r2
 8000ea2:	60fa      	str	r2, [r7, #12]
  return result;
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	fab2 f282 	clz	r2, r2
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	fa03 f202 	lsl.w	r2, r3, r2
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	631a      	str	r2, [r3, #48]	; 0x30
 8000eb8:	e007      	b.n	8000eca <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000ec8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_ADC_Init+0x288>)
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d10b      	bne.n	8000ef2 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee4:	f023 0303 	bic.w	r3, r3, #3
 8000ee8:	f043 0201 	orr.w	r2, r3, #1
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ef0:	e014      	b.n	8000f1c <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f023 0312 	bic.w	r3, r3, #18
 8000efa:	f043 0210 	orr.w	r2, r3, #16
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f06:	f043 0201 	orr.w	r2, r3, #1
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000f14:	e002      	b.n	8000f1c <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3738      	adds	r7, #56	; 0x38
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40012700 	.word	0x40012700
 8000f30:	fcfc16ff 	.word	0xfcfc16ff
 8000f34:	c0fff189 	.word	0xc0fff189
 8000f38:	bf80fffe 	.word	0xbf80fffe

08000f3c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d101      	bne.n	8000f5a <HAL_ADC_Start_DMA+0x1e>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e074      	b.n	8001044 <HAL_ADC_Start_DMA+0x108>
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	f000 f9ee 	bl	8001344 <ADC_Enable>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000f6c:	7dfb      	ldrb	r3, [r7, #23]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d167      	bne.n	8001042 <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f7a:	f023 0301 	bic.w	r3, r3, #1
 8000f7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d007      	beq.n	8000fa4 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fb0:	d106      	bne.n	8000fc0 <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fb6:	f023 0206 	bic.w	r2, r3, #6
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	651a      	str	r2, [r3, #80]	; 0x50
 8000fbe:	e002      	b.n	8000fc6 <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	4a1e      	ldr	r2, [pc, #120]	; (800104c <HAL_ADC_Start_DMA+0x110>)
 8000fd4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a1d      	ldr	r2, [pc, #116]	; (8001050 <HAL_ADC_Start_DMA+0x114>)
 8000fdc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	4a1c      	ldr	r2, [pc, #112]	; (8001054 <HAL_ADC_Start_DMA+0x118>)
 8000fe4:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000fee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000ffe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800100e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3358      	adds	r3, #88	; 0x58
 800101a:	4619      	mov	r1, r3
 800101c:	68ba      	ldr	r2, [r7, #8]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f000 fbea 	bl	80017f8 <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d107      	bne.n	8001042 <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689a      	ldr	r2, [r3, #8]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001040:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001042:	7dfb      	ldrb	r3, [r7, #23]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	080013fd 	.word	0x080013fd
 8001050:	080014a5 	.word	0x080014a5
 8001054:	080014c1 	.word	0x080014c1

08001058 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
	...

0800106c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001084:	2b01      	cmp	r3, #1
 8001086:	d101      	bne.n	800108c <HAL_ADC_ConfigChannel+0x20>
 8001088:	2302      	movs	r3, #2
 800108a:	e14f      	b.n	800132c <HAL_ADC_ConfigChannel+0x2c0>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b06      	cmp	r3, #6
 800109a:	d81c      	bhi.n	80010d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	3b05      	subs	r3, #5
 80010ae:	221f      	movs	r2, #31
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	4019      	ands	r1, r3
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	6818      	ldr	r0, [r3, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	4613      	mov	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	3b05      	subs	r3, #5
 80010c8:	fa00 f203 	lsl.w	r2, r0, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	430a      	orrs	r2, r1
 80010d2:	641a      	str	r2, [r3, #64]	; 0x40
 80010d4:	e07e      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	2b0c      	cmp	r3, #12
 80010dc:	d81c      	bhi.n	8001118 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	4613      	mov	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	3b23      	subs	r3, #35	; 0x23
 80010f0:	221f      	movs	r2, #31
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	4019      	ands	r1, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	6818      	ldr	r0, [r3, #0]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	3b23      	subs	r3, #35	; 0x23
 800110a:	fa00 f203 	lsl.w	r2, r0, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	430a      	orrs	r2, r1
 8001114:	63da      	str	r2, [r3, #60]	; 0x3c
 8001116:	e05d      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b12      	cmp	r3, #18
 800111e:	d81c      	bhi.n	800115a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	3b41      	subs	r3, #65	; 0x41
 8001132:	221f      	movs	r2, #31
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	4019      	ands	r1, r3
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	3b41      	subs	r3, #65	; 0x41
 800114c:	fa00 f203 	lsl.w	r2, r0, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	430a      	orrs	r2, r1
 8001156:	639a      	str	r2, [r3, #56]	; 0x38
 8001158:	e03c      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b18      	cmp	r3, #24
 8001160:	d81c      	bhi.n	800119c <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	3b5f      	subs	r3, #95	; 0x5f
 8001174:	221f      	movs	r2, #31
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	4019      	ands	r1, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	6818      	ldr	r0, [r3, #0]
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	3b5f      	subs	r3, #95	; 0x5f
 800118e:	fa00 f203 	lsl.w	r2, r0, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	430a      	orrs	r2, r1
 8001198:	635a      	str	r2, [r3, #52]	; 0x34
 800119a:	e01b      	b.n	80011d4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	3b7d      	subs	r3, #125	; 0x7d
 80011ae:	221f      	movs	r2, #31
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	4019      	ands	r1, r3
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	3b7d      	subs	r3, #125	; 0x7d
 80011c8:	fa00 f203 	lsl.w	r2, r0, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	430a      	orrs	r2, r1
 80011d2:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b09      	cmp	r3, #9
 80011da:	d81a      	bhi.n	8001212 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6959      	ldr	r1, [r3, #20]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4613      	mov	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	2207      	movs	r2, #7
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	4019      	ands	r1, r3
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	6898      	ldr	r0, [r3, #8]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4613      	mov	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4413      	add	r3, r2
 8001204:	fa00 f203 	lsl.w	r2, r0, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	430a      	orrs	r2, r1
 800120e:	615a      	str	r2, [r3, #20]
 8001210:	e05d      	b.n	80012ce <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b13      	cmp	r3, #19
 8001218:	d81c      	bhi.n	8001254 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6919      	ldr	r1, [r3, #16]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4613      	mov	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	3b1e      	subs	r3, #30
 800122c:	2207      	movs	r2, #7
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	4019      	ands	r1, r3
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	6898      	ldr	r0, [r3, #8]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	3b1e      	subs	r3, #30
 8001246:	fa00 f203 	lsl.w	r2, r0, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	611a      	str	r2, [r3, #16]
 8001252:	e03c      	b.n	80012ce <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b1d      	cmp	r3, #29
 800125a:	d81c      	bhi.n	8001296 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68d9      	ldr	r1, [r3, #12]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	4613      	mov	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4413      	add	r3, r2
 800126c:	3b3c      	subs	r3, #60	; 0x3c
 800126e:	2207      	movs	r2, #7
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	4019      	ands	r1, r3
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	6898      	ldr	r0, [r3, #8]
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4613      	mov	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4413      	add	r3, r2
 8001286:	3b3c      	subs	r3, #60	; 0x3c
 8001288:	fa00 f203 	lsl.w	r2, r0, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	430a      	orrs	r2, r1
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	e01b      	b.n	80012ce <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	3b5a      	subs	r3, #90	; 0x5a
 80012a8:	2207      	movs	r2, #7
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	4019      	ands	r1, r3
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	6898      	ldr	r0, [r3, #8]
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	3b5a      	subs	r3, #90	; 0x5a
 80012c2:	fa00 f203 	lsl.w	r2, r0, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b10      	cmp	r3, #16
 80012d4:	d003      	beq.n	80012de <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012da:	2b11      	cmp	r3, #17
 80012dc:	d121      	bne.n	8001322 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <HAL_ADC_ConfigChannel+0x2cc>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d11b      	bne.n	8001322 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80012ea:	4b13      	ldr	r3, [pc, #76]	; (8001338 <HAL_ADC_ConfigChannel+0x2cc>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4a12      	ldr	r2, [pc, #72]	; (8001338 <HAL_ADC_ConfigChannel+0x2cc>)
 80012f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012f4:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b10      	cmp	r3, #16
 80012fc:	d111      	bne.n	8001322 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <HAL_ADC_ConfigChannel+0x2d0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a0f      	ldr	r2, [pc, #60]	; (8001340 <HAL_ADC_ConfigChannel+0x2d4>)
 8001304:	fba2 2303 	umull	r2, r3, r2, r3
 8001308:	0c9a      	lsrs	r2, r3, #18
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001314:	e002      	b.n	800131c <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	3b01      	subs	r3, #1
 800131a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f9      	bne.n	8001316 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800132a:	7bfb      	ldrb	r3, [r7, #15]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40012700 	.word	0x40012700
 800133c:	20000000 	.word	0x20000000
 8001340:	431bde83 	.word	0x431bde83

08001344 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800135e:	2b40      	cmp	r3, #64	; 0x40
 8001360:	d043      	beq.n	80013ea <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f042 0201 	orr.w	r2, r2, #1
 8001370:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001372:	4b20      	ldr	r3, [pc, #128]	; (80013f4 <ADC_Enable+0xb0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a20      	ldr	r2, [pc, #128]	; (80013f8 <ADC_Enable+0xb4>)
 8001378:	fba2 2303 	umull	r2, r3, r2, r3
 800137c:	0c9a      	lsrs	r2, r3, #18
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001386:	e002      	b.n	800138e <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	3b01      	subs	r3, #1
 800138c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f9      	bne.n	8001388 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8001394:	f7ff fc82 	bl	8000c9c <HAL_GetTick>
 8001398:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800139a:	e01f      	b.n	80013dc <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 800139c:	f7ff fc7e 	bl	8000c9c <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d918      	bls.n	80013dc <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013b4:	2b40      	cmp	r3, #64	; 0x40
 80013b6:	d011      	beq.n	80013dc <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013bc:	f043 0210 	orr.w	r2, r3, #16
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013c8:	f043 0201 	orr.w	r2, r3, #1
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e007      	b.n	80013ec <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013e6:	2b40      	cmp	r3, #64	; 0x40
 80013e8:	d1d8      	bne.n	800139c <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000000 	.word	0x20000000
 80013f8:	431bde83 	.word	0x431bde83

080013fc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001408:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001412:	2b00      	cmp	r3, #0
 8001414:	d13d      	bne.n	8001492 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d12c      	bne.n	800148a <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001436:	2b00      	cmp	r3, #0
 8001438:	d127      	bne.n	800148a <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001440:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001444:	2b00      	cmp	r3, #0
 8001446:	d006      	beq.n	8001456 <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001452:	2b00      	cmp	r3, #0
 8001454:	d119      	bne.n	800148a <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0220 	bic.w	r2, r2, #32
 8001464:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d105      	bne.n	800148a <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	f043 0201 	orr.w	r2, r3, #1
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f7ff f9e6 	bl	800085c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001490:	e004      	b.n	800149c <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	4798      	blx	r3
}
 800149c:	bf00      	nop
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f7ff f9c4 	bl	8000840 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014de:	f043 0204 	orr.w	r2, r3, #4
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f7ff fdb6 	bl	8001058 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014ec:	bf00      	nop
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800151c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001526:	4a04      	ldr	r2, [pc, #16]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60d3      	str	r3, [r2, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <__NVIC_GetPriorityGrouping+0x18>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 0307 	and.w	r3, r3, #7
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	db0b      	blt.n	8001582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	f003 021f 	and.w	r2, r3, #31
 8001570:	4906      	ldr	r1, [pc, #24]	; (800158c <__NVIC_EnableIRQ+0x34>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	2001      	movs	r0, #1
 800157a:	fa00 f202 	lsl.w	r2, r0, r2
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	e000e100 	.word	0xe000e100

08001590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db0a      	blt.n	80015ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <__NVIC_SetPriority+0x4c>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	0112      	lsls	r2, r2, #4
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b8:	e00a      	b.n	80015d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4908      	ldr	r1, [pc, #32]	; (80015e0 <__NVIC_SetPriority+0x50>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	3b04      	subs	r3, #4
 80015c8:	0112      	lsls	r2, r2, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	761a      	strb	r2, [r3, #24]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000e100 	.word	0xe000e100
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f1c3 0307 	rsb	r3, r3, #7
 80015fe:	2b04      	cmp	r3, #4
 8001600:	bf28      	it	cs
 8001602:	2304      	movcs	r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	2b06      	cmp	r3, #6
 800160c:	d902      	bls.n	8001614 <NVIC_EncodePriority+0x30>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b03      	subs	r3, #3
 8001612:	e000      	b.n	8001616 <NVIC_EncodePriority+0x32>
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 32ff 	mov.w	r2, #4294967295
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43d9      	mvns	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4313      	orrs	r3, r2
         );
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	; 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001658:	d301      	bcc.n	800165e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165a:	2301      	movs	r3, #1
 800165c:	e00f      	b.n	800167e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165e:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <SysTick_Config+0x40>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001666:	210f      	movs	r1, #15
 8001668:	f04f 30ff 	mov.w	r0, #4294967295
 800166c:	f7ff ff90 	bl	8001590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <SysTick_Config+0x40>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001676:	4b04      	ldr	r3, [pc, #16]	; (8001688 <SysTick_Config+0x40>)
 8001678:	2207      	movs	r2, #7
 800167a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	e000e010 	.word	0xe000e010

0800168c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff2d 	bl	80014f4 <__NVIC_SetPriorityGrouping>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b4:	f7ff ff42 	bl	800153c <__NVIC_GetPriorityGrouping>
 80016b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f7ff ff90 	bl	80015e4 <NVIC_EncodePriority>
 80016c4:	4602      	mov	r2, r0
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff5f 	bl	8001590 <__NVIC_SetPriority>
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff35 	bl	8001558 <__NVIC_EnableIRQ>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ffa2 	bl	8001648 <SysTick_Config>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e059      	b.n	80017d6 <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <HAL_DMA_Init+0xd0>)
 800172a:	429a      	cmp	r2, r3
 800172c:	d80f      	bhi.n	800174e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <HAL_DMA_Init+0xd4>)
 8001736:	4413      	add	r3, r2
 8001738:	4a2b      	ldr	r2, [pc, #172]	; (80017e8 <HAL_DMA_Init+0xd8>)
 800173a:	fba2 2303 	umull	r2, r3, r2, r3
 800173e:	091b      	lsrs	r3, r3, #4
 8001740:	009a      	lsls	r2, r3, #2
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a28      	ldr	r2, [pc, #160]	; (80017ec <HAL_DMA_Init+0xdc>)
 800174a:	63da      	str	r2, [r3, #60]	; 0x3c
 800174c:	e00e      	b.n	800176c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <HAL_DMA_Init+0xe0>)
 8001756:	4413      	add	r3, r2
 8001758:	4a23      	ldr	r2, [pc, #140]	; (80017e8 <HAL_DMA_Init+0xd8>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	091b      	lsrs	r3, r3, #4
 8001760:	009a      	lsls	r2, r3, #2
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a22      	ldr	r2, [pc, #136]	; (80017f4 <HAL_DMA_Init+0xe4>)
 800176a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2202      	movs	r2, #2
 8001770:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001786:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001790:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	40026407 	.word	0x40026407
 80017e4:	bffd9ff8 	.word	0xbffd9ff8
 80017e8:	cccccccd 	.word	0xcccccccd
 80017ec:	40026000 	.word	0x40026000
 80017f0:	bffd9bf8 	.word	0xbffd9bf8
 80017f4:	40026400 	.word	0x40026400

080017f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
 8001804:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d101      	bne.n	8001818 <HAL_DMA_Start_IT+0x20>
 8001814:	2302      	movs	r3, #2
 8001816:	e04b      	b.n	80018b0 <HAL_DMA_Start_IT+0xb8>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b01      	cmp	r3, #1
 800182a:	d13a      	bne.n	80018a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2202      	movs	r2, #2
 8001830:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0201 	bic.w	r2, r2, #1
 8001848:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	68b9      	ldr	r1, [r7, #8]
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f000 f8e0 	bl	8001a16 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185a:	2b00      	cmp	r3, #0
 800185c:	d008      	beq.n	8001870 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f042 020e 	orr.w	r2, r2, #14
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	e00f      	b.n	8001890 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0204 	bic.w	r2, r2, #4
 800187e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 020a 	orr.w	r2, r2, #10
 800188e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 0201 	orr.w	r2, r2, #1
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	e005      	b.n	80018ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80018aa:	2302      	movs	r3, #2
 80018ac:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80018ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f003 031c 	and.w	r3, r3, #28
 80018d8:	2204      	movs	r2, #4
 80018da:	409a      	lsls	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4013      	ands	r3, r2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d026      	beq.n	8001932 <HAL_DMA_IRQHandler+0x7a>
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d021      	beq.n	8001932 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0320 	and.w	r3, r3, #32
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d107      	bne.n	800190c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0204 	bic.w	r2, r2, #4
 800190a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	f003 021c 	and.w	r2, r3, #28
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001918:	2104      	movs	r1, #4
 800191a:	fa01 f202 	lsl.w	r2, r1, r2
 800191e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001924:	2b00      	cmp	r3, #0
 8001926:	d071      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001930:	e06c      	b.n	8001a0c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f003 031c 	and.w	r3, r3, #28
 800193a:	2202      	movs	r2, #2
 800193c:	409a      	lsls	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4013      	ands	r3, r2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d02e      	beq.n	80019a4 <HAL_DMA_IRQHandler+0xec>
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d029      	beq.n	80019a4 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0320 	and.w	r3, r3, #32
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10b      	bne.n	8001976 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 020a 	bic.w	r2, r2, #10
 800196c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f003 021c 	and.w	r2, r3, #28
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001982:	2102      	movs	r1, #2
 8001984:	fa01 f202 	lsl.w	r2, r1, r2
 8001988:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	2b00      	cmp	r3, #0
 8001998:	d038      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80019a2:	e033      	b.n	8001a0c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f003 031c 	and.w	r3, r3, #28
 80019ac:	2208      	movs	r2, #8
 80019ae:	409a      	lsls	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d02a      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x156>
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d025      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 020e 	bic.w	r2, r2, #14
 80019d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f003 021c 	and.w	r2, r3, #28
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019de:	2101      	movs	r1, #1
 80019e0:	fa01 f202 	lsl.w	r2, r1, r2
 80019e4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d004      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
}
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b085      	sub	sp, #20
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	f003 021c 	and.w	r2, r3, #28
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a30:	2101      	movs	r1, #1
 8001a32:	fa01 f202 	lsl.w	r2, r1, r2
 8001a36:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b10      	cmp	r3, #16
 8001a46:	d108      	bne.n	8001a5a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a58:	e007      	b.n	8001a6a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	60da      	str	r2, [r3, #12]
}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a8a:	e160      	b.n	8001d4e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	2101      	movs	r1, #1
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	fa01 f303 	lsl.w	r3, r1, r3
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 8152 	beq.w	8001d48 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d005      	beq.n	8001abc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d130      	bne.n	8001b1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	68da      	ldr	r2, [r3, #12]
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001af2:	2201      	movs	r2, #1
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	091b      	lsrs	r3, r3, #4
 8001b08:	f003 0201 	and.w	r2, r3, #1
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d017      	beq.n	8001b5a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	2203      	movs	r2, #3
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d123      	bne.n	8001bae <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	08da      	lsrs	r2, r3, #3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3208      	adds	r2, #8
 8001b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b72:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	220f      	movs	r2, #15
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4013      	ands	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	08da      	lsrs	r2, r3, #3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3208      	adds	r2, #8
 8001ba8:	6939      	ldr	r1, [r7, #16]
 8001baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	2203      	movs	r2, #3
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 0203 	and.w	r2, r3, #3
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 80ac 	beq.w	8001d48 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf0:	4b5e      	ldr	r3, [pc, #376]	; (8001d6c <HAL_GPIO_Init+0x2f8>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	4a5d      	ldr	r2, [pc, #372]	; (8001d6c <HAL_GPIO_Init+0x2f8>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6213      	str	r3, [r2, #32]
 8001bfc:	4b5b      	ldr	r3, [pc, #364]	; (8001d6c <HAL_GPIO_Init+0x2f8>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	60bb      	str	r3, [r7, #8]
 8001c06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c08:	4a59      	ldr	r2, [pc, #356]	; (8001d70 <HAL_GPIO_Init+0x2fc>)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	089b      	lsrs	r3, r3, #2
 8001c0e:	3302      	adds	r3, #2
 8001c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	220f      	movs	r2, #15
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a51      	ldr	r2, [pc, #324]	; (8001d74 <HAL_GPIO_Init+0x300>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d025      	beq.n	8001c80 <HAL_GPIO_Init+0x20c>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a50      	ldr	r2, [pc, #320]	; (8001d78 <HAL_GPIO_Init+0x304>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d01f      	beq.n	8001c7c <HAL_GPIO_Init+0x208>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a4f      	ldr	r2, [pc, #316]	; (8001d7c <HAL_GPIO_Init+0x308>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d019      	beq.n	8001c78 <HAL_GPIO_Init+0x204>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a4e      	ldr	r2, [pc, #312]	; (8001d80 <HAL_GPIO_Init+0x30c>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d013      	beq.n	8001c74 <HAL_GPIO_Init+0x200>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a4d      	ldr	r2, [pc, #308]	; (8001d84 <HAL_GPIO_Init+0x310>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d00d      	beq.n	8001c70 <HAL_GPIO_Init+0x1fc>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a4c      	ldr	r2, [pc, #304]	; (8001d88 <HAL_GPIO_Init+0x314>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d007      	beq.n	8001c6c <HAL_GPIO_Init+0x1f8>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a4b      	ldr	r2, [pc, #300]	; (8001d8c <HAL_GPIO_Init+0x318>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d101      	bne.n	8001c68 <HAL_GPIO_Init+0x1f4>
 8001c64:	2306      	movs	r3, #6
 8001c66:	e00c      	b.n	8001c82 <HAL_GPIO_Init+0x20e>
 8001c68:	2307      	movs	r3, #7
 8001c6a:	e00a      	b.n	8001c82 <HAL_GPIO_Init+0x20e>
 8001c6c:	2305      	movs	r3, #5
 8001c6e:	e008      	b.n	8001c82 <HAL_GPIO_Init+0x20e>
 8001c70:	2304      	movs	r3, #4
 8001c72:	e006      	b.n	8001c82 <HAL_GPIO_Init+0x20e>
 8001c74:	2303      	movs	r3, #3
 8001c76:	e004      	b.n	8001c82 <HAL_GPIO_Init+0x20e>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e002      	b.n	8001c82 <HAL_GPIO_Init+0x20e>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <HAL_GPIO_Init+0x20e>
 8001c80:	2300      	movs	r3, #0
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	f002 0203 	and.w	r2, r2, #3
 8001c88:	0092      	lsls	r2, r2, #2
 8001c8a:	4093      	lsls	r3, r2
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c92:	4937      	ldr	r1, [pc, #220]	; (8001d70 <HAL_GPIO_Init+0x2fc>)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	089b      	lsrs	r3, r3, #2
 8001c98:	3302      	adds	r3, #2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca0:	4b3b      	ldr	r3, [pc, #236]	; (8001d90 <HAL_GPIO_Init+0x31c>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cc4:	4a32      	ldr	r2, [pc, #200]	; (8001d90 <HAL_GPIO_Init+0x31c>)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cca:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <HAL_GPIO_Init+0x31c>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cee:	4a28      	ldr	r2, [pc, #160]	; (8001d90 <HAL_GPIO_Init+0x31c>)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cf4:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <HAL_GPIO_Init+0x31c>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4013      	ands	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d18:	4a1d      	ldr	r2, [pc, #116]	; (8001d90 <HAL_GPIO_Init+0x31c>)
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <HAL_GPIO_Init+0x31c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d42:	4a13      	ldr	r2, [pc, #76]	; (8001d90 <HAL_GPIO_Init+0x31c>)
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	fa22 f303 	lsr.w	r3, r2, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f47f ae97 	bne.w	8001a8c <HAL_GPIO_Init+0x18>
  }
}
 8001d5e:	bf00      	nop
 8001d60:	bf00      	nop
 8001d62:	371c      	adds	r7, #28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40010000 	.word	0x40010000
 8001d74:	40020000 	.word	0x40020000
 8001d78:	40020400 	.word	0x40020400
 8001d7c:	40020800 	.word	0x40020800
 8001d80:	40020c00 	.word	0x40020c00
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40021400 	.word	0x40021400
 8001d8c:	40021800 	.word	0x40021800
 8001d90:	40010400 	.word	0x40010400

08001d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
 8001da0:	4613      	mov	r3, r2
 8001da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001da4:	787b      	ldrb	r3, [r7, #1]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001db0:	e003      	b.n	8001dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001db2:	887b      	ldrh	r3, [r7, #2]
 8001db4:	041a      	lsls	r2, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	619a      	str	r2, [r3, #24]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e31d      	b.n	8002412 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dd6:	4b94      	ldr	r3, [pc, #592]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001de0:	4b91      	ldr	r3, [pc, #580]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d07b      	beq.n	8001eee <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d006      	beq.n	8001e0a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	2b0c      	cmp	r3, #12
 8001e00:	d10f      	bne.n	8001e22 <HAL_RCC_OscConfig+0x5e>
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e08:	d10b      	bne.n	8001e22 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0a:	4b87      	ldr	r3, [pc, #540]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d06a      	beq.n	8001eec <HAL_RCC_OscConfig+0x128>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d166      	bne.n	8001eec <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e2f7      	b.n	8002412 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d106      	bne.n	8001e38 <HAL_RCC_OscConfig+0x74>
 8001e2a:	4b7f      	ldr	r3, [pc, #508]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a7e      	ldr	r2, [pc, #504]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e02d      	b.n	8001e94 <HAL_RCC_OscConfig+0xd0>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10c      	bne.n	8001e5a <HAL_RCC_OscConfig+0x96>
 8001e40:	4b79      	ldr	r3, [pc, #484]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a78      	ldr	r2, [pc, #480]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	4b76      	ldr	r3, [pc, #472]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a75      	ldr	r2, [pc, #468]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	e01c      	b.n	8001e94 <HAL_RCC_OscConfig+0xd0>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b05      	cmp	r3, #5
 8001e60:	d10c      	bne.n	8001e7c <HAL_RCC_OscConfig+0xb8>
 8001e62:	4b71      	ldr	r3, [pc, #452]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a70      	ldr	r2, [pc, #448]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	4b6e      	ldr	r3, [pc, #440]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a6d      	ldr	r2, [pc, #436]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e00b      	b.n	8001e94 <HAL_RCC_OscConfig+0xd0>
 8001e7c:	4b6a      	ldr	r3, [pc, #424]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a69      	ldr	r2, [pc, #420]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b67      	ldr	r3, [pc, #412]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a66      	ldr	r2, [pc, #408]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d013      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7fe fefe 	bl	8000c9c <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ea4:	f7fe fefa 	bl	8000c9c <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	; 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e2ad      	b.n	8002412 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eb6:	4b5c      	ldr	r3, [pc, #368]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0xe0>
 8001ec2:	e014      	b.n	8001eee <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7fe feea 	bl	8000c9c <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7fe fee6 	bl	8000c9c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	; 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e299      	b.n	8002412 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ede:	4b52      	ldr	r3, [pc, #328]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x108>
 8001eea:	e000      	b.n	8001eee <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d05a      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2b0c      	cmp	r3, #12
 8001f04:	d119      	bne.n	8001f3a <HAL_RCC_OscConfig+0x176>
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d116      	bne.n	8001f3a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0c:	4b46      	ldr	r3, [pc, #280]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_OscConfig+0x160>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e276      	b.n	8002412 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f24:	4b40      	ldr	r3, [pc, #256]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	493d      	ldr	r1, [pc, #244]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f38:	e03a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d020      	beq.n	8001f84 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f42:	4b3a      	ldr	r3, [pc, #232]	; (800202c <HAL_RCC_OscConfig+0x268>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7fe fea8 	bl	8000c9c <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f50:	f7fe fea4 	bl	8000c9c <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e257      	b.n	8002412 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f62:	4b31      	ldr	r3, [pc, #196]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6e:	4b2e      	ldr	r3, [pc, #184]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	021b      	lsls	r3, r3, #8
 8001f7c:	492a      	ldr	r1, [pc, #168]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	604b      	str	r3, [r1, #4]
 8001f82:	e015      	b.n	8001fb0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f84:	4b29      	ldr	r3, [pc, #164]	; (800202c <HAL_RCC_OscConfig+0x268>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8a:	f7fe fe87 	bl	8000c9c <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f92:	f7fe fe83 	bl	8000c9c <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e236      	b.n	8002412 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fa4:	4b20      	ldr	r3, [pc, #128]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f0      	bne.n	8001f92 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80b8 	beq.w	800212e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d170      	bne.n	80020a6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fc4:	4b18      	ldr	r3, [pc, #96]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_OscConfig+0x218>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e21a      	b.n	8002412 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1a      	ldr	r2, [r3, #32]
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d921      	bls.n	8002030 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 fc7d 	bl	80028f0 <RCC_SetFlashLatencyFromMSIRange>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e208      	b.n	8002412 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002000:	4b09      	ldr	r3, [pc, #36]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4906      	ldr	r1, [pc, #24]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002012:	4b05      	ldr	r3, [pc, #20]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	061b      	lsls	r3, r3, #24
 8002020:	4901      	ldr	r1, [pc, #4]	; (8002028 <HAL_RCC_OscConfig+0x264>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]
 8002026:	e020      	b.n	800206a <HAL_RCC_OscConfig+0x2a6>
 8002028:	40023800 	.word	0x40023800
 800202c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002030:	4b99      	ldr	r3, [pc, #612]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	4996      	ldr	r1, [pc, #600]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 800203e:	4313      	orrs	r3, r2
 8002040:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002042:	4b95      	ldr	r3, [pc, #596]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	061b      	lsls	r3, r3, #24
 8002050:	4991      	ldr	r1, [pc, #580]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 8002052:	4313      	orrs	r3, r2
 8002054:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fc48 	bl	80028f0 <RCC_SetFlashLatencyFromMSIRange>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e1d3      	b.n	8002412 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	0b5b      	lsrs	r3, r3, #13
 8002070:	3301      	adds	r3, #1
 8002072:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800207a:	4a87      	ldr	r2, [pc, #540]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 800207c:	6892      	ldr	r2, [r2, #8]
 800207e:	0912      	lsrs	r2, r2, #4
 8002080:	f002 020f 	and.w	r2, r2, #15
 8002084:	4985      	ldr	r1, [pc, #532]	; (800229c <HAL_RCC_OscConfig+0x4d8>)
 8002086:	5c8a      	ldrb	r2, [r1, r2]
 8002088:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800208a:	4a85      	ldr	r2, [pc, #532]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 800208c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800208e:	4b85      	ldr	r3, [pc, #532]	; (80022a4 <HAL_RCC_OscConfig+0x4e0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fdb6 	bl	8000c04 <HAL_InitTick>
 8002098:	4603      	mov	r3, r0
 800209a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d045      	beq.n	800212e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	e1b5      	b.n	8002412 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d029      	beq.n	8002102 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020ae:	4b7e      	ldr	r3, [pc, #504]	; (80022a8 <HAL_RCC_OscConfig+0x4e4>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7fe fdf2 	bl	8000c9c <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020bc:	f7fe fdee 	bl	8000c9c <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e1a1      	b.n	8002412 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020ce:	4b72      	ldr	r3, [pc, #456]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0f0      	beq.n	80020bc <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020da:	4b6f      	ldr	r3, [pc, #444]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	496c      	ldr	r1, [pc, #432]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ec:	4b6a      	ldr	r3, [pc, #424]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	061b      	lsls	r3, r3, #24
 80020fa:	4967      	ldr	r1, [pc, #412]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
 8002100:	e015      	b.n	800212e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002102:	4b69      	ldr	r3, [pc, #420]	; (80022a8 <HAL_RCC_OscConfig+0x4e4>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7fe fdc8 	bl	8000c9c <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002110:	f7fe fdc4 	bl	8000c9c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e177      	b.n	8002412 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002122:	4b5d      	ldr	r3, [pc, #372]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d030      	beq.n	800219c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d016      	beq.n	8002170 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002142:	4b5a      	ldr	r3, [pc, #360]	; (80022ac <HAL_RCC_OscConfig+0x4e8>)
 8002144:	2201      	movs	r2, #1
 8002146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002148:	f7fe fda8 	bl	8000c9c <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002150:	f7fe fda4 	bl	8000c9c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e157      	b.n	8002412 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002162:	4b4d      	ldr	r3, [pc, #308]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 8002164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0x38c>
 800216e:	e015      	b.n	800219c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002170:	4b4e      	ldr	r3, [pc, #312]	; (80022ac <HAL_RCC_OscConfig+0x4e8>)
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002176:	f7fe fd91 	bl	8000c9c <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800217e:	f7fe fd8d 	bl	8000c9c <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e140      	b.n	8002412 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002190:	4b41      	ldr	r3, [pc, #260]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 8002192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1f0      	bne.n	800217e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80b5 	beq.w	8002314 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ae:	4b3a      	ldr	r3, [pc, #232]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10d      	bne.n	80021d6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ba:	4b37      	ldr	r3, [pc, #220]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	4a36      	ldr	r2, [pc, #216]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 80021c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c4:	6253      	str	r3, [r2, #36]	; 0x24
 80021c6:	4b34      	ldr	r3, [pc, #208]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d2:	2301      	movs	r3, #1
 80021d4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d6:	4b36      	ldr	r3, [pc, #216]	; (80022b0 <HAL_RCC_OscConfig+0x4ec>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d118      	bne.n	8002214 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021e2:	4b33      	ldr	r3, [pc, #204]	; (80022b0 <HAL_RCC_OscConfig+0x4ec>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a32      	ldr	r2, [pc, #200]	; (80022b0 <HAL_RCC_OscConfig+0x4ec>)
 80021e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ee:	f7fe fd55 	bl	8000c9c <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f6:	f7fe fd51 	bl	8000c9c <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b64      	cmp	r3, #100	; 0x64
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e104      	b.n	8002412 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002208:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <HAL_RCC_OscConfig+0x4ec>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d106      	bne.n	800222a <HAL_RCC_OscConfig+0x466>
 800221c:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 800221e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002220:	4a1d      	ldr	r2, [pc, #116]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 8002222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002226:	6353      	str	r3, [r2, #52]	; 0x34
 8002228:	e02d      	b.n	8002286 <HAL_RCC_OscConfig+0x4c2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10c      	bne.n	800224c <HAL_RCC_OscConfig+0x488>
 8002232:	4b19      	ldr	r3, [pc, #100]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 8002234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002236:	4a18      	ldr	r2, [pc, #96]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 8002238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800223c:	6353      	str	r3, [r2, #52]	; 0x34
 800223e:	4b16      	ldr	r3, [pc, #88]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 8002240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002242:	4a15      	ldr	r2, [pc, #84]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 8002244:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002248:	6353      	str	r3, [r2, #52]	; 0x34
 800224a:	e01c      	b.n	8002286 <HAL_RCC_OscConfig+0x4c2>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b05      	cmp	r3, #5
 8002252:	d10c      	bne.n	800226e <HAL_RCC_OscConfig+0x4aa>
 8002254:	4b10      	ldr	r3, [pc, #64]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 8002256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002258:	4a0f      	ldr	r2, [pc, #60]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 800225a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800225e:	6353      	str	r3, [r2, #52]	; 0x34
 8002260:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 8002262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002264:	4a0c      	ldr	r2, [pc, #48]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 8002266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226a:	6353      	str	r3, [r2, #52]	; 0x34
 800226c:	e00b      	b.n	8002286 <HAL_RCC_OscConfig+0x4c2>
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 8002270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002272:	4a09      	ldr	r2, [pc, #36]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 8002274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002278:	6353      	str	r3, [r2, #52]	; 0x34
 800227a:	4b07      	ldr	r3, [pc, #28]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 800227c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227e:	4a06      	ldr	r2, [pc, #24]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 8002280:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002284:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d024      	beq.n	80022d8 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228e:	f7fe fd05 	bl	8000c9c <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002294:	e019      	b.n	80022ca <HAL_RCC_OscConfig+0x506>
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800
 800229c:	0800378c 	.word	0x0800378c
 80022a0:	20000000 	.word	0x20000000
 80022a4:	20000004 	.word	0x20000004
 80022a8:	42470020 	.word	0x42470020
 80022ac:	42470680 	.word	0x42470680
 80022b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b4:	f7fe fcf2 	bl	8000c9c <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e0a3      	b.n	8002412 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022ca:	4b54      	ldr	r3, [pc, #336]	; (800241c <HAL_RCC_OscConfig+0x658>)
 80022cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0ee      	beq.n	80022b4 <HAL_RCC_OscConfig+0x4f0>
 80022d6:	e014      	b.n	8002302 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d8:	f7fe fce0 	bl	8000c9c <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022de:	e00a      	b.n	80022f6 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e0:	f7fe fcdc 	bl	8000c9c <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e08d      	b.n	8002412 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022f6:	4b49      	ldr	r3, [pc, #292]	; (800241c <HAL_RCC_OscConfig+0x658>)
 80022f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1ee      	bne.n	80022e0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002302:	7ffb      	ldrb	r3, [r7, #31]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d105      	bne.n	8002314 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002308:	4b44      	ldr	r3, [pc, #272]	; (800241c <HAL_RCC_OscConfig+0x658>)
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	4a43      	ldr	r2, [pc, #268]	; (800241c <HAL_RCC_OscConfig+0x658>)
 800230e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002312:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	2b00      	cmp	r3, #0
 800231a:	d079      	beq.n	8002410 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2b0c      	cmp	r3, #12
 8002320:	d056      	beq.n	80023d0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002326:	2b02      	cmp	r3, #2
 8002328:	d13b      	bne.n	80023a2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232a:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <HAL_RCC_OscConfig+0x65c>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7fe fcb4 	bl	8000c9c <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002338:	f7fe fcb0 	bl	8000c9c <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e063      	b.n	8002412 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800234a:	4b34      	ldr	r3, [pc, #208]	; (800241c <HAL_RCC_OscConfig+0x658>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002356:	4b31      	ldr	r3, [pc, #196]	; (800241c <HAL_RCC_OscConfig+0x658>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002366:	4319      	orrs	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	430b      	orrs	r3, r1
 800236e:	492b      	ldr	r1, [pc, #172]	; (800241c <HAL_RCC_OscConfig+0x658>)
 8002370:	4313      	orrs	r3, r2
 8002372:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002374:	4b2a      	ldr	r3, [pc, #168]	; (8002420 <HAL_RCC_OscConfig+0x65c>)
 8002376:	2201      	movs	r2, #1
 8002378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237a:	f7fe fc8f 	bl	8000c9c <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002382:	f7fe fc8b 	bl	8000c9c <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e03e      	b.n	8002412 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002394:	4b21      	ldr	r3, [pc, #132]	; (800241c <HAL_RCC_OscConfig+0x658>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x5be>
 80023a0:	e036      	b.n	8002410 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a2:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <HAL_RCC_OscConfig+0x65c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a8:	f7fe fc78 	bl	8000c9c <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b0:	f7fe fc74 	bl	8000c9c <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e027      	b.n	8002412 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023c2:	4b16      	ldr	r3, [pc, #88]	; (800241c <HAL_RCC_OscConfig+0x658>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x5ec>
 80023ce:	e01f      	b.n	8002410 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e01a      	b.n	8002412 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <HAL_RCC_OscConfig+0x658>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d10d      	bne.n	800240c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d106      	bne.n	800240c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800
 8002420:	42470060 	.word	0x42470060

08002424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e11a      	b.n	800266e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002438:	4b8f      	ldr	r3, [pc, #572]	; (8002678 <HAL_RCC_ClockConfig+0x254>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d919      	bls.n	800247a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d105      	bne.n	8002458 <HAL_RCC_ClockConfig+0x34>
 800244c:	4b8a      	ldr	r3, [pc, #552]	; (8002678 <HAL_RCC_ClockConfig+0x254>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a89      	ldr	r2, [pc, #548]	; (8002678 <HAL_RCC_ClockConfig+0x254>)
 8002452:	f043 0304 	orr.w	r3, r3, #4
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	4b87      	ldr	r3, [pc, #540]	; (8002678 <HAL_RCC_ClockConfig+0x254>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f023 0201 	bic.w	r2, r3, #1
 8002460:	4985      	ldr	r1, [pc, #532]	; (8002678 <HAL_RCC_ClockConfig+0x254>)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	4313      	orrs	r3, r2
 8002466:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002468:	4b83      	ldr	r3, [pc, #524]	; (8002678 <HAL_RCC_ClockConfig+0x254>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d001      	beq.n	800247a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e0f9      	b.n	800266e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002486:	4b7d      	ldr	r3, [pc, #500]	; (800267c <HAL_RCC_ClockConfig+0x258>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	497a      	ldr	r1, [pc, #488]	; (800267c <HAL_RCC_ClockConfig+0x258>)
 8002494:	4313      	orrs	r3, r2
 8002496:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 808e 	beq.w	80025c2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d107      	bne.n	80024be <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024ae:	4b73      	ldr	r3, [pc, #460]	; (800267c <HAL_RCC_ClockConfig+0x258>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d121      	bne.n	80024fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e0d7      	b.n	800266e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d107      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024c6:	4b6d      	ldr	r3, [pc, #436]	; (800267c <HAL_RCC_ClockConfig+0x258>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d115      	bne.n	80024fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e0cb      	b.n	800266e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d107      	bne.n	80024ee <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024de:	4b67      	ldr	r3, [pc, #412]	; (800267c <HAL_RCC_ClockConfig+0x258>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d109      	bne.n	80024fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e0bf      	b.n	800266e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024ee:	4b63      	ldr	r3, [pc, #396]	; (800267c <HAL_RCC_ClockConfig+0x258>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e0b7      	b.n	800266e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024fe:	4b5f      	ldr	r3, [pc, #380]	; (800267c <HAL_RCC_ClockConfig+0x258>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f023 0203 	bic.w	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	495c      	ldr	r1, [pc, #368]	; (800267c <HAL_RCC_ClockConfig+0x258>)
 800250c:	4313      	orrs	r3, r2
 800250e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002510:	f7fe fbc4 	bl	8000c9c <HAL_GetTick>
 8002514:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b02      	cmp	r3, #2
 800251c:	d112      	bne.n	8002544 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800251e:	e00a      	b.n	8002536 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002520:	f7fe fbbc 	bl	8000c9c <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	f241 3288 	movw	r2, #5000	; 0x1388
 800252e:	4293      	cmp	r3, r2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e09b      	b.n	800266e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002536:	4b51      	ldr	r3, [pc, #324]	; (800267c <HAL_RCC_ClockConfig+0x258>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b08      	cmp	r3, #8
 8002540:	d1ee      	bne.n	8002520 <HAL_RCC_ClockConfig+0xfc>
 8002542:	e03e      	b.n	80025c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d112      	bne.n	8002572 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800254e:	f7fe fba5 	bl	8000c9c <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	f241 3288 	movw	r2, #5000	; 0x1388
 800255c:	4293      	cmp	r3, r2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e084      	b.n	800266e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002564:	4b45      	ldr	r3, [pc, #276]	; (800267c <HAL_RCC_ClockConfig+0x258>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 030c 	and.w	r3, r3, #12
 800256c:	2b0c      	cmp	r3, #12
 800256e:	d1ee      	bne.n	800254e <HAL_RCC_ClockConfig+0x12a>
 8002570:	e027      	b.n	80025c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d11d      	bne.n	80025b6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800257a:	e00a      	b.n	8002592 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257c:	f7fe fb8e 	bl	8000c9c <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	; 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e06d      	b.n	800266e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002592:	4b3a      	ldr	r3, [pc, #232]	; (800267c <HAL_RCC_ClockConfig+0x258>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b04      	cmp	r3, #4
 800259c:	d1ee      	bne.n	800257c <HAL_RCC_ClockConfig+0x158>
 800259e:	e010      	b.n	80025c2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a0:	f7fe fb7c 	bl	8000c9c <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e05b      	b.n	800266e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80025b6:	4b31      	ldr	r3, [pc, #196]	; (800267c <HAL_RCC_ClockConfig+0x258>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1ee      	bne.n	80025a0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025c2:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_RCC_ClockConfig+0x254>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d219      	bcs.n	8002604 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d105      	bne.n	80025e2 <HAL_RCC_ClockConfig+0x1be>
 80025d6:	4b28      	ldr	r3, [pc, #160]	; (8002678 <HAL_RCC_ClockConfig+0x254>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a27      	ldr	r2, [pc, #156]	; (8002678 <HAL_RCC_ClockConfig+0x254>)
 80025dc:	f043 0304 	orr.w	r3, r3, #4
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	4b25      	ldr	r3, [pc, #148]	; (8002678 <HAL_RCC_ClockConfig+0x254>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 0201 	bic.w	r2, r3, #1
 80025ea:	4923      	ldr	r1, [pc, #140]	; (8002678 <HAL_RCC_ClockConfig+0x254>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b21      	ldr	r3, [pc, #132]	; (8002678 <HAL_RCC_ClockConfig+0x254>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e034      	b.n	800266e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002610:	4b1a      	ldr	r3, [pc, #104]	; (800267c <HAL_RCC_ClockConfig+0x258>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4917      	ldr	r1, [pc, #92]	; (800267c <HAL_RCC_ClockConfig+0x258>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d009      	beq.n	8002642 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800262e:	4b13      	ldr	r3, [pc, #76]	; (800267c <HAL_RCC_ClockConfig+0x258>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	490f      	ldr	r1, [pc, #60]	; (800267c <HAL_RCC_ClockConfig+0x258>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002642:	f000 f823 	bl	800268c <HAL_RCC_GetSysClockFreq>
 8002646:	4602      	mov	r2, r0
 8002648:	4b0c      	ldr	r3, [pc, #48]	; (800267c <HAL_RCC_ClockConfig+0x258>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	490b      	ldr	r1, [pc, #44]	; (8002680 <HAL_RCC_ClockConfig+0x25c>)
 8002654:	5ccb      	ldrb	r3, [r1, r3]
 8002656:	fa22 f303 	lsr.w	r3, r2, r3
 800265a:	4a0a      	ldr	r2, [pc, #40]	; (8002684 <HAL_RCC_ClockConfig+0x260>)
 800265c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800265e:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <HAL_RCC_ClockConfig+0x264>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe face 	bl	8000c04 <HAL_InitTick>
 8002668:	4603      	mov	r3, r0
 800266a:	72fb      	strb	r3, [r7, #11]

  return status;
 800266c:	7afb      	ldrb	r3, [r7, #11]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40023c00 	.word	0x40023c00
 800267c:	40023800 	.word	0x40023800
 8002680:	0800378c 	.word	0x0800378c
 8002684:	20000000 	.word	0x20000000
 8002688:	20000004 	.word	0x20000004

0800268c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800268c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002690:	b092      	sub	sp, #72	; 0x48
 8002692:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002694:	4b79      	ldr	r3, [pc, #484]	; (800287c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800269a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800269c:	f003 030c 	and.w	r3, r3, #12
 80026a0:	2b0c      	cmp	r3, #12
 80026a2:	d00d      	beq.n	80026c0 <HAL_RCC_GetSysClockFreq+0x34>
 80026a4:	2b0c      	cmp	r3, #12
 80026a6:	f200 80d5 	bhi.w	8002854 <HAL_RCC_GetSysClockFreq+0x1c8>
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d002      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0x28>
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d003      	beq.n	80026ba <HAL_RCC_GetSysClockFreq+0x2e>
 80026b2:	e0cf      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026b4:	4b72      	ldr	r3, [pc, #456]	; (8002880 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80026b6:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80026b8:	e0da      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026ba:	4b72      	ldr	r3, [pc, #456]	; (8002884 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80026bc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80026be:	e0d7      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80026c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c2:	0c9b      	lsrs	r3, r3, #18
 80026c4:	f003 020f 	and.w	r2, r3, #15
 80026c8:	4b6f      	ldr	r3, [pc, #444]	; (8002888 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80026ca:	5c9b      	ldrb	r3, [r3, r2]
 80026cc:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80026ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026d0:	0d9b      	lsrs	r3, r3, #22
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	3301      	adds	r3, #1
 80026d8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026da:	4b68      	ldr	r3, [pc, #416]	; (800287c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d05d      	beq.n	80027a2 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80026e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e8:	2200      	movs	r2, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	4611      	mov	r1, r2
 80026ee:	4604      	mov	r4, r0
 80026f0:	460d      	mov	r5, r1
 80026f2:	4622      	mov	r2, r4
 80026f4:	462b      	mov	r3, r5
 80026f6:	f04f 0000 	mov.w	r0, #0
 80026fa:	f04f 0100 	mov.w	r1, #0
 80026fe:	0159      	lsls	r1, r3, #5
 8002700:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002704:	0150      	lsls	r0, r2, #5
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4621      	mov	r1, r4
 800270c:	1a51      	subs	r1, r2, r1
 800270e:	6139      	str	r1, [r7, #16]
 8002710:	4629      	mov	r1, r5
 8002712:	eb63 0301 	sbc.w	r3, r3, r1
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002724:	4659      	mov	r1, fp
 8002726:	018b      	lsls	r3, r1, #6
 8002728:	4651      	mov	r1, sl
 800272a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800272e:	4651      	mov	r1, sl
 8002730:	018a      	lsls	r2, r1, #6
 8002732:	46d4      	mov	ip, sl
 8002734:	ebb2 080c 	subs.w	r8, r2, ip
 8002738:	4659      	mov	r1, fp
 800273a:	eb63 0901 	sbc.w	r9, r3, r1
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800274a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800274e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002752:	4690      	mov	r8, r2
 8002754:	4699      	mov	r9, r3
 8002756:	4623      	mov	r3, r4
 8002758:	eb18 0303 	adds.w	r3, r8, r3
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	462b      	mov	r3, r5
 8002760:	eb49 0303 	adc.w	r3, r9, r3
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002772:	4629      	mov	r1, r5
 8002774:	024b      	lsls	r3, r1, #9
 8002776:	4620      	mov	r0, r4
 8002778:	4629      	mov	r1, r5
 800277a:	4604      	mov	r4, r0
 800277c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002780:	4601      	mov	r1, r0
 8002782:	024a      	lsls	r2, r1, #9
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278a:	2200      	movs	r2, #0
 800278c:	62bb      	str	r3, [r7, #40]	; 0x28
 800278e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002790:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002794:	f7fd fcfa 	bl	800018c <__aeabi_uldivmod>
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4613      	mov	r3, r2
 800279e:	647b      	str	r3, [r7, #68]	; 0x44
 80027a0:	e055      	b.n	800284e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80027a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a4:	2200      	movs	r2, #0
 80027a6:	623b      	str	r3, [r7, #32]
 80027a8:	627a      	str	r2, [r7, #36]	; 0x24
 80027aa:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027ae:	4642      	mov	r2, r8
 80027b0:	464b      	mov	r3, r9
 80027b2:	f04f 0000 	mov.w	r0, #0
 80027b6:	f04f 0100 	mov.w	r1, #0
 80027ba:	0159      	lsls	r1, r3, #5
 80027bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027c0:	0150      	lsls	r0, r2, #5
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	46c4      	mov	ip, r8
 80027c8:	ebb2 0a0c 	subs.w	sl, r2, ip
 80027cc:	4640      	mov	r0, r8
 80027ce:	4649      	mov	r1, r9
 80027d0:	468c      	mov	ip, r1
 80027d2:	eb63 0b0c 	sbc.w	fp, r3, ip
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027e2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027e6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027ea:	ebb2 040a 	subs.w	r4, r2, sl
 80027ee:	eb63 050b 	sbc.w	r5, r3, fp
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	00eb      	lsls	r3, r5, #3
 80027fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002800:	00e2      	lsls	r2, r4, #3
 8002802:	4614      	mov	r4, r2
 8002804:	461d      	mov	r5, r3
 8002806:	4603      	mov	r3, r0
 8002808:	18e3      	adds	r3, r4, r3
 800280a:	603b      	str	r3, [r7, #0]
 800280c:	460b      	mov	r3, r1
 800280e:	eb45 0303 	adc.w	r3, r5, r3
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002820:	4629      	mov	r1, r5
 8002822:	028b      	lsls	r3, r1, #10
 8002824:	4620      	mov	r0, r4
 8002826:	4629      	mov	r1, r5
 8002828:	4604      	mov	r4, r0
 800282a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800282e:	4601      	mov	r1, r0
 8002830:	028a      	lsls	r2, r1, #10
 8002832:	4610      	mov	r0, r2
 8002834:	4619      	mov	r1, r3
 8002836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002838:	2200      	movs	r2, #0
 800283a:	61bb      	str	r3, [r7, #24]
 800283c:	61fa      	str	r2, [r7, #28]
 800283e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002842:	f7fd fca3 	bl	800018c <__aeabi_uldivmod>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4613      	mov	r3, r2
 800284c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800284e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002850:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002852:	e00d      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	0b5b      	lsrs	r3, r3, #13
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002862:	3301      	adds	r3, #1
 8002864:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800286e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8002872:	4618      	mov	r0, r3
 8002874:	3748      	adds	r7, #72	; 0x48
 8002876:	46bd      	mov	sp, r7
 8002878:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800287c:	40023800 	.word	0x40023800
 8002880:	00f42400 	.word	0x00f42400
 8002884:	007a1200 	.word	0x007a1200
 8002888:	08003780 	.word	0x08003780

0800288c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002890:	4b02      	ldr	r3, [pc, #8]	; (800289c <HAL_RCC_GetHCLKFreq+0x10>)
 8002892:	681b      	ldr	r3, [r3, #0]
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	20000000 	.word	0x20000000

080028a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028a4:	f7ff fff2 	bl	800288c <HAL_RCC_GetHCLKFreq>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	0a1b      	lsrs	r3, r3, #8
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	4903      	ldr	r1, [pc, #12]	; (80028c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028b6:	5ccb      	ldrb	r3, [r1, r3]
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028bc:	4618      	mov	r0, r3
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40023800 	.word	0x40023800
 80028c4:	0800379c 	.word	0x0800379c

080028c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028cc:	f7ff ffde 	bl	800288c <HAL_RCC_GetHCLKFreq>
 80028d0:	4602      	mov	r2, r0
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	0adb      	lsrs	r3, r3, #11
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	4903      	ldr	r1, [pc, #12]	; (80028ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80028de:	5ccb      	ldrb	r3, [r1, r3]
 80028e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40023800 	.word	0x40023800
 80028ec:	0800379c 	.word	0x0800379c

080028f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028f8:	2300      	movs	r3, #0
 80028fa:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80028fc:	4b29      	ldr	r3, [pc, #164]	; (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d12c      	bne.n	8002962 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002908:	4b26      	ldr	r3, [pc, #152]	; (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002914:	4b24      	ldr	r3, [pc, #144]	; (80029a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800291c:	617b      	str	r3, [r7, #20]
 800291e:	e016      	b.n	800294e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002920:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	4a1f      	ldr	r2, [pc, #124]	; (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292a:	6253      	str	r3, [r2, #36]	; 0x24
 800292c:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002938:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002940:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002942:	4b18      	ldr	r3, [pc, #96]	; (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	4a17      	ldr	r2, [pc, #92]	; (80029a4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800294c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002954:	d105      	bne.n	8002962 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800295c:	d101      	bne.n	8002962 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800295e:	2301      	movs	r3, #1
 8002960:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d105      	bne.n	8002974 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002968:	4b10      	ldr	r3, [pc, #64]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0f      	ldr	r2, [pc, #60]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f023 0201 	bic.w	r2, r3, #1
 800297c:	490b      	ldr	r1, [pc, #44]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002984:	4b09      	ldr	r3, [pc, #36]	; (80029ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	429a      	cmp	r2, r3
 8002990:	d001      	beq.n	8002996 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	371c      	adds	r7, #28
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40007000 	.word	0x40007000
 80029ac:	40023c00 	.word	0x40023c00

080029b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e042      	b.n	8002a48 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d106      	bne.n	80029dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fe f824 	bl	8000a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2224      	movs	r2, #36	; 0x24
 80029e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f91d 	bl	8002c34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695a      	ldr	r2, [r3, #20]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08a      	sub	sp, #40	; 0x28
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b20      	cmp	r3, #32
 8002a6e:	d16d      	bne.n	8002b4c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <HAL_UART_Transmit+0x2c>
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e066      	b.n	8002b4e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2221      	movs	r2, #33	; 0x21
 8002a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a8e:	f7fe f905 	bl	8000c9c <HAL_GetTick>
 8002a92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	88fa      	ldrh	r2, [r7, #6]
 8002a98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	88fa      	ldrh	r2, [r7, #6]
 8002a9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa8:	d108      	bne.n	8002abc <HAL_UART_Transmit+0x6c>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d104      	bne.n	8002abc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	61bb      	str	r3, [r7, #24]
 8002aba:	e003      	b.n	8002ac4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ac4:	e02a      	b.n	8002b1c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2200      	movs	r2, #0
 8002ace:	2180      	movs	r1, #128	; 0x80
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f840 	bl	8002b56 <UART_WaitOnFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e036      	b.n	8002b4e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10b      	bne.n	8002afe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002af4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	3302      	adds	r3, #2
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	e007      	b.n	8002b0e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	781a      	ldrb	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1cf      	bne.n	8002ac6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2140      	movs	r1, #64	; 0x40
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f810 	bl	8002b56 <UART_WaitOnFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e006      	b.n	8002b4e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e000      	b.n	8002b4e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002b4c:	2302      	movs	r3, #2
  }
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b090      	sub	sp, #64	; 0x40
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	603b      	str	r3, [r7, #0]
 8002b62:	4613      	mov	r3, r2
 8002b64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b66:	e050      	b.n	8002c0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6e:	d04c      	beq.n	8002c0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d007      	beq.n	8002b86 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b76:	f7fe f891 	bl	8000c9c <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d241      	bcs.n	8002c0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	330c      	adds	r3, #12
 8002b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b90:	e853 3f00 	ldrex	r3, [r3]
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	330c      	adds	r3, #12
 8002ba4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ba6:	637a      	str	r2, [r7, #52]	; 0x34
 8002ba8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002baa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bae:	e841 2300 	strex	r3, r2, [r1]
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1e5      	bne.n	8002b86 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	3314      	adds	r3, #20
 8002bc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	e853 3f00 	ldrex	r3, [r3]
 8002bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f023 0301 	bic.w	r3, r3, #1
 8002bd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3314      	adds	r3, #20
 8002bd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bda:	623a      	str	r2, [r7, #32]
 8002bdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bde:	69f9      	ldr	r1, [r7, #28]
 8002be0:	6a3a      	ldr	r2, [r7, #32]
 8002be2:	e841 2300 	strex	r3, r2, [r1]
 8002be6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1e5      	bne.n	8002bba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e00f      	b.n	8002c2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4013      	ands	r3, r2
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	bf0c      	ite	eq
 8002c1a:	2301      	moveq	r3, #1
 8002c1c:	2300      	movne	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d09f      	beq.n	8002b68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3740      	adds	r7, #64	; 0x40
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c74:	f023 030c 	bic.w	r3, r3, #12
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6812      	ldr	r2, [r2, #0]
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	430b      	orrs	r3, r1
 8002c80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699a      	ldr	r2, [r3, #24]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a55      	ldr	r2, [pc, #340]	; (8002df4 <UART_SetConfig+0x1c0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d103      	bne.n	8002caa <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ca2:	f7ff fe11 	bl	80028c8 <HAL_RCC_GetPCLK2Freq>
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	e002      	b.n	8002cb0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002caa:	f7ff fdf9 	bl	80028a0 <HAL_RCC_GetPCLK1Freq>
 8002cae:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cb8:	d14c      	bne.n	8002d54 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009a      	lsls	r2, r3, #2
 8002cc4:	441a      	add	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd0:	4a49      	ldr	r2, [pc, #292]	; (8002df8 <UART_SetConfig+0x1c4>)
 8002cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	0119      	lsls	r1, r3, #4
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009a      	lsls	r2, r3, #2
 8002ce4:	441a      	add	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cf0:	4b41      	ldr	r3, [pc, #260]	; (8002df8 <UART_SetConfig+0x1c4>)
 8002cf2:	fba3 0302 	umull	r0, r3, r3, r2
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	2064      	movs	r0, #100	; 0x64
 8002cfa:	fb00 f303 	mul.w	r3, r0, r3
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	3332      	adds	r3, #50	; 0x32
 8002d04:	4a3c      	ldr	r2, [pc, #240]	; (8002df8 <UART_SetConfig+0x1c4>)
 8002d06:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d12:	4419      	add	r1, r3
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009a      	lsls	r2, r3, #2
 8002d1e:	441a      	add	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d2a:	4b33      	ldr	r3, [pc, #204]	; (8002df8 <UART_SetConfig+0x1c4>)
 8002d2c:	fba3 0302 	umull	r0, r3, r3, r2
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	2064      	movs	r0, #100	; 0x64
 8002d34:	fb00 f303 	mul.w	r3, r0, r3
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	3332      	adds	r3, #50	; 0x32
 8002d3e:	4a2e      	ldr	r2, [pc, #184]	; (8002df8 <UART_SetConfig+0x1c4>)
 8002d40:	fba2 2303 	umull	r2, r3, r2, r3
 8002d44:	095b      	lsrs	r3, r3, #5
 8002d46:	f003 0207 	and.w	r2, r3, #7
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	440a      	add	r2, r1
 8002d50:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d52:	e04a      	b.n	8002dea <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	009a      	lsls	r2, r3, #2
 8002d5e:	441a      	add	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6a:	4a23      	ldr	r2, [pc, #140]	; (8002df8 <UART_SetConfig+0x1c4>)
 8002d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d70:	095b      	lsrs	r3, r3, #5
 8002d72:	0119      	lsls	r1, r3, #4
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009a      	lsls	r2, r3, #2
 8002d7e:	441a      	add	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d8a:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <UART_SetConfig+0x1c4>)
 8002d8c:	fba3 0302 	umull	r0, r3, r3, r2
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	2064      	movs	r0, #100	; 0x64
 8002d94:	fb00 f303 	mul.w	r3, r0, r3
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	3332      	adds	r3, #50	; 0x32
 8002d9e:	4a16      	ldr	r2, [pc, #88]	; (8002df8 <UART_SetConfig+0x1c4>)
 8002da0:	fba2 2303 	umull	r2, r3, r2, r3
 8002da4:	095b      	lsrs	r3, r3, #5
 8002da6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002daa:	4419      	add	r1, r3
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	009a      	lsls	r2, r3, #2
 8002db6:	441a      	add	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dc2:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <UART_SetConfig+0x1c4>)
 8002dc4:	fba3 0302 	umull	r0, r3, r3, r2
 8002dc8:	095b      	lsrs	r3, r3, #5
 8002dca:	2064      	movs	r0, #100	; 0x64
 8002dcc:	fb00 f303 	mul.w	r3, r0, r3
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	3332      	adds	r3, #50	; 0x32
 8002dd6:	4a08      	ldr	r2, [pc, #32]	; (8002df8 <UART_SetConfig+0x1c4>)
 8002dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ddc:	095b      	lsrs	r3, r3, #5
 8002dde:	f003 020f 	and.w	r2, r3, #15
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	440a      	add	r2, r1
 8002de8:	609a      	str	r2, [r3, #8]
}
 8002dea:	bf00      	nop
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40013800 	.word	0x40013800
 8002df8:	51eb851f 	.word	0x51eb851f

08002dfc <siprintf>:
 8002dfc:	b40e      	push	{r1, r2, r3}
 8002dfe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e02:	b500      	push	{lr}
 8002e04:	b09c      	sub	sp, #112	; 0x70
 8002e06:	ab1d      	add	r3, sp, #116	; 0x74
 8002e08:	9002      	str	r0, [sp, #8]
 8002e0a:	9006      	str	r0, [sp, #24]
 8002e0c:	9107      	str	r1, [sp, #28]
 8002e0e:	9104      	str	r1, [sp, #16]
 8002e10:	4808      	ldr	r0, [pc, #32]	; (8002e34 <siprintf+0x38>)
 8002e12:	4909      	ldr	r1, [pc, #36]	; (8002e38 <siprintf+0x3c>)
 8002e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e18:	9105      	str	r1, [sp, #20]
 8002e1a:	6800      	ldr	r0, [r0, #0]
 8002e1c:	a902      	add	r1, sp, #8
 8002e1e:	9301      	str	r3, [sp, #4]
 8002e20:	f000 f98e 	bl	8003140 <_svfiprintf_r>
 8002e24:	2200      	movs	r2, #0
 8002e26:	9b02      	ldr	r3, [sp, #8]
 8002e28:	701a      	strb	r2, [r3, #0]
 8002e2a:	b01c      	add	sp, #112	; 0x70
 8002e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e30:	b003      	add	sp, #12
 8002e32:	4770      	bx	lr
 8002e34:	20000058 	.word	0x20000058
 8002e38:	ffff0208 	.word	0xffff0208

08002e3c <memset>:
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	4402      	add	r2, r0
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d100      	bne.n	8002e46 <memset+0xa>
 8002e44:	4770      	bx	lr
 8002e46:	f803 1b01 	strb.w	r1, [r3], #1
 8002e4a:	e7f9      	b.n	8002e40 <memset+0x4>

08002e4c <__errno>:
 8002e4c:	4b01      	ldr	r3, [pc, #4]	; (8002e54 <__errno+0x8>)
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20000058 	.word	0x20000058

08002e58 <__libc_init_array>:
 8002e58:	b570      	push	{r4, r5, r6, lr}
 8002e5a:	2600      	movs	r6, #0
 8002e5c:	4d0c      	ldr	r5, [pc, #48]	; (8002e90 <__libc_init_array+0x38>)
 8002e5e:	4c0d      	ldr	r4, [pc, #52]	; (8002e94 <__libc_init_array+0x3c>)
 8002e60:	1b64      	subs	r4, r4, r5
 8002e62:	10a4      	asrs	r4, r4, #2
 8002e64:	42a6      	cmp	r6, r4
 8002e66:	d109      	bne.n	8002e7c <__libc_init_array+0x24>
 8002e68:	f000 fc7a 	bl	8003760 <_init>
 8002e6c:	2600      	movs	r6, #0
 8002e6e:	4d0a      	ldr	r5, [pc, #40]	; (8002e98 <__libc_init_array+0x40>)
 8002e70:	4c0a      	ldr	r4, [pc, #40]	; (8002e9c <__libc_init_array+0x44>)
 8002e72:	1b64      	subs	r4, r4, r5
 8002e74:	10a4      	asrs	r4, r4, #2
 8002e76:	42a6      	cmp	r6, r4
 8002e78:	d105      	bne.n	8002e86 <__libc_init_array+0x2e>
 8002e7a:	bd70      	pop	{r4, r5, r6, pc}
 8002e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e80:	4798      	blx	r3
 8002e82:	3601      	adds	r6, #1
 8002e84:	e7ee      	b.n	8002e64 <__libc_init_array+0xc>
 8002e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e8a:	4798      	blx	r3
 8002e8c:	3601      	adds	r6, #1
 8002e8e:	e7f2      	b.n	8002e76 <__libc_init_array+0x1e>
 8002e90:	080037e0 	.word	0x080037e0
 8002e94:	080037e0 	.word	0x080037e0
 8002e98:	080037e0 	.word	0x080037e0
 8002e9c:	080037e4 	.word	0x080037e4

08002ea0 <__retarget_lock_acquire_recursive>:
 8002ea0:	4770      	bx	lr

08002ea2 <__retarget_lock_release_recursive>:
 8002ea2:	4770      	bx	lr

08002ea4 <_free_r>:
 8002ea4:	b538      	push	{r3, r4, r5, lr}
 8002ea6:	4605      	mov	r5, r0
 8002ea8:	2900      	cmp	r1, #0
 8002eaa:	d040      	beq.n	8002f2e <_free_r+0x8a>
 8002eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002eb0:	1f0c      	subs	r4, r1, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	bfb8      	it	lt
 8002eb6:	18e4      	addlt	r4, r4, r3
 8002eb8:	f000 f8dc 	bl	8003074 <__malloc_lock>
 8002ebc:	4a1c      	ldr	r2, [pc, #112]	; (8002f30 <_free_r+0x8c>)
 8002ebe:	6813      	ldr	r3, [r2, #0]
 8002ec0:	b933      	cbnz	r3, 8002ed0 <_free_r+0x2c>
 8002ec2:	6063      	str	r3, [r4, #4]
 8002ec4:	6014      	str	r4, [r2, #0]
 8002ec6:	4628      	mov	r0, r5
 8002ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ecc:	f000 b8d8 	b.w	8003080 <__malloc_unlock>
 8002ed0:	42a3      	cmp	r3, r4
 8002ed2:	d908      	bls.n	8002ee6 <_free_r+0x42>
 8002ed4:	6820      	ldr	r0, [r4, #0]
 8002ed6:	1821      	adds	r1, r4, r0
 8002ed8:	428b      	cmp	r3, r1
 8002eda:	bf01      	itttt	eq
 8002edc:	6819      	ldreq	r1, [r3, #0]
 8002ede:	685b      	ldreq	r3, [r3, #4]
 8002ee0:	1809      	addeq	r1, r1, r0
 8002ee2:	6021      	streq	r1, [r4, #0]
 8002ee4:	e7ed      	b.n	8002ec2 <_free_r+0x1e>
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	b10b      	cbz	r3, 8002ef0 <_free_r+0x4c>
 8002eec:	42a3      	cmp	r3, r4
 8002eee:	d9fa      	bls.n	8002ee6 <_free_r+0x42>
 8002ef0:	6811      	ldr	r1, [r2, #0]
 8002ef2:	1850      	adds	r0, r2, r1
 8002ef4:	42a0      	cmp	r0, r4
 8002ef6:	d10b      	bne.n	8002f10 <_free_r+0x6c>
 8002ef8:	6820      	ldr	r0, [r4, #0]
 8002efa:	4401      	add	r1, r0
 8002efc:	1850      	adds	r0, r2, r1
 8002efe:	4283      	cmp	r3, r0
 8002f00:	6011      	str	r1, [r2, #0]
 8002f02:	d1e0      	bne.n	8002ec6 <_free_r+0x22>
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4408      	add	r0, r1
 8002f0a:	6010      	str	r0, [r2, #0]
 8002f0c:	6053      	str	r3, [r2, #4]
 8002f0e:	e7da      	b.n	8002ec6 <_free_r+0x22>
 8002f10:	d902      	bls.n	8002f18 <_free_r+0x74>
 8002f12:	230c      	movs	r3, #12
 8002f14:	602b      	str	r3, [r5, #0]
 8002f16:	e7d6      	b.n	8002ec6 <_free_r+0x22>
 8002f18:	6820      	ldr	r0, [r4, #0]
 8002f1a:	1821      	adds	r1, r4, r0
 8002f1c:	428b      	cmp	r3, r1
 8002f1e:	bf01      	itttt	eq
 8002f20:	6819      	ldreq	r1, [r3, #0]
 8002f22:	685b      	ldreq	r3, [r3, #4]
 8002f24:	1809      	addeq	r1, r1, r0
 8002f26:	6021      	streq	r1, [r4, #0]
 8002f28:	6063      	str	r3, [r4, #4]
 8002f2a:	6054      	str	r4, [r2, #4]
 8002f2c:	e7cb      	b.n	8002ec6 <_free_r+0x22>
 8002f2e:	bd38      	pop	{r3, r4, r5, pc}
 8002f30:	200042b8 	.word	0x200042b8

08002f34 <sbrk_aligned>:
 8002f34:	b570      	push	{r4, r5, r6, lr}
 8002f36:	4e0e      	ldr	r6, [pc, #56]	; (8002f70 <sbrk_aligned+0x3c>)
 8002f38:	460c      	mov	r4, r1
 8002f3a:	6831      	ldr	r1, [r6, #0]
 8002f3c:	4605      	mov	r5, r0
 8002f3e:	b911      	cbnz	r1, 8002f46 <sbrk_aligned+0x12>
 8002f40:	f000 fbaa 	bl	8003698 <_sbrk_r>
 8002f44:	6030      	str	r0, [r6, #0]
 8002f46:	4621      	mov	r1, r4
 8002f48:	4628      	mov	r0, r5
 8002f4a:	f000 fba5 	bl	8003698 <_sbrk_r>
 8002f4e:	1c43      	adds	r3, r0, #1
 8002f50:	d00a      	beq.n	8002f68 <sbrk_aligned+0x34>
 8002f52:	1cc4      	adds	r4, r0, #3
 8002f54:	f024 0403 	bic.w	r4, r4, #3
 8002f58:	42a0      	cmp	r0, r4
 8002f5a:	d007      	beq.n	8002f6c <sbrk_aligned+0x38>
 8002f5c:	1a21      	subs	r1, r4, r0
 8002f5e:	4628      	mov	r0, r5
 8002f60:	f000 fb9a 	bl	8003698 <_sbrk_r>
 8002f64:	3001      	adds	r0, #1
 8002f66:	d101      	bne.n	8002f6c <sbrk_aligned+0x38>
 8002f68:	f04f 34ff 	mov.w	r4, #4294967295
 8002f6c:	4620      	mov	r0, r4
 8002f6e:	bd70      	pop	{r4, r5, r6, pc}
 8002f70:	200042bc 	.word	0x200042bc

08002f74 <_malloc_r>:
 8002f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f78:	1ccd      	adds	r5, r1, #3
 8002f7a:	f025 0503 	bic.w	r5, r5, #3
 8002f7e:	3508      	adds	r5, #8
 8002f80:	2d0c      	cmp	r5, #12
 8002f82:	bf38      	it	cc
 8002f84:	250c      	movcc	r5, #12
 8002f86:	2d00      	cmp	r5, #0
 8002f88:	4607      	mov	r7, r0
 8002f8a:	db01      	blt.n	8002f90 <_malloc_r+0x1c>
 8002f8c:	42a9      	cmp	r1, r5
 8002f8e:	d905      	bls.n	8002f9c <_malloc_r+0x28>
 8002f90:	230c      	movs	r3, #12
 8002f92:	2600      	movs	r6, #0
 8002f94:	603b      	str	r3, [r7, #0]
 8002f96:	4630      	mov	r0, r6
 8002f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003070 <_malloc_r+0xfc>
 8002fa0:	f000 f868 	bl	8003074 <__malloc_lock>
 8002fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8002fa8:	461c      	mov	r4, r3
 8002faa:	bb5c      	cbnz	r4, 8003004 <_malloc_r+0x90>
 8002fac:	4629      	mov	r1, r5
 8002fae:	4638      	mov	r0, r7
 8002fb0:	f7ff ffc0 	bl	8002f34 <sbrk_aligned>
 8002fb4:	1c43      	adds	r3, r0, #1
 8002fb6:	4604      	mov	r4, r0
 8002fb8:	d155      	bne.n	8003066 <_malloc_r+0xf2>
 8002fba:	f8d8 4000 	ldr.w	r4, [r8]
 8002fbe:	4626      	mov	r6, r4
 8002fc0:	2e00      	cmp	r6, #0
 8002fc2:	d145      	bne.n	8003050 <_malloc_r+0xdc>
 8002fc4:	2c00      	cmp	r4, #0
 8002fc6:	d048      	beq.n	800305a <_malloc_r+0xe6>
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	4631      	mov	r1, r6
 8002fcc:	4638      	mov	r0, r7
 8002fce:	eb04 0903 	add.w	r9, r4, r3
 8002fd2:	f000 fb61 	bl	8003698 <_sbrk_r>
 8002fd6:	4581      	cmp	r9, r0
 8002fd8:	d13f      	bne.n	800305a <_malloc_r+0xe6>
 8002fda:	6821      	ldr	r1, [r4, #0]
 8002fdc:	4638      	mov	r0, r7
 8002fde:	1a6d      	subs	r5, r5, r1
 8002fe0:	4629      	mov	r1, r5
 8002fe2:	f7ff ffa7 	bl	8002f34 <sbrk_aligned>
 8002fe6:	3001      	adds	r0, #1
 8002fe8:	d037      	beq.n	800305a <_malloc_r+0xe6>
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	442b      	add	r3, r5
 8002fee:	6023      	str	r3, [r4, #0]
 8002ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d038      	beq.n	800306a <_malloc_r+0xf6>
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	42a2      	cmp	r2, r4
 8002ffc:	d12b      	bne.n	8003056 <_malloc_r+0xe2>
 8002ffe:	2200      	movs	r2, #0
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	e00f      	b.n	8003024 <_malloc_r+0xb0>
 8003004:	6822      	ldr	r2, [r4, #0]
 8003006:	1b52      	subs	r2, r2, r5
 8003008:	d41f      	bmi.n	800304a <_malloc_r+0xd6>
 800300a:	2a0b      	cmp	r2, #11
 800300c:	d917      	bls.n	800303e <_malloc_r+0xca>
 800300e:	1961      	adds	r1, r4, r5
 8003010:	42a3      	cmp	r3, r4
 8003012:	6025      	str	r5, [r4, #0]
 8003014:	bf18      	it	ne
 8003016:	6059      	strne	r1, [r3, #4]
 8003018:	6863      	ldr	r3, [r4, #4]
 800301a:	bf08      	it	eq
 800301c:	f8c8 1000 	streq.w	r1, [r8]
 8003020:	5162      	str	r2, [r4, r5]
 8003022:	604b      	str	r3, [r1, #4]
 8003024:	4638      	mov	r0, r7
 8003026:	f104 060b 	add.w	r6, r4, #11
 800302a:	f000 f829 	bl	8003080 <__malloc_unlock>
 800302e:	f026 0607 	bic.w	r6, r6, #7
 8003032:	1d23      	adds	r3, r4, #4
 8003034:	1af2      	subs	r2, r6, r3
 8003036:	d0ae      	beq.n	8002f96 <_malloc_r+0x22>
 8003038:	1b9b      	subs	r3, r3, r6
 800303a:	50a3      	str	r3, [r4, r2]
 800303c:	e7ab      	b.n	8002f96 <_malloc_r+0x22>
 800303e:	42a3      	cmp	r3, r4
 8003040:	6862      	ldr	r2, [r4, #4]
 8003042:	d1dd      	bne.n	8003000 <_malloc_r+0x8c>
 8003044:	f8c8 2000 	str.w	r2, [r8]
 8003048:	e7ec      	b.n	8003024 <_malloc_r+0xb0>
 800304a:	4623      	mov	r3, r4
 800304c:	6864      	ldr	r4, [r4, #4]
 800304e:	e7ac      	b.n	8002faa <_malloc_r+0x36>
 8003050:	4634      	mov	r4, r6
 8003052:	6876      	ldr	r6, [r6, #4]
 8003054:	e7b4      	b.n	8002fc0 <_malloc_r+0x4c>
 8003056:	4613      	mov	r3, r2
 8003058:	e7cc      	b.n	8002ff4 <_malloc_r+0x80>
 800305a:	230c      	movs	r3, #12
 800305c:	4638      	mov	r0, r7
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	f000 f80e 	bl	8003080 <__malloc_unlock>
 8003064:	e797      	b.n	8002f96 <_malloc_r+0x22>
 8003066:	6025      	str	r5, [r4, #0]
 8003068:	e7dc      	b.n	8003024 <_malloc_r+0xb0>
 800306a:	605b      	str	r3, [r3, #4]
 800306c:	deff      	udf	#255	; 0xff
 800306e:	bf00      	nop
 8003070:	200042b8 	.word	0x200042b8

08003074 <__malloc_lock>:
 8003074:	4801      	ldr	r0, [pc, #4]	; (800307c <__malloc_lock+0x8>)
 8003076:	f7ff bf13 	b.w	8002ea0 <__retarget_lock_acquire_recursive>
 800307a:	bf00      	nop
 800307c:	200042b4 	.word	0x200042b4

08003080 <__malloc_unlock>:
 8003080:	4801      	ldr	r0, [pc, #4]	; (8003088 <__malloc_unlock+0x8>)
 8003082:	f7ff bf0e 	b.w	8002ea2 <__retarget_lock_release_recursive>
 8003086:	bf00      	nop
 8003088:	200042b4 	.word	0x200042b4

0800308c <__ssputs_r>:
 800308c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003090:	461f      	mov	r7, r3
 8003092:	688e      	ldr	r6, [r1, #8]
 8003094:	4682      	mov	sl, r0
 8003096:	42be      	cmp	r6, r7
 8003098:	460c      	mov	r4, r1
 800309a:	4690      	mov	r8, r2
 800309c:	680b      	ldr	r3, [r1, #0]
 800309e:	d82c      	bhi.n	80030fa <__ssputs_r+0x6e>
 80030a0:	898a      	ldrh	r2, [r1, #12]
 80030a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80030a6:	d026      	beq.n	80030f6 <__ssputs_r+0x6a>
 80030a8:	6965      	ldr	r5, [r4, #20]
 80030aa:	6909      	ldr	r1, [r1, #16]
 80030ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030b0:	eba3 0901 	sub.w	r9, r3, r1
 80030b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80030b8:	1c7b      	adds	r3, r7, #1
 80030ba:	444b      	add	r3, r9
 80030bc:	106d      	asrs	r5, r5, #1
 80030be:	429d      	cmp	r5, r3
 80030c0:	bf38      	it	cc
 80030c2:	461d      	movcc	r5, r3
 80030c4:	0553      	lsls	r3, r2, #21
 80030c6:	d527      	bpl.n	8003118 <__ssputs_r+0x8c>
 80030c8:	4629      	mov	r1, r5
 80030ca:	f7ff ff53 	bl	8002f74 <_malloc_r>
 80030ce:	4606      	mov	r6, r0
 80030d0:	b360      	cbz	r0, 800312c <__ssputs_r+0xa0>
 80030d2:	464a      	mov	r2, r9
 80030d4:	6921      	ldr	r1, [r4, #16]
 80030d6:	f000 fafd 	bl	80036d4 <memcpy>
 80030da:	89a3      	ldrh	r3, [r4, #12]
 80030dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e4:	81a3      	strh	r3, [r4, #12]
 80030e6:	6126      	str	r6, [r4, #16]
 80030e8:	444e      	add	r6, r9
 80030ea:	6026      	str	r6, [r4, #0]
 80030ec:	463e      	mov	r6, r7
 80030ee:	6165      	str	r5, [r4, #20]
 80030f0:	eba5 0509 	sub.w	r5, r5, r9
 80030f4:	60a5      	str	r5, [r4, #8]
 80030f6:	42be      	cmp	r6, r7
 80030f8:	d900      	bls.n	80030fc <__ssputs_r+0x70>
 80030fa:	463e      	mov	r6, r7
 80030fc:	4632      	mov	r2, r6
 80030fe:	4641      	mov	r1, r8
 8003100:	6820      	ldr	r0, [r4, #0]
 8003102:	f000 faaf 	bl	8003664 <memmove>
 8003106:	2000      	movs	r0, #0
 8003108:	68a3      	ldr	r3, [r4, #8]
 800310a:	1b9b      	subs	r3, r3, r6
 800310c:	60a3      	str	r3, [r4, #8]
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	4433      	add	r3, r6
 8003112:	6023      	str	r3, [r4, #0]
 8003114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003118:	462a      	mov	r2, r5
 800311a:	f000 fae9 	bl	80036f0 <_realloc_r>
 800311e:	4606      	mov	r6, r0
 8003120:	2800      	cmp	r0, #0
 8003122:	d1e0      	bne.n	80030e6 <__ssputs_r+0x5a>
 8003124:	4650      	mov	r0, sl
 8003126:	6921      	ldr	r1, [r4, #16]
 8003128:	f7ff febc 	bl	8002ea4 <_free_r>
 800312c:	230c      	movs	r3, #12
 800312e:	f8ca 3000 	str.w	r3, [sl]
 8003132:	89a3      	ldrh	r3, [r4, #12]
 8003134:	f04f 30ff 	mov.w	r0, #4294967295
 8003138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800313c:	81a3      	strh	r3, [r4, #12]
 800313e:	e7e9      	b.n	8003114 <__ssputs_r+0x88>

08003140 <_svfiprintf_r>:
 8003140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003144:	4698      	mov	r8, r3
 8003146:	898b      	ldrh	r3, [r1, #12]
 8003148:	4607      	mov	r7, r0
 800314a:	061b      	lsls	r3, r3, #24
 800314c:	460d      	mov	r5, r1
 800314e:	4614      	mov	r4, r2
 8003150:	b09d      	sub	sp, #116	; 0x74
 8003152:	d50e      	bpl.n	8003172 <_svfiprintf_r+0x32>
 8003154:	690b      	ldr	r3, [r1, #16]
 8003156:	b963      	cbnz	r3, 8003172 <_svfiprintf_r+0x32>
 8003158:	2140      	movs	r1, #64	; 0x40
 800315a:	f7ff ff0b 	bl	8002f74 <_malloc_r>
 800315e:	6028      	str	r0, [r5, #0]
 8003160:	6128      	str	r0, [r5, #16]
 8003162:	b920      	cbnz	r0, 800316e <_svfiprintf_r+0x2e>
 8003164:	230c      	movs	r3, #12
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	f04f 30ff 	mov.w	r0, #4294967295
 800316c:	e0d0      	b.n	8003310 <_svfiprintf_r+0x1d0>
 800316e:	2340      	movs	r3, #64	; 0x40
 8003170:	616b      	str	r3, [r5, #20]
 8003172:	2300      	movs	r3, #0
 8003174:	9309      	str	r3, [sp, #36]	; 0x24
 8003176:	2320      	movs	r3, #32
 8003178:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800317c:	2330      	movs	r3, #48	; 0x30
 800317e:	f04f 0901 	mov.w	r9, #1
 8003182:	f8cd 800c 	str.w	r8, [sp, #12]
 8003186:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003328 <_svfiprintf_r+0x1e8>
 800318a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800318e:	4623      	mov	r3, r4
 8003190:	469a      	mov	sl, r3
 8003192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003196:	b10a      	cbz	r2, 800319c <_svfiprintf_r+0x5c>
 8003198:	2a25      	cmp	r2, #37	; 0x25
 800319a:	d1f9      	bne.n	8003190 <_svfiprintf_r+0x50>
 800319c:	ebba 0b04 	subs.w	fp, sl, r4
 80031a0:	d00b      	beq.n	80031ba <_svfiprintf_r+0x7a>
 80031a2:	465b      	mov	r3, fp
 80031a4:	4622      	mov	r2, r4
 80031a6:	4629      	mov	r1, r5
 80031a8:	4638      	mov	r0, r7
 80031aa:	f7ff ff6f 	bl	800308c <__ssputs_r>
 80031ae:	3001      	adds	r0, #1
 80031b0:	f000 80a9 	beq.w	8003306 <_svfiprintf_r+0x1c6>
 80031b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031b6:	445a      	add	r2, fp
 80031b8:	9209      	str	r2, [sp, #36]	; 0x24
 80031ba:	f89a 3000 	ldrb.w	r3, [sl]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 80a1 	beq.w	8003306 <_svfiprintf_r+0x1c6>
 80031c4:	2300      	movs	r3, #0
 80031c6:	f04f 32ff 	mov.w	r2, #4294967295
 80031ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031ce:	f10a 0a01 	add.w	sl, sl, #1
 80031d2:	9304      	str	r3, [sp, #16]
 80031d4:	9307      	str	r3, [sp, #28]
 80031d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031da:	931a      	str	r3, [sp, #104]	; 0x68
 80031dc:	4654      	mov	r4, sl
 80031de:	2205      	movs	r2, #5
 80031e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031e4:	4850      	ldr	r0, [pc, #320]	; (8003328 <_svfiprintf_r+0x1e8>)
 80031e6:	f000 fa67 	bl	80036b8 <memchr>
 80031ea:	9a04      	ldr	r2, [sp, #16]
 80031ec:	b9d8      	cbnz	r0, 8003226 <_svfiprintf_r+0xe6>
 80031ee:	06d0      	lsls	r0, r2, #27
 80031f0:	bf44      	itt	mi
 80031f2:	2320      	movmi	r3, #32
 80031f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031f8:	0711      	lsls	r1, r2, #28
 80031fa:	bf44      	itt	mi
 80031fc:	232b      	movmi	r3, #43	; 0x2b
 80031fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003202:	f89a 3000 	ldrb.w	r3, [sl]
 8003206:	2b2a      	cmp	r3, #42	; 0x2a
 8003208:	d015      	beq.n	8003236 <_svfiprintf_r+0xf6>
 800320a:	4654      	mov	r4, sl
 800320c:	2000      	movs	r0, #0
 800320e:	f04f 0c0a 	mov.w	ip, #10
 8003212:	9a07      	ldr	r2, [sp, #28]
 8003214:	4621      	mov	r1, r4
 8003216:	f811 3b01 	ldrb.w	r3, [r1], #1
 800321a:	3b30      	subs	r3, #48	; 0x30
 800321c:	2b09      	cmp	r3, #9
 800321e:	d94d      	bls.n	80032bc <_svfiprintf_r+0x17c>
 8003220:	b1b0      	cbz	r0, 8003250 <_svfiprintf_r+0x110>
 8003222:	9207      	str	r2, [sp, #28]
 8003224:	e014      	b.n	8003250 <_svfiprintf_r+0x110>
 8003226:	eba0 0308 	sub.w	r3, r0, r8
 800322a:	fa09 f303 	lsl.w	r3, r9, r3
 800322e:	4313      	orrs	r3, r2
 8003230:	46a2      	mov	sl, r4
 8003232:	9304      	str	r3, [sp, #16]
 8003234:	e7d2      	b.n	80031dc <_svfiprintf_r+0x9c>
 8003236:	9b03      	ldr	r3, [sp, #12]
 8003238:	1d19      	adds	r1, r3, #4
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	9103      	str	r1, [sp, #12]
 800323e:	2b00      	cmp	r3, #0
 8003240:	bfbb      	ittet	lt
 8003242:	425b      	neglt	r3, r3
 8003244:	f042 0202 	orrlt.w	r2, r2, #2
 8003248:	9307      	strge	r3, [sp, #28]
 800324a:	9307      	strlt	r3, [sp, #28]
 800324c:	bfb8      	it	lt
 800324e:	9204      	strlt	r2, [sp, #16]
 8003250:	7823      	ldrb	r3, [r4, #0]
 8003252:	2b2e      	cmp	r3, #46	; 0x2e
 8003254:	d10c      	bne.n	8003270 <_svfiprintf_r+0x130>
 8003256:	7863      	ldrb	r3, [r4, #1]
 8003258:	2b2a      	cmp	r3, #42	; 0x2a
 800325a:	d134      	bne.n	80032c6 <_svfiprintf_r+0x186>
 800325c:	9b03      	ldr	r3, [sp, #12]
 800325e:	3402      	adds	r4, #2
 8003260:	1d1a      	adds	r2, r3, #4
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	9203      	str	r2, [sp, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	bfb8      	it	lt
 800326a:	f04f 33ff 	movlt.w	r3, #4294967295
 800326e:	9305      	str	r3, [sp, #20]
 8003270:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800332c <_svfiprintf_r+0x1ec>
 8003274:	2203      	movs	r2, #3
 8003276:	4650      	mov	r0, sl
 8003278:	7821      	ldrb	r1, [r4, #0]
 800327a:	f000 fa1d 	bl	80036b8 <memchr>
 800327e:	b138      	cbz	r0, 8003290 <_svfiprintf_r+0x150>
 8003280:	2240      	movs	r2, #64	; 0x40
 8003282:	9b04      	ldr	r3, [sp, #16]
 8003284:	eba0 000a 	sub.w	r0, r0, sl
 8003288:	4082      	lsls	r2, r0
 800328a:	4313      	orrs	r3, r2
 800328c:	3401      	adds	r4, #1
 800328e:	9304      	str	r3, [sp, #16]
 8003290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003294:	2206      	movs	r2, #6
 8003296:	4826      	ldr	r0, [pc, #152]	; (8003330 <_svfiprintf_r+0x1f0>)
 8003298:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800329c:	f000 fa0c 	bl	80036b8 <memchr>
 80032a0:	2800      	cmp	r0, #0
 80032a2:	d038      	beq.n	8003316 <_svfiprintf_r+0x1d6>
 80032a4:	4b23      	ldr	r3, [pc, #140]	; (8003334 <_svfiprintf_r+0x1f4>)
 80032a6:	bb1b      	cbnz	r3, 80032f0 <_svfiprintf_r+0x1b0>
 80032a8:	9b03      	ldr	r3, [sp, #12]
 80032aa:	3307      	adds	r3, #7
 80032ac:	f023 0307 	bic.w	r3, r3, #7
 80032b0:	3308      	adds	r3, #8
 80032b2:	9303      	str	r3, [sp, #12]
 80032b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032b6:	4433      	add	r3, r6
 80032b8:	9309      	str	r3, [sp, #36]	; 0x24
 80032ba:	e768      	b.n	800318e <_svfiprintf_r+0x4e>
 80032bc:	460c      	mov	r4, r1
 80032be:	2001      	movs	r0, #1
 80032c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80032c4:	e7a6      	b.n	8003214 <_svfiprintf_r+0xd4>
 80032c6:	2300      	movs	r3, #0
 80032c8:	f04f 0c0a 	mov.w	ip, #10
 80032cc:	4619      	mov	r1, r3
 80032ce:	3401      	adds	r4, #1
 80032d0:	9305      	str	r3, [sp, #20]
 80032d2:	4620      	mov	r0, r4
 80032d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032d8:	3a30      	subs	r2, #48	; 0x30
 80032da:	2a09      	cmp	r2, #9
 80032dc:	d903      	bls.n	80032e6 <_svfiprintf_r+0x1a6>
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0c6      	beq.n	8003270 <_svfiprintf_r+0x130>
 80032e2:	9105      	str	r1, [sp, #20]
 80032e4:	e7c4      	b.n	8003270 <_svfiprintf_r+0x130>
 80032e6:	4604      	mov	r4, r0
 80032e8:	2301      	movs	r3, #1
 80032ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80032ee:	e7f0      	b.n	80032d2 <_svfiprintf_r+0x192>
 80032f0:	ab03      	add	r3, sp, #12
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	462a      	mov	r2, r5
 80032f6:	4638      	mov	r0, r7
 80032f8:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <_svfiprintf_r+0x1f8>)
 80032fa:	a904      	add	r1, sp, #16
 80032fc:	f3af 8000 	nop.w
 8003300:	1c42      	adds	r2, r0, #1
 8003302:	4606      	mov	r6, r0
 8003304:	d1d6      	bne.n	80032b4 <_svfiprintf_r+0x174>
 8003306:	89ab      	ldrh	r3, [r5, #12]
 8003308:	065b      	lsls	r3, r3, #25
 800330a:	f53f af2d 	bmi.w	8003168 <_svfiprintf_r+0x28>
 800330e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003310:	b01d      	add	sp, #116	; 0x74
 8003312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003316:	ab03      	add	r3, sp, #12
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	462a      	mov	r2, r5
 800331c:	4638      	mov	r0, r7
 800331e:	4b06      	ldr	r3, [pc, #24]	; (8003338 <_svfiprintf_r+0x1f8>)
 8003320:	a904      	add	r1, sp, #16
 8003322:	f000 f87d 	bl	8003420 <_printf_i>
 8003326:	e7eb      	b.n	8003300 <_svfiprintf_r+0x1c0>
 8003328:	080037a4 	.word	0x080037a4
 800332c:	080037aa 	.word	0x080037aa
 8003330:	080037ae 	.word	0x080037ae
 8003334:	00000000 	.word	0x00000000
 8003338:	0800308d 	.word	0x0800308d

0800333c <_printf_common>:
 800333c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003340:	4616      	mov	r6, r2
 8003342:	4699      	mov	r9, r3
 8003344:	688a      	ldr	r2, [r1, #8]
 8003346:	690b      	ldr	r3, [r1, #16]
 8003348:	4607      	mov	r7, r0
 800334a:	4293      	cmp	r3, r2
 800334c:	bfb8      	it	lt
 800334e:	4613      	movlt	r3, r2
 8003350:	6033      	str	r3, [r6, #0]
 8003352:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003356:	460c      	mov	r4, r1
 8003358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800335c:	b10a      	cbz	r2, 8003362 <_printf_common+0x26>
 800335e:	3301      	adds	r3, #1
 8003360:	6033      	str	r3, [r6, #0]
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	0699      	lsls	r1, r3, #26
 8003366:	bf42      	ittt	mi
 8003368:	6833      	ldrmi	r3, [r6, #0]
 800336a:	3302      	addmi	r3, #2
 800336c:	6033      	strmi	r3, [r6, #0]
 800336e:	6825      	ldr	r5, [r4, #0]
 8003370:	f015 0506 	ands.w	r5, r5, #6
 8003374:	d106      	bne.n	8003384 <_printf_common+0x48>
 8003376:	f104 0a19 	add.w	sl, r4, #25
 800337a:	68e3      	ldr	r3, [r4, #12]
 800337c:	6832      	ldr	r2, [r6, #0]
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	42ab      	cmp	r3, r5
 8003382:	dc2b      	bgt.n	80033dc <_printf_common+0xa0>
 8003384:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003388:	1e13      	subs	r3, r2, #0
 800338a:	6822      	ldr	r2, [r4, #0]
 800338c:	bf18      	it	ne
 800338e:	2301      	movne	r3, #1
 8003390:	0692      	lsls	r2, r2, #26
 8003392:	d430      	bmi.n	80033f6 <_printf_common+0xba>
 8003394:	4649      	mov	r1, r9
 8003396:	4638      	mov	r0, r7
 8003398:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800339c:	47c0      	blx	r8
 800339e:	3001      	adds	r0, #1
 80033a0:	d023      	beq.n	80033ea <_printf_common+0xae>
 80033a2:	6823      	ldr	r3, [r4, #0]
 80033a4:	6922      	ldr	r2, [r4, #16]
 80033a6:	f003 0306 	and.w	r3, r3, #6
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	bf14      	ite	ne
 80033ae:	2500      	movne	r5, #0
 80033b0:	6833      	ldreq	r3, [r6, #0]
 80033b2:	f04f 0600 	mov.w	r6, #0
 80033b6:	bf08      	it	eq
 80033b8:	68e5      	ldreq	r5, [r4, #12]
 80033ba:	f104 041a 	add.w	r4, r4, #26
 80033be:	bf08      	it	eq
 80033c0:	1aed      	subeq	r5, r5, r3
 80033c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80033c6:	bf08      	it	eq
 80033c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033cc:	4293      	cmp	r3, r2
 80033ce:	bfc4      	itt	gt
 80033d0:	1a9b      	subgt	r3, r3, r2
 80033d2:	18ed      	addgt	r5, r5, r3
 80033d4:	42b5      	cmp	r5, r6
 80033d6:	d11a      	bne.n	800340e <_printf_common+0xd2>
 80033d8:	2000      	movs	r0, #0
 80033da:	e008      	b.n	80033ee <_printf_common+0xb2>
 80033dc:	2301      	movs	r3, #1
 80033de:	4652      	mov	r2, sl
 80033e0:	4649      	mov	r1, r9
 80033e2:	4638      	mov	r0, r7
 80033e4:	47c0      	blx	r8
 80033e6:	3001      	adds	r0, #1
 80033e8:	d103      	bne.n	80033f2 <_printf_common+0xb6>
 80033ea:	f04f 30ff 	mov.w	r0, #4294967295
 80033ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f2:	3501      	adds	r5, #1
 80033f4:	e7c1      	b.n	800337a <_printf_common+0x3e>
 80033f6:	2030      	movs	r0, #48	; 0x30
 80033f8:	18e1      	adds	r1, r4, r3
 80033fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003404:	4422      	add	r2, r4
 8003406:	3302      	adds	r3, #2
 8003408:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800340c:	e7c2      	b.n	8003394 <_printf_common+0x58>
 800340e:	2301      	movs	r3, #1
 8003410:	4622      	mov	r2, r4
 8003412:	4649      	mov	r1, r9
 8003414:	4638      	mov	r0, r7
 8003416:	47c0      	blx	r8
 8003418:	3001      	adds	r0, #1
 800341a:	d0e6      	beq.n	80033ea <_printf_common+0xae>
 800341c:	3601      	adds	r6, #1
 800341e:	e7d9      	b.n	80033d4 <_printf_common+0x98>

08003420 <_printf_i>:
 8003420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003424:	7e0f      	ldrb	r7, [r1, #24]
 8003426:	4691      	mov	r9, r2
 8003428:	2f78      	cmp	r7, #120	; 0x78
 800342a:	4680      	mov	r8, r0
 800342c:	460c      	mov	r4, r1
 800342e:	469a      	mov	sl, r3
 8003430:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003432:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003436:	d807      	bhi.n	8003448 <_printf_i+0x28>
 8003438:	2f62      	cmp	r7, #98	; 0x62
 800343a:	d80a      	bhi.n	8003452 <_printf_i+0x32>
 800343c:	2f00      	cmp	r7, #0
 800343e:	f000 80d5 	beq.w	80035ec <_printf_i+0x1cc>
 8003442:	2f58      	cmp	r7, #88	; 0x58
 8003444:	f000 80c1 	beq.w	80035ca <_printf_i+0x1aa>
 8003448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800344c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003450:	e03a      	b.n	80034c8 <_printf_i+0xa8>
 8003452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003456:	2b15      	cmp	r3, #21
 8003458:	d8f6      	bhi.n	8003448 <_printf_i+0x28>
 800345a:	a101      	add	r1, pc, #4	; (adr r1, 8003460 <_printf_i+0x40>)
 800345c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003460:	080034b9 	.word	0x080034b9
 8003464:	080034cd 	.word	0x080034cd
 8003468:	08003449 	.word	0x08003449
 800346c:	08003449 	.word	0x08003449
 8003470:	08003449 	.word	0x08003449
 8003474:	08003449 	.word	0x08003449
 8003478:	080034cd 	.word	0x080034cd
 800347c:	08003449 	.word	0x08003449
 8003480:	08003449 	.word	0x08003449
 8003484:	08003449 	.word	0x08003449
 8003488:	08003449 	.word	0x08003449
 800348c:	080035d3 	.word	0x080035d3
 8003490:	080034f9 	.word	0x080034f9
 8003494:	0800358d 	.word	0x0800358d
 8003498:	08003449 	.word	0x08003449
 800349c:	08003449 	.word	0x08003449
 80034a0:	080035f5 	.word	0x080035f5
 80034a4:	08003449 	.word	0x08003449
 80034a8:	080034f9 	.word	0x080034f9
 80034ac:	08003449 	.word	0x08003449
 80034b0:	08003449 	.word	0x08003449
 80034b4:	08003595 	.word	0x08003595
 80034b8:	682b      	ldr	r3, [r5, #0]
 80034ba:	1d1a      	adds	r2, r3, #4
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	602a      	str	r2, [r5, #0]
 80034c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0a0      	b.n	800360e <_printf_i+0x1ee>
 80034cc:	6820      	ldr	r0, [r4, #0]
 80034ce:	682b      	ldr	r3, [r5, #0]
 80034d0:	0607      	lsls	r7, r0, #24
 80034d2:	f103 0104 	add.w	r1, r3, #4
 80034d6:	6029      	str	r1, [r5, #0]
 80034d8:	d501      	bpl.n	80034de <_printf_i+0xbe>
 80034da:	681e      	ldr	r6, [r3, #0]
 80034dc:	e003      	b.n	80034e6 <_printf_i+0xc6>
 80034de:	0646      	lsls	r6, r0, #25
 80034e0:	d5fb      	bpl.n	80034da <_printf_i+0xba>
 80034e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80034e6:	2e00      	cmp	r6, #0
 80034e8:	da03      	bge.n	80034f2 <_printf_i+0xd2>
 80034ea:	232d      	movs	r3, #45	; 0x2d
 80034ec:	4276      	negs	r6, r6
 80034ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034f2:	230a      	movs	r3, #10
 80034f4:	4859      	ldr	r0, [pc, #356]	; (800365c <_printf_i+0x23c>)
 80034f6:	e012      	b.n	800351e <_printf_i+0xfe>
 80034f8:	682b      	ldr	r3, [r5, #0]
 80034fa:	6820      	ldr	r0, [r4, #0]
 80034fc:	1d19      	adds	r1, r3, #4
 80034fe:	6029      	str	r1, [r5, #0]
 8003500:	0605      	lsls	r5, r0, #24
 8003502:	d501      	bpl.n	8003508 <_printf_i+0xe8>
 8003504:	681e      	ldr	r6, [r3, #0]
 8003506:	e002      	b.n	800350e <_printf_i+0xee>
 8003508:	0641      	lsls	r1, r0, #25
 800350a:	d5fb      	bpl.n	8003504 <_printf_i+0xe4>
 800350c:	881e      	ldrh	r6, [r3, #0]
 800350e:	2f6f      	cmp	r7, #111	; 0x6f
 8003510:	bf0c      	ite	eq
 8003512:	2308      	moveq	r3, #8
 8003514:	230a      	movne	r3, #10
 8003516:	4851      	ldr	r0, [pc, #324]	; (800365c <_printf_i+0x23c>)
 8003518:	2100      	movs	r1, #0
 800351a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800351e:	6865      	ldr	r5, [r4, #4]
 8003520:	2d00      	cmp	r5, #0
 8003522:	bfa8      	it	ge
 8003524:	6821      	ldrge	r1, [r4, #0]
 8003526:	60a5      	str	r5, [r4, #8]
 8003528:	bfa4      	itt	ge
 800352a:	f021 0104 	bicge.w	r1, r1, #4
 800352e:	6021      	strge	r1, [r4, #0]
 8003530:	b90e      	cbnz	r6, 8003536 <_printf_i+0x116>
 8003532:	2d00      	cmp	r5, #0
 8003534:	d04b      	beq.n	80035ce <_printf_i+0x1ae>
 8003536:	4615      	mov	r5, r2
 8003538:	fbb6 f1f3 	udiv	r1, r6, r3
 800353c:	fb03 6711 	mls	r7, r3, r1, r6
 8003540:	5dc7      	ldrb	r7, [r0, r7]
 8003542:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003546:	4637      	mov	r7, r6
 8003548:	42bb      	cmp	r3, r7
 800354a:	460e      	mov	r6, r1
 800354c:	d9f4      	bls.n	8003538 <_printf_i+0x118>
 800354e:	2b08      	cmp	r3, #8
 8003550:	d10b      	bne.n	800356a <_printf_i+0x14a>
 8003552:	6823      	ldr	r3, [r4, #0]
 8003554:	07de      	lsls	r6, r3, #31
 8003556:	d508      	bpl.n	800356a <_printf_i+0x14a>
 8003558:	6923      	ldr	r3, [r4, #16]
 800355a:	6861      	ldr	r1, [r4, #4]
 800355c:	4299      	cmp	r1, r3
 800355e:	bfde      	ittt	le
 8003560:	2330      	movle	r3, #48	; 0x30
 8003562:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003566:	f105 35ff 	addle.w	r5, r5, #4294967295
 800356a:	1b52      	subs	r2, r2, r5
 800356c:	6122      	str	r2, [r4, #16]
 800356e:	464b      	mov	r3, r9
 8003570:	4621      	mov	r1, r4
 8003572:	4640      	mov	r0, r8
 8003574:	f8cd a000 	str.w	sl, [sp]
 8003578:	aa03      	add	r2, sp, #12
 800357a:	f7ff fedf 	bl	800333c <_printf_common>
 800357e:	3001      	adds	r0, #1
 8003580:	d14a      	bne.n	8003618 <_printf_i+0x1f8>
 8003582:	f04f 30ff 	mov.w	r0, #4294967295
 8003586:	b004      	add	sp, #16
 8003588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	f043 0320 	orr.w	r3, r3, #32
 8003592:	6023      	str	r3, [r4, #0]
 8003594:	2778      	movs	r7, #120	; 0x78
 8003596:	4832      	ldr	r0, [pc, #200]	; (8003660 <_printf_i+0x240>)
 8003598:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	6829      	ldr	r1, [r5, #0]
 80035a0:	061f      	lsls	r7, r3, #24
 80035a2:	f851 6b04 	ldr.w	r6, [r1], #4
 80035a6:	d402      	bmi.n	80035ae <_printf_i+0x18e>
 80035a8:	065f      	lsls	r7, r3, #25
 80035aa:	bf48      	it	mi
 80035ac:	b2b6      	uxthmi	r6, r6
 80035ae:	07df      	lsls	r7, r3, #31
 80035b0:	bf48      	it	mi
 80035b2:	f043 0320 	orrmi.w	r3, r3, #32
 80035b6:	6029      	str	r1, [r5, #0]
 80035b8:	bf48      	it	mi
 80035ba:	6023      	strmi	r3, [r4, #0]
 80035bc:	b91e      	cbnz	r6, 80035c6 <_printf_i+0x1a6>
 80035be:	6823      	ldr	r3, [r4, #0]
 80035c0:	f023 0320 	bic.w	r3, r3, #32
 80035c4:	6023      	str	r3, [r4, #0]
 80035c6:	2310      	movs	r3, #16
 80035c8:	e7a6      	b.n	8003518 <_printf_i+0xf8>
 80035ca:	4824      	ldr	r0, [pc, #144]	; (800365c <_printf_i+0x23c>)
 80035cc:	e7e4      	b.n	8003598 <_printf_i+0x178>
 80035ce:	4615      	mov	r5, r2
 80035d0:	e7bd      	b.n	800354e <_printf_i+0x12e>
 80035d2:	682b      	ldr	r3, [r5, #0]
 80035d4:	6826      	ldr	r6, [r4, #0]
 80035d6:	1d18      	adds	r0, r3, #4
 80035d8:	6961      	ldr	r1, [r4, #20]
 80035da:	6028      	str	r0, [r5, #0]
 80035dc:	0635      	lsls	r5, r6, #24
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	d501      	bpl.n	80035e6 <_printf_i+0x1c6>
 80035e2:	6019      	str	r1, [r3, #0]
 80035e4:	e002      	b.n	80035ec <_printf_i+0x1cc>
 80035e6:	0670      	lsls	r0, r6, #25
 80035e8:	d5fb      	bpl.n	80035e2 <_printf_i+0x1c2>
 80035ea:	8019      	strh	r1, [r3, #0]
 80035ec:	2300      	movs	r3, #0
 80035ee:	4615      	mov	r5, r2
 80035f0:	6123      	str	r3, [r4, #16]
 80035f2:	e7bc      	b.n	800356e <_printf_i+0x14e>
 80035f4:	682b      	ldr	r3, [r5, #0]
 80035f6:	2100      	movs	r1, #0
 80035f8:	1d1a      	adds	r2, r3, #4
 80035fa:	602a      	str	r2, [r5, #0]
 80035fc:	681d      	ldr	r5, [r3, #0]
 80035fe:	6862      	ldr	r2, [r4, #4]
 8003600:	4628      	mov	r0, r5
 8003602:	f000 f859 	bl	80036b8 <memchr>
 8003606:	b108      	cbz	r0, 800360c <_printf_i+0x1ec>
 8003608:	1b40      	subs	r0, r0, r5
 800360a:	6060      	str	r0, [r4, #4]
 800360c:	6863      	ldr	r3, [r4, #4]
 800360e:	6123      	str	r3, [r4, #16]
 8003610:	2300      	movs	r3, #0
 8003612:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003616:	e7aa      	b.n	800356e <_printf_i+0x14e>
 8003618:	462a      	mov	r2, r5
 800361a:	4649      	mov	r1, r9
 800361c:	4640      	mov	r0, r8
 800361e:	6923      	ldr	r3, [r4, #16]
 8003620:	47d0      	blx	sl
 8003622:	3001      	adds	r0, #1
 8003624:	d0ad      	beq.n	8003582 <_printf_i+0x162>
 8003626:	6823      	ldr	r3, [r4, #0]
 8003628:	079b      	lsls	r3, r3, #30
 800362a:	d413      	bmi.n	8003654 <_printf_i+0x234>
 800362c:	68e0      	ldr	r0, [r4, #12]
 800362e:	9b03      	ldr	r3, [sp, #12]
 8003630:	4298      	cmp	r0, r3
 8003632:	bfb8      	it	lt
 8003634:	4618      	movlt	r0, r3
 8003636:	e7a6      	b.n	8003586 <_printf_i+0x166>
 8003638:	2301      	movs	r3, #1
 800363a:	4632      	mov	r2, r6
 800363c:	4649      	mov	r1, r9
 800363e:	4640      	mov	r0, r8
 8003640:	47d0      	blx	sl
 8003642:	3001      	adds	r0, #1
 8003644:	d09d      	beq.n	8003582 <_printf_i+0x162>
 8003646:	3501      	adds	r5, #1
 8003648:	68e3      	ldr	r3, [r4, #12]
 800364a:	9903      	ldr	r1, [sp, #12]
 800364c:	1a5b      	subs	r3, r3, r1
 800364e:	42ab      	cmp	r3, r5
 8003650:	dcf2      	bgt.n	8003638 <_printf_i+0x218>
 8003652:	e7eb      	b.n	800362c <_printf_i+0x20c>
 8003654:	2500      	movs	r5, #0
 8003656:	f104 0619 	add.w	r6, r4, #25
 800365a:	e7f5      	b.n	8003648 <_printf_i+0x228>
 800365c:	080037b5 	.word	0x080037b5
 8003660:	080037c6 	.word	0x080037c6

08003664 <memmove>:
 8003664:	4288      	cmp	r0, r1
 8003666:	b510      	push	{r4, lr}
 8003668:	eb01 0402 	add.w	r4, r1, r2
 800366c:	d902      	bls.n	8003674 <memmove+0x10>
 800366e:	4284      	cmp	r4, r0
 8003670:	4623      	mov	r3, r4
 8003672:	d807      	bhi.n	8003684 <memmove+0x20>
 8003674:	1e43      	subs	r3, r0, #1
 8003676:	42a1      	cmp	r1, r4
 8003678:	d008      	beq.n	800368c <memmove+0x28>
 800367a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800367e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003682:	e7f8      	b.n	8003676 <memmove+0x12>
 8003684:	4601      	mov	r1, r0
 8003686:	4402      	add	r2, r0
 8003688:	428a      	cmp	r2, r1
 800368a:	d100      	bne.n	800368e <memmove+0x2a>
 800368c:	bd10      	pop	{r4, pc}
 800368e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003692:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003696:	e7f7      	b.n	8003688 <memmove+0x24>

08003698 <_sbrk_r>:
 8003698:	b538      	push	{r3, r4, r5, lr}
 800369a:	2300      	movs	r3, #0
 800369c:	4d05      	ldr	r5, [pc, #20]	; (80036b4 <_sbrk_r+0x1c>)
 800369e:	4604      	mov	r4, r0
 80036a0:	4608      	mov	r0, r1
 80036a2:	602b      	str	r3, [r5, #0]
 80036a4:	f7fd fa34 	bl	8000b10 <_sbrk>
 80036a8:	1c43      	adds	r3, r0, #1
 80036aa:	d102      	bne.n	80036b2 <_sbrk_r+0x1a>
 80036ac:	682b      	ldr	r3, [r5, #0]
 80036ae:	b103      	cbz	r3, 80036b2 <_sbrk_r+0x1a>
 80036b0:	6023      	str	r3, [r4, #0]
 80036b2:	bd38      	pop	{r3, r4, r5, pc}
 80036b4:	200042b0 	.word	0x200042b0

080036b8 <memchr>:
 80036b8:	4603      	mov	r3, r0
 80036ba:	b510      	push	{r4, lr}
 80036bc:	b2c9      	uxtb	r1, r1
 80036be:	4402      	add	r2, r0
 80036c0:	4293      	cmp	r3, r2
 80036c2:	4618      	mov	r0, r3
 80036c4:	d101      	bne.n	80036ca <memchr+0x12>
 80036c6:	2000      	movs	r0, #0
 80036c8:	e003      	b.n	80036d2 <memchr+0x1a>
 80036ca:	7804      	ldrb	r4, [r0, #0]
 80036cc:	3301      	adds	r3, #1
 80036ce:	428c      	cmp	r4, r1
 80036d0:	d1f6      	bne.n	80036c0 <memchr+0x8>
 80036d2:	bd10      	pop	{r4, pc}

080036d4 <memcpy>:
 80036d4:	440a      	add	r2, r1
 80036d6:	4291      	cmp	r1, r2
 80036d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80036dc:	d100      	bne.n	80036e0 <memcpy+0xc>
 80036de:	4770      	bx	lr
 80036e0:	b510      	push	{r4, lr}
 80036e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036e6:	4291      	cmp	r1, r2
 80036e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036ec:	d1f9      	bne.n	80036e2 <memcpy+0xe>
 80036ee:	bd10      	pop	{r4, pc}

080036f0 <_realloc_r>:
 80036f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036f4:	4680      	mov	r8, r0
 80036f6:	4614      	mov	r4, r2
 80036f8:	460e      	mov	r6, r1
 80036fa:	b921      	cbnz	r1, 8003706 <_realloc_r+0x16>
 80036fc:	4611      	mov	r1, r2
 80036fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003702:	f7ff bc37 	b.w	8002f74 <_malloc_r>
 8003706:	b92a      	cbnz	r2, 8003714 <_realloc_r+0x24>
 8003708:	f7ff fbcc 	bl	8002ea4 <_free_r>
 800370c:	4625      	mov	r5, r4
 800370e:	4628      	mov	r0, r5
 8003710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003714:	f000 f81b 	bl	800374e <_malloc_usable_size_r>
 8003718:	4284      	cmp	r4, r0
 800371a:	4607      	mov	r7, r0
 800371c:	d802      	bhi.n	8003724 <_realloc_r+0x34>
 800371e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003722:	d812      	bhi.n	800374a <_realloc_r+0x5a>
 8003724:	4621      	mov	r1, r4
 8003726:	4640      	mov	r0, r8
 8003728:	f7ff fc24 	bl	8002f74 <_malloc_r>
 800372c:	4605      	mov	r5, r0
 800372e:	2800      	cmp	r0, #0
 8003730:	d0ed      	beq.n	800370e <_realloc_r+0x1e>
 8003732:	42bc      	cmp	r4, r7
 8003734:	4622      	mov	r2, r4
 8003736:	4631      	mov	r1, r6
 8003738:	bf28      	it	cs
 800373a:	463a      	movcs	r2, r7
 800373c:	f7ff ffca 	bl	80036d4 <memcpy>
 8003740:	4631      	mov	r1, r6
 8003742:	4640      	mov	r0, r8
 8003744:	f7ff fbae 	bl	8002ea4 <_free_r>
 8003748:	e7e1      	b.n	800370e <_realloc_r+0x1e>
 800374a:	4635      	mov	r5, r6
 800374c:	e7df      	b.n	800370e <_realloc_r+0x1e>

0800374e <_malloc_usable_size_r>:
 800374e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003752:	1f18      	subs	r0, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	bfbc      	itt	lt
 8003758:	580b      	ldrlt	r3, [r1, r0]
 800375a:	18c0      	addlt	r0, r0, r3
 800375c:	4770      	bx	lr
	...

08003760 <_init>:
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	bf00      	nop
 8003764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003766:	bc08      	pop	{r3}
 8003768:	469e      	mov	lr, r3
 800376a:	4770      	bx	lr

0800376c <_fini>:
 800376c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376e:	bf00      	nop
 8003770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003772:	bc08      	pop	{r3}
 8003774:	469e      	mov	lr, r3
 8003776:	4770      	bx	lr
